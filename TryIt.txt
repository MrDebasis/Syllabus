public with sharing class FileUploadController {
    @AuraEnabled
    public static String uploadChunkToContentDocument(
        String fileName,
        String base64Chunk,
        String contentType,
        Boolean isLastChunk,
        String contentVersionId // Now passing ContentVersionId, not ContentDocumentId
    ) {
        try {
            ContentVersion newVersion;

            if (contentVersionId == null) {
                // First chunk: create a new ContentVersion
                newVersion = new ContentVersion(
                    Title = fileName,
                    PathOnClient = fileName,
                    VersionData = EncodingUtil.base64Decode(base64Chunk),
                    IsMajorVersion = true
                );
                insert newVersion;

                // Return ContentVersionId (not ContentDocumentId) for next chunks
                return newVersion.Id;
            } else {
                // Subsequent chunks: find existing ContentVersion using ContentVersionId
                ContentVersion existingVersion = [SELECT Id, VersionData FROM ContentVersion WHERE Id = :contentVersionId LIMIT 1];

                String previousData = EncodingUtil.base64Encode(existingVersion.VersionData);
                String updatedData = previousData + base64Chunk;
                existingVersion.VersionData = EncodingUtil.base64Decode(updatedData);
                update existingVersion;
                newVersion = existingVersion;
            }

            // Return ContentDocumentId only at the last chunk
            return isLastChunk ? newVersion.ContentDocumentId : newVersion.Id;

        } catch (Exception e) {
            throw new AuraHandledException("Error uploading file: " + e.getMessage());
        }
    }
}



uploadInChunks(fileName, base64Data, contentType) {
    this.isLoading = true;
    let startPosition = 0;
    let endPosition = Math.min(CHUNK_SIZE, base64Data.length);
    let contentVersionId = null; // Now using ContentVersionId instead of ContentDocumentId

    const uploadChunk = () => {
        const chunk = base64Data.substring(startPosition, endPosition);

        uploadChunkToContentDocument({
            fileName: fileName,
            base64Chunk: chunk,
            contentType: contentType,
            isLastChunk: endPosition >= base64Data.length,
            contentVersionId: contentVersionId // Track ContentVersionId, not ContentDocumentId
        })
        .then((returnedId) => {
            contentVersionId = returnedId; // Store the ID after the first chunk

            if (endPosition < base64Data.length) {
                startPosition = endPosition;
                endPosition = Math.min(startPosition + CHUNK_SIZE, base64Data.length);
                uploadChunk(); // Upload next chunk
            } else {
                this.uploadedFileIds.push(contentVersionId);
                this.showSuccessMessage("File uploaded successfully!");
                this.isLoading = false;
            }
        })
        .catch((error) => {
            console.error("Error uploading chunk:", error);
            this.showErrorMessage("File upload failed!", true);
            this.isLoading = false;
        });
    };

    uploadChunk(); // Start chunked upload
}
