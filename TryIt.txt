import { LightningElement } from 'lwc';
import getObjectTables from '@salesforce/apex/PSSTrackerCaseController.getTableConfigs';

export default class Psp_PSSTrackerDataTableLWCComp extends LightningElement {
    tables = {};
    loading = false;
    error;

    connectedCallback() {
        this.loadTables();
    }

    async loadTables() {
        this.loading = true;
        this.error = null;

        try {
            const caseId = '50023000003st7sAAA'; // Replace with dynamic Case Id
            const result = await getObjectTables({ caseId });
            console.log('Apex result:', JSON.stringify(result));
            this.populateTables(result);
        } catch (e) {
            this.error = e.body?.message || e.message;
            console.error('Error loading tables:', e);
        } finally {
            this.loading = false;
        }
    }

    populateTables(result) {
        this.tables = {};

        for (const [objectName, wrapper] of Object.entries(result)) {
            let recordsArray = Object.values(wrapper.data);

            // ✅ Inject accountUrl into each record if needed
            if (objectName === 'HealthCloudGA__ContactContactRelation__c') {
                recordsArray = recordsArray.map(record => ({
                    ...record,
                    accountUrl: record.Account__c
                        ? `/lightning/r/Account/${record.Account__c}/view`
                        : null
                }));
            }

            this.tables[objectName] = {
                columns: this.buildLightningColumns(wrapper.columns),
                data: recordsArray,
                draftValues: [],
                sortedBy: '',
                sortedDirection: 'asc'
            };
        }
    }

    buildLightningColumns(columns) {
        return columns
            .filter(col => col.visible)
            .sort((a, b) => {
                if (a.PSSViewColumnOrder__c != null && b.PSSViewColumnOrder__c != null) {
                    return a.PSSViewColumnOrder__c - b.PSSViewColumnOrder__c;
                }
                return a.column_id.localeCompare(b.column_id);
            })
            .map(col => {
                let type = 'text';
                let typeAttributes;

                const dataType = col.data_type?.toLowerCase() || 'string';
                const field = col.column_id.toLowerCase();

                if (col.column_id === 'ContactName__c') {
                    // ✅ Render ContactName__c as a clickable URL using accountUrl
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'ContactName__c' },
                        target: '_blank',
                        tooltip: 'View Account',
                        url: { fieldName: 'accountUrl' }
                    };
                } else {
                    switch (dataType) {
                        case 'number':
                            type = 'number';
                            break;
                        case 'date':
                        case 'datetime':
                            type = 'date';
                            break;
                        case 'picklist':
                            type = 'picklist';
                            if (col.picklistValues) {
                                const options = col.picklistValues.split(';').map(val => ({
                                    label: val.trim(),
                                    value: val.trim()
                                }));
                                typeAttributes = {
                                    options,
                                    placeholder: 'Select',
                                    value: { fieldName: col.column_id },
                                    context: { fieldName: 'Id' }
                                };
                            }
                            break;
                        default:
                            // ✅ Detect phone fields and apply 'phone' type
                            if (field.includes('phone')) {
                                type = 'phone';
                            } else {
                                type = 'text';
                            }
                    }
                }

                return {
                    label: col.label,
                    fieldName: col.column_id,
                    editable: col.editable,
                    sortable: col.isSortingApplied,
                    type,
                    typeAttributes
                };
            });
    }

    // 🔍 Getter shortcuts for tables
    get caseTable() {
        return this.tables['Case'];
    }

    get associatedContact() {
        return this.tables['HealthCloudGA__ContactContactRelation__c'];
    }

    get contactTable() {
        return this.tables['Contact'];
    }

    handleSave(event) {
        const objectName = event.target.dataset.obj;
        const draftValues = event.detail.draftValues;

        this.tables[objectName].data = this.tables[objectName].data.map(row => {
            const draft = draftValues.find(d => d.Id === row.Id);
            return draft ? { ...row, ...draft } : row;
        });

        this.tables[objectName].draftValues = [];
    }

    handleSort(event) {
        const { fieldName, sortDirection } = event.detail;
        const objectName = event.target.dataset.obj;

        const sortedData = [...this.tables[objectName].data].sort((a, b) => {
            const aVal = a[fieldName] ?? '';
            const bVal = b[fieldName] ?? '';
            return sortDirection === 'asc'
                ? aVal > bVal ? 1 : -1
                : aVal < bVal ? 1 : -1;
        });

        this.tables[objectName].data = sortedData;
        this.tables[objectName].sortedBy = fieldName;
        this.tables[objectName].sortedDirection = sortDirection;
    }
}
