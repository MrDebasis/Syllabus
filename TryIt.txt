import { LightningElement, api, track } from 'lwc';
import myResource from '@salesforce/resourceUrl/Patient_Portal';
import FORM_FACTOR from '@salesforce/client/formFactor';

const ReceiptScreens = {
    1: { bool: 'submitExpense', value: 'valuesFromSubmitExpense', btnName: 'Submit Expense' }
};

const WithoutReceiptScreens = {
    1: { bool: 'showMissingReceiptScreen', value: 'valuesFromMissingReceiptScreen', btnName: 'Next' },
    2: { bool: 'showMissingReceiptReasonScreen', value: 'valuesFromReceiptReasonScreen', btnName: 'Next' },
    3: { bool: 'showMissingReceiptLimitScreen', value: 'valuesFromReceiptLimitScreen', btnName: 'Next' },
    4: { bool: 'submitExpense', value: 'valuesFromSubmitExpense', btnName: 'Submit Expense' }
};

export default class PspSubmitExpenses extends LightningElement {
    blueCrossIcon = `${myResource}/icons/BlueCrossIcon.svg`;
    mobileView;

    @api selectedData;
    @track selectedScreenCategory;
    @track flowScreens = {
        'Receipt Screens': ReceiptScreens,
        'Without Receipt Screens': WithoutReceiptScreens,
    };

    @track showWarningPopUp = false;
    @track submitExpense = false;
    @track showMissingReceiptScreen = false;
    @track showMissingReceiptReasonScreen = false;
    @track showMissingReceiptLimitScreen = false;

    // New properties for handling repeats
    @track currentScreenIndex = 0;
    @track repeatCounter = 0;
    @track maxRepeats = 2; // Adjust as needed

    connectedCallback() {
        this.mobileView = FORM_FACTOR === 'Small';
        console.log('selectedData', this.selectedData);
        this.showWarningPopUp = this.selectedData.length === 1;

        const selectedReceiptDataCount = this.selectedData.filter(
            record => (record.Receipt_Uploaded_R1__c ?? 'No') === 'Yes'
        ).length;
        const selectedDataCount = this.selectedData.length;
        this.selectedScreenCategory = selectedDataCount === selectedReceiptDataCount
            ? 'Receipt Screens'
            : 'Without Receipt Screens';
        this.calculateWhichScreenToRender();
    }

    calculateWhichScreenToRender() {
        // Initialize or reset counters if necessary
        this.currentScreenIndex = 0;
        this.repeatCounter = 0;
        this.closeScreens();
        this.updateScreen();
    }

    closeScreens() {
        for (let item in this.flowScreens[this.selectedScreenCategory]) {
            this[this.flowScreens[this.selectedScreenCategory][item].bool] = false;
        }
    }

    updateScreen() {
        const screen = this.flowScreens[this.selectedScreenCategory][this.currentScreenIndex + 1];
        if (screen) {
            this[screen.bool] = true;
            this.nextButtonName = screen.btnName;
        }
    }

    handleNext() {
        if (this.selectedScreenCategory === 'Without Receipt Screens') {
            if (this.currentScreenIndex === 1 || this.currentScreenIndex === 2) {
                // Handle repetition for screens 2 and 3
                if (this.repeatCounter < this.maxRepeats) {
                    this.repeatCounter++;
                    this.currentScreenIndex = 1; // Loop back to screen 2
                } else {
                    this.repeatCounter = 0;
                    this.currentScreenIndex++;
                }
            } else {
                this.currentScreenIndex++;
            }
        } else {
            this.currentScreenIndex++;
        }

        // Prevent exceeding the number of screens
        const totalScreens = Object.keys(this.flowScreens[this.selectedScreenCategory]).length;
        if (this.currentScreenIndex >= totalScreens) {
            this.currentScreenIndex = totalScreens - 1;
        }

        this.closeScreens();
        this.updateScreen();
    }

    handleBack() {
        if (this.selectedScreenCategory === 'Without Receipt Screens') {
            if (this.currentScreenIndex === 1 || this.currentScreenIndex === 2) {
                if (this.repeatCounter > 0) {
                    this.repeatCounter--;
                    this.currentScreenIndex = 1; // Go back to screen 2
                } else {
                    this.currentScreenIndex--;
                }
            } else {
                this.currentScreenIndex--;
            }
        } else {
            this.currentScreenIndex--;
        }

        // Prevent negative index
        if (this.currentScreenIndex < 0) {
            this.currentScreenIndex = 0;
        }

        this.closeScreens();
        this.updateScreen();
    }

    // Existing methods...
    openSubmitExpense() {
        this.showWarningPopUp = false;
        this.closeScreens();
        this.updateScreen();
    }

    closeAlert() {
        this.showWarningPopUp = false;
        this.closeModal();
    }

    closeModal() {
        this.dispatchEvent(new CustomEvent('close', { detail: true }));
    }
}
