<template>
    <template if:true={loading}>
        <lightning-spinner alternative-text="Loading" size="medium"></lightning-spinner>
    </template>

    <template if:true={error}>
        <div class="slds-text-color_error">{error}</div>
    </template>

    <!-- Case Table -->
    <template if:true={caseTable}>
        <lightning-card title="Case">
            <lightning-datatable
                key-field="Id"
                data={caseTable.data}
                columns={caseTable.columns}
                draft-values={caseTable.draftValues}
                onsave={handleSave}
                onsort={handleSort}
                sorted-by={caseTable.sortedBy}
                sorted-direction={caseTable.sortedDirection}
                hide-checkbox-column
                data-obj="Case">
            </lightning-datatable>
        </lightning-card>
        <br />
    </template>

    <!-- HealthCloudGA__ContactContactRelation__c -->
    <template if:true={associatedContact}>
        <lightning-card title="Associated Contact Relation">
            <lightning-datatable
                key-field="Id"
                data={associatedContact.data}
                columns={associatedContact.columns}
                draft-values={associatedContact.draftValues}
                onsave={handleSave}
                onsort={handleSort}
                sorted-by={associatedContact.sortedBy}
                sorted-direction={associatedContact.sortedDirection}
                hide-checkbox-column
                data-obj="HealthCloudGA__ContactContactRelation__c">
            </lightning-datatable>
        </lightning-card>
        <br />
    </template>

    <!-- Contact Table -->
    <template if:true={contactTable}>
        <lightning-card title="Contact">
            <lightning-datatable
                key-field="Id"
                data={contactTable.data}
                columns={contactTable.columns}
                draft-values={contactTable.draftValues}
                onsave={handleSave}
                onsort={handleSort}
                sorted-by={contactTable.sortedBy}
                sorted-direction={contactTable.sortedDirection}
                hide-checkbox-column
                data-obj="Contact">
            </lightning-datatable>
        </lightning-card>
        <br />
    </template>
</template>


import { LightningElement, track } from 'lwc';
import getObjectTables from '@salesforce/apex/PSSTrackerCaseController.getTableConfigs';

export default class Psp_PSSTrackerDataTableLWCComp extends LightningElement {
    @track tables = {};
    loading = false;
    error;

    connectedCallback() {
        this.loadTables();
    }

    async loadTables() {
        this.loading = true;
        this.error = null;

        try {
            const caseId = '50023000003st7sAAA'; // Replace with dynamic Case Id if needed
            const result = await getObjectTables({ caseId });
            console.log('Apex result:', JSON.stringify(result));
            this.populateTables(result);
        } catch (e) {
            this.error = e.body?.message || e.message;
            console.error('Error loading tables:', e);
        } finally {
            this.loading = false;
        }
    }

    populateTables(result) {
        this.tables = {};
        for (const [objectName, wrapper] of Object.entries(result)) {
            const recordsArray = Object.values(wrapper.data);

            this.tables[objectName] = {
                columns: this.buildLightningColumns(wrapper.columns),
                data: recordsArray,
                draftValues: [],
                sortedBy: '',
                sortedDirection: 'asc'
            };
        }
    }

    buildLightningColumns(columns) {
        return columns
            .filter(col => col.visible)
            .map(col => {
                let type = 'text';
                let typeAttributes;

                const dataType = col.data_type?.toLowerCase() || 'string';
                switch (dataType) {
                    case 'number':
                        type = 'number';
                        break;
                    case 'date':
                    case 'datetime':
                        type = 'date';
                        break;
                    case 'picklist':
                        type = 'picklist';
                        if (col.picklistValues) {
                            const options = col.picklistValues.split(';').map(val => ({
                                label: val.trim(),
                                value: val.trim()
                            }));
                            typeAttributes = {
                                options,
                                placeholder: 'Select',
                                value: { fieldName: col.column_id },
                                context: { fieldName: 'Id' }
                            };
                        }
                        break;
                    default:
                        type = 'text';
                }

                return {
                    label: col.label,
                    fieldName: col.column_id,
                    editable: col.editable,
                    sortable: col.isSortingApplied,
                    type,
                    typeAttributes
                };
            });
    }

    // âœ… Access each object directly by name
    get caseTable() {
        return this.tables['Case'];
    }

    get associatedContact() {
        return this.tables['HealthCloudGA__ContactContactRelation__c'];
    }

    get contactTable() {
        return this.tables['Contact'];
    }

    handleSave(event) {
        const objectName = event.target.dataset.obj;
        const draftValues = event.detail.draftValues;
        console.log(`Saving for ${objectName}:`, draftValues);

        this.tables[objectName].data = this.tables[objectName].data.map(row => {
            const draft = draftValues.find(d => d.Id === row.Id);
            return draft ? { ...row, ...draft } : row;
        });

        this.tables[objectName].draftValues = [];
    }

    handleSort(event) {
        const { fieldName, sortDirection } = event.detail;
        const objectName = event.target.dataset.obj;

        let sortedData = [...this.tables[objectName].data];
        sortedData.sort((a, b) => {
            const aVal = a[fieldName] ?? '';
            const bVal = b[fieldName] ?? '';
            return sortDirection === 'asc'
                ? aVal > bVal ? 1 : -1
                : aVal < bVal ? 1 : -1;
        });

        this.tables[objectName].data = sortedData;
        this.tables[objectName].sortedBy = fieldName;
        this.tables[objectName].sortedDirection = sortDirection;
    }
}
