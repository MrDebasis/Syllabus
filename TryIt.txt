{
    "options": [
        {
            "label": "PSP",
            "value": "PSP"
        },
        {
            "label": "Self-arranged",
            "value": "Self-arranged"
        },
        {
            "label": "Third party",
            "value": "Third party"
        }
    ],
    "placeholder": "Select",
    "value": {
        "fieldName": "Lodging_Arranged_by__c"
    },
    "context": {
        "fieldName": "Id"
    }
}

<template>
    <template if:true={loading}>
        <lightning-spinner alternative-text="Loading" size="medium"></lightning-spinner>
    </template>

    <template if:true={error}>
        <div class="slds-text-color_error">{error}</div>
    </template>

    <!-- <template if:true={showSpinner}>
        <div class="overlay">
            <lightning-spinner alternative-text="Loading" size="medium" variant="brand"></lightning-spinner>
        </div>
    </template> -->

    <!-- Case Table -->
        <template if:true={caseTable}>
            <div class="pss-list-view-container">
                <div class="font-style1 slds-m-bottom_small">Patient Case Information</div>
                <template if:false={isCaseTableRecords}>
                    <div class="slds-m-horizontal_large slds-m-bottom_large slds-align_absolute-center"><b><i>No Records Found !</i></b></div>
                </template>
                <template if:true={isCaseTableRecords}>
                    <div>
                        <lightning-datatable
                            key-field="Id"
                            data={caseTable.data}
                            columns={caseTable.columns}
                            draft-values={caseTable.draftValues}
                            onsave={handleSave}
                            onsort={handleSort}
                            sorted-by={caseTable.sortedBy}
                            sorted-direction={caseTable.sortedDirection}
                            hide-checkbox-column
                            data-obj="Case"
                            resize-column-disabled
                            show-row-number-column="false">
                        </lightning-datatable>
                    </div>
                </template>
            </div>
        </template>


    <!-- HealthCloudGA__ContactContactRelation__c -->
        <template if:true={associatedContact}>
            <div class="pss-list-view-container">
                <div class="font-style1 slds-m-bottom_small">Associated Contacts Information</div>
                <template if:false={isContactTableRecords}>
                    <div class="slds-m-horizontal_large slds-m-bottom_large slds-align_absolute-center"><b><i>{noRecordsFound}</i></b></div>
                </template>
                <template if:true={isContactTableRecords}>            
                    <div>
                        <lightning-datatable
                            key-field="Id"
                            data={associatedContact.data}
                            columns={associatedContact.columns}
                            draft-values={associatedContact.draftValues}
                            onsave={handleSave}
                            onsort={handleSort}
                            sorted-by={associatedContact.sortedBy}
                            sorted-direction={associatedContact.sortedDirection}
                            hide-checkbox-column
                            data-obj="HealthCloudGA__ContactContactRelation__c"
                            resize-column-disabled
                            show-row-number-column="false">
                        </lightning-datatable>
                    </div>
                </template>
            </div>
        </template>

        <template if:true={travelDates}>
            <div class="pss-list-view-container">
                <div class="font-style1 slds-m-bottom_small">Travel Dates</div>
                <template if:false={isTripTableRecords}>
                    <div class="slds-m-horizontal_large slds-m-bottom_large slds-align_absolute-center"><b><i>{noRecordsFound}</i></b></div>
                </template>
                <template if:true={isTripTableRecords}>            
                    <div>
                        <lightning-datatable
                            key-field="Id"
                            data={travelDates.data}
                            columns={travelDates.columns}
                            draft-values={travelDates.draftValues}
                            onsave={handleSave}
                            onsort={handleSort}
                            sorted-by={travelDates.sortedBy}
                            sorted-direction={travelDates.sortedDirection}
                            hide-checkbox-column
                            data-obj="Trip__c"
                            resize-column-disabled
                            show-row-number-column="false">
                        </lightning-datatable>
                    </div>
                </template>
            </div>
        </template>

        <template if:true={getAgreement}>
            <div class="pss-list-view-container">
                <div class="font-style1 slds-m-bottom_small">Reimbursement Forms</div>
                <template if:false={isAgreementTableRecords}>
                    <div class="slds-m-horizontal_large slds-m-bottom_large slds-align_absolute-center"><b><i>{noRecordsFound}</i></b></div>
                </template>  
                <template if:true={isAgreementTableRecords}>          
                    <div>
                        <lightning-datatable
                            key-field="Id"
                            data={getAgreement.data}
                            columns={getAgreement.columns}
                            draft-values={getAgreement.draftValues}
                            onsave={handleSave}
                            onsort={handleSort}
                            sorted-by={getAgreement.sortedBy}
                            sorted-direction={getAgreement.sortedDirection}
                            hide-checkbox-column
                            data-obj="echosign_dev1__SIGN_Agreement__c"
                            resize-column-disabled
                            show-row-number-column="false">
                        </lightning-datatable>
                    </div>
                </template>
            </div>
        </template>

        <template if:true={getReimbursemwnt}>
            <div class="pss-list-view-container">
                <div class="font-style1 slds-m-bottom_small">Reimbursement Details</div>
                <template if:false={isReimbursementTableRecords}>
                    <div class="slds-m-horizontal_large slds-m-bottom_large slds-align_absolute-center"><b><i>{noRecordsFound}</i></b></div>
                </template> 
                <template if:true={isReimbursementTableRecords}>           
                    <div>
                        <lightning-datatable
                            key-field="Id"
                            data={getReimbursemwnt.data}
                            columns={getReimbursemwnt.columns}
                            draft-values={getReimbursemwnt.draftValues}
                            onsave={handleSave}
                            onsort={handleSort}
                            sorted-by={getReimbursemwnt.sortedBy}
                            sorted-direction={getReimbursemwnt.sortedDirection}
                            hide-checkbox-column
                            data-obj="Reimbursement__c"
                            resize-column-disabled
                            show-row-number-column="false">
                        </lightning-datatable>
                    </div>
                </template>
            </div>
        </template>

        <template if:true={getCaseComment}>
            <div class="pss-list-view-container">
                <div class="font-style1 slds-m-bottom_small">Case Comments</div>
                <template if:false={isCaseCommentTableRecords}>
                    <div class="slds-m-horizontal_large slds-m-bottom_large slds-align_absolute-center"><b><i>{noRecordsFound}</i></b></div>
                </template>   
                <template if:true={isCaseCommentTableRecords}>         
                    <div>
                        <lightning-datatable
                            key-field="Id"
                            data={getCaseComment.data}
                            columns={getCaseComment.columns}
                            draft-values={getCaseComment.draftValues}
                            onsave={handleSave}
                            onsort={handleSort}
                            sorted-by={getCaseComment.sortedBy}
                            sorted-direction={getCaseComment.sortedDirection}
                            hide-checkbox-column
                            data-obj="CaseComment"
                            resize-column-disabled
                            show-row-number-column="false">
                        </lightning-datatable>
                    </div>
                </template>
            </div>
        </template>

import { LightningElement, track,api } from 'lwc';
import getObjectTables from '@salesforce/apex/PSSTrackerCaseController.getTableConfigs';
import saveRecord from '@salesforce/apex/PSSTrackerCaseController.saveRecords';
import getUserNamesByIds from '@salesforce/apex/PSSTrackerCaseController.getUserNamesByIds';
import getLatestTripContentDocumentMap from '@salesforce/apex/PSSTrackerCaseController.getLatestTripContentDocumentMap';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class Psp_PSSTrackerDataTableLWCComp extends LightningElement {
    @track tables = {};
    @track showSpinner = false;
    loading = false;
    error;
    @api caseId ='';
    connectedCallback() {
        this.loadTables();
    }

    async loadTables() {
        this.loading = true;
        this.error = null;

        try {
           // const caseId = '50023000003st7sAAA'; // Replace with dynamic Case Id if needed
            const result = await getObjectTables({ caseId : this.caseId });
            console.log('Apex result:', JSON.stringify(result));
            this.populateTables(result);
        } catch (e) {
            this.error = e.body?.message || e.message;
            console.error('Error loading tables:', e);
        } finally {
            this.loading = false;
        }
    }

    async populateTables(result) {
        this.tables = {};
        for (const [objectName, wrapper] of Object.entries(result)) {
            let recordsArray = Object.values(wrapper.data);

            if (objectName === 'Trip__c') {
                recordsArray = recordsArray.map(record => ({
                    ...record,
                    tripOwnerUrl: record.LookuptoPatientCaregiver__c
                        ? `/lightning/r/Account/${record.LookuptoPatientCaregiver__c}/view`
                        : null
                }));
            }


            if (objectName == 'HealthCloudGA__ContactContactRelation__c') {
                recordsArray = recordsArray.map(record => ({
                    ...record,
                    accountUrl: record.Account__c
                        ? `/lightning/r/Account/${record.Account__c}/view`
                        : null
                }));
            }

           
            if (objectName == 'echosign_dev1__SIGN_Agreement__c') {
                recordsArray = recordsArray.map(record => ({
                    ...record,
                    tripUrl: record.Trip__c
                        ? `/lightning/r/Trip__c/${record.Trip__c}/view`
                        : null,
                    agreementUrl: record.Id
                        ? `/lightning/r/echosign_dev1__SIGN_Agreement__c/${record.Id}/view`
                        : null
                }));
            }

        /*    if (objectName == 'echosign_dev1__SIGN_Agreement__c') {
                recordsArray = recordsArray.map(record => ({
                    ...record,
                    tripUrl: record.Trip__c
                        ? `/lightning/r/Trip__c/${record.Trip__c}/view`
                        : null,
                    agreementUrl: record.Id
                        ? `/lightning/r/echosign_dev1__SIGN_Agreement__c/${record.Id}/view`
                        : null
                }));
            }*/

            
            if (objectName == 'Reimbursement__c') {
                recordsArray = recordsArray.map(record => ({
                    ...record,
                    reimbursementTripUrl: record.CreatedFromTrip__c
                        ? `/lightning/r/Trip__c/${record.CreatedFromTrip__c}/view`
                        : null,
                    reimbursementNameUrl: record.Id
                        ? `/lightning/r/Reimbursement__c/${record.Id}/view`
                        : null
                }));
            }


            this.tables[objectName] = {
                columns: this.buildLightningColumns(wrapper.columns,objectName),
                data: recordsArray,
                draftValues: [],
                sortedBy: '',
                sortedDirection: 'asc' // need to make it dynamic
            };
        }
    }
    
    
    buildLightningColumns(columns,objectName) {
        return columns
            .filter(col => col.visible)
            .sort((a, b) => {
                if (a.PSSViewColumnOrder__c != null && b.PSSViewColumnOrder__c != null) {
                    return a.PSSViewColumnOrder__c - b.PSSViewColumnOrder__c;
                }
                return a.column_id.localeCompare(b.column_id);
            })
            .map(col => {
                let type = 'text';
                let typeAttributes;
                let hideLabel = false;

                const dataType = col.data_type?.toLowerCase() || 'string';
                
                if (objectName === 'Trip__c' && col.column_id === 'Itinerary__c') {
                    type = 'url';
                    typeAttributes = {
                        label: 'View', // Label field
                        target: '_blank',
                        url: { fieldName: 'itineraryURL' }
                    };
                    return {
                        label: col.label,
                        fieldName: 'itineraryURL',
                        editable: false,
                        sortable: false,
                        type,
                        typeAttributes,
                        hideDefaultActions: true
                    };
                }

                if (objectName === 'Trip__c' && col.column_id === 'PatientCaregiverName__c') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'PatientCaregiverName__c' },
                        target: '_blank',
                        url: {
                            fieldName:  'tripOwnerUrl'
                        }
                    };
                    return {
                        label: col.label,
                        fieldName: 'tripOwnerUrl', // mapped field
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        type,
                        typeAttributes,
                        hideDefaultActions: true
                    };
                }
                if (objectName === 'HealthCloudGA__ContactContactRelation__c' && col.column_id === 'ContactName__c') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'ContactName__c' },
                        target: '_blank',
                        url: {
                            fieldName:  'accountUrl'
                        }
                    };
                    return {
                        label: col.label,
                        fieldName: 'accountUrl', // mapped field
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        type,
                        typeAttributes,
                        hideDefaultActions: true
                    };
                }
                if (objectName == 'echosign_dev1__SIGN_Agreement__c' && col.column_id === 'TripName__c') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'TripName__c' },
                        target: '_blank',
                        url: {
                            fieldName:  'tripUrl'
                        }
                    };
                    return {
                        label: col.label,
                        fieldName: 'tripUrl',
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        type,
                        typeAttributes,
                        hideDefaultActions: true
                    };
                }
                if (objectName == 'echosign_dev1__SIGN_Agreement__c' && col.column_id === 'Name') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'Name' },
                        target: '_blank',
                        url: {
                            fieldName:  'agreementUrl'
                        }
                    };
                    return {
                        label: col.label,
                        fieldName: 'agreementUrl',
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        type,
                        typeAttributes,
                        hideDefaultActions: true
                    };
                }
                 if (objectName === 'Reimbursement__c' && col.column_id === 'TripName__c') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'TripName__c' },
                        target: '_blank',
                        url: {
                            fieldName:  'reimbursementTripUrl'
                        }
                    };
                    return {
                        label: col.label,
                        fieldName: 'reimbursementTripUrl',
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        type,
                        typeAttributes,
                        hideDefaultActions: true
                    };
                }  

                if (objectName === 'Reimbursement__c' && col.column_id === 'Name') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'Name' },
                        target: '_blank',
                        url: {
                            fieldName:  'reimbursementNameUrl'
                        }
                    };
                    return {
                        label: col.label,
                        fieldName: 'reimbursementNameUrl',
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        type,
                        typeAttributes,
                        hideDefaultActions: true
                    };
                }  
               
                else {
                    switch (dataType) {
                        case 'number':
                            type = 'number';
                            hideLabel = true;
                            break;
                        case 'date':
                        case 'datetime':
                            type = 'date';
                                typeAttributes = {
                                    year: 'numeric',
                                    month: '2-digit',
                                    day: '2-digit'
                                };
                            break;
                    case 'currency':
                        type = 'currency';
                        typeAttributes = {
                            currencyCode: 'USD', // or use { fieldName: 'CurrencyIsoCode' } if dynamic
                            minimumFractionDigits: 2
                        };
                        break;
                        case 'picklist':
                            type = 'picklist';
                            if (col.picklistValues) {
                                const options = col.picklistValues.split(';').map(val => ({
                                    label: val.trim(),
                                    value: val.trim()
                                }));
                                typeAttributes = {
                                    options,
                                    placeholder: 'Select',
                                    value: { fieldName: col.column_id },
                                    context: { fieldName: 'Id' }
                                };
                            }
                            break;
                        default:
                            // Detect and handle phone field
                            if (col.column_id.toLowerCase().includes('phone')) {
                                type = 'phone';
                            } else {
                                type = 'text';
                            }
                    }
                }

                return {
                    label: col.label,
                    fieldName: col.column_id,
                    editable: col.editable,
                    sortable: col.isSortingApplied,
                    type,
                    typeAttributes,
                    hideLabel,
                    hideDefaultActions: true
                };
            });
    }

    @track isCaseTableRecords = false;
    @track isContactTableRecords = false;
    @track isAgreementTableRecords = false;
    @track isReimbursementTableRecords = false;
    @track isTripTableRecords = false;
    @track isCaseCommentTableRecords = false;
    @track noRecordsFound = 'No Records Found !';

    get caseTable() {
        this.isCaseTableRecords = this.tables['Case'] && this.tables['Case'].data.length > 0;
        return this.tables['Case'];
    }

    get associatedContact() {
        this.isContactTableRecords = this.tables['HealthCloudGA__ContactContactRelation__c'] && this.tables['HealthCloudGA__ContactContactRelation__c'].data.length > 0;
        return this.tables['HealthCloudGA__ContactContactRelation__c'];
    }

    get getAgreement() {
        this.isAgreementTableRecords = this.tables['echosign_dev1__SIGN_Agreement__c'] && this.tables['echosign_dev1__SIGN_Agreement__c'].data.length > 0;
        return this.tables['echosign_dev1__SIGN_Agreement__c'];
    }

    get getReimbursemwnt() {
        this.isReimbursementTableRecords = this.tables['Reimbursement__c'] && this.tables['Reimbursement__c'].data.length > 0;
        return this.tables['Reimbursement__c'];
    }

    // get travelDates(){
    //     this.isTripTableRecords = this.tables['Trip__c'] && this.tables['Trip__c'].data.length > 0;
    //     return this.tables['Trip__c'];
    // }

    get travelDates() {
        this.isTripTableRecords = this.tables['Trip__c'] && this.tables['Trip__c'].data.length > 0;
        let tripTable = this.tables['Trip__c'];
        if (!tripTable || !tripTable.data || tripTable._isProcessed) {
            return tripTable;
        }
     
        const tripIds = tripTable.data.map(record => record.Id);
     
        if (tripIds.length > 0) {
     
            getLatestTripContentDocumentMap({ tripIds })
                .then(docMap => {
     
     
                    tripTable.data = tripTable.data.map(record => {
                        const docId = docMap[record.Id];
                        return {
                            ...record,
                            itineraryURL: docId ? `/lightning/r/ContentDocument/${docId}/view` : null
                        };
                    });
     
                    tripTable._isProcessed = true;
                    this.tables['Trip__c'] = tripTable;
                })
                .catch(error => {
                    console.error('Error fetching itinerary document map:', error);
                });
        }
     
        return tripTable;
    }

     /* get getCaseComment() {
        console.log('this.tablesCaseComment -->',this.tables['CaseComment']);
        return this.tables['CaseComment'];
      }*/
  
        get getCaseComment() {
            this.isCaseCommentTableRecords = this.tables['CaseComment'] && this.tables['CaseComment'].data.length > 0;
            let caseCommentTable = this.tables['CaseComment'];
        
            if (!caseCommentTable || !caseCommentTable.data || caseCommentTable._isProcessed) {
                return caseCommentTable;
            }
        
            const userIdSet = new Set();
        
            // Collect CreatedById values
            caseCommentTable.data.forEach(record => {
                if (record.CreatedById) {
                    userIdSet.add(record.CreatedById);
                }
            });
        
            const userIds = Array.from(userIdSet);
        
            if (userIds.length > 0) {
                getUserNamesByIds({ userIds })
                    .then(userMap => {
                        caseCommentTable.data = caseCommentTable.data.map(record => ({
                            ...record,
                            CreatedById: userMap[record.CreatedById] || record.CreatedById
                        }));
                        caseCommentTable._isProcessed = true;
                        this.tables['CaseComment'] = caseCommentTable;
                    })
                    .catch(error => {
                        console.error('Error fetching user names for CaseComment:', error);
                    });
            }
        
            return caseCommentTable;
        }
    get contactTable() {
        return this.tables['Contact'];
    }

   async  handleSave(event) {
        this.showSpinner = true;
        this.spinnerEvent();
        const objectName = event.target.dataset.obj;
        const draftValues = event.detail.draftValues;
        console.log(`Saving for ${objectName}:`, draftValues);

          // Add objectApiName to each record
    const payloadList = draftValues.map(d => ({
        ...d,
        objectApiName: objectName
    }));

    try {
        await saveRecord({ payloadList });
        this.showSpinner = false;
        this.spinnerEvent();
        this.showToastAfterSaving('success', `Record saved successfully.`); 
    } catch (error) {
        this.showSpinner = false;
        this.spinnerEvent();
        this.showToastAfterSaving('error', `Error saving record. Details: ${
            error.message || (error.body && error.body.message) || JSON.stringify(error)
        }`);
        console.error('Error saving records:', error);
    }
        this.tables[objectName].data = this.tables[objectName].data.map(row => {
            const draft = draftValues.find(d => d.Id === row.Id);
            return draft ? { ...row, ...draft } : row;
        });

        this.tables[objectName].draftValues = [];
    }

    showToastAfterSaving(type, message) {
        
        const event = new ShowToastEvent({
            title: type == 'success' ? 'Success' : 'Error',
            message: message,
            variant: type
        });
        this.dispatchEvent(event);
    }  

    spinnerEvent() {
        const event = new CustomEvent('spin', {
            detail: {
                showSpinner: this.showSpinner
            }
        });
        this.dispatchEvent(event);        
     }
 

    handleSort(event) {
        const { fieldName, sortDirection } = event.detail;
        const objectName = event.target.dataset.obj;

        let sortedData = [...this.tables[objectName].data];
        sortedData.sort((a, b) => {
            const aVal = a[fieldName] ?? '';
            const bVal = b[fieldName] ?? '';
            return sortDirection === 'asc'
                ? aVal > bVal ? 1 : -1
                : aVal < bVal ? 1 : -1;
        });

        this.tables[objectName].data = sortedData;
        this.tables[objectName].sortedBy = fieldName;
        this.tables[objectName].sortedDirection = sortDirection;
    }
}
