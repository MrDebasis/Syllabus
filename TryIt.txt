 loadData() {
        return getExpenseLineItems({ limitSize: this.rowLimit, offset: this.rowOffSet,reimbursementRecId : this.reimbursementRecordId })
            .then(result => {
                this.data = [...this.data, ...result];

                this.data = this.data.map((record) => {

                    return { ...record, 
                        record.ReimbursableAmount__c :this.checkValueForAmountIsNullOrEmpty(record.ReimbursableAmount__c),

                        //If receipt Present
                        Picture: this.receiptIcon, 
                        ShowPicture: record.Transient__r.Receipt_Uploaded_R1__c !==undefined && record.Transient__r.Receipt_Uploaded_R1__c ==='Yes' ,

                        //if receipt not present
                        showMissingReceiptUrl : !record.Transient__r.Receipt_Uploaded_R1__c || record.Transient__r.Receipt_Uploaded_R1__c === 'No',
                        missingReceiptUrl : this.showMissingReceipt,

                        //if receipt not present and status = Action Needed
                        errIcon :  this.errorIcon,
                        showErrorIcon: this.status === 'Action Needed' && (!record.Transient__r.Receipt_Uploaded_R1__c || record.Transient__r.Receipt_Uploaded_R1__c === 'No'),
                        
                        //change row color when its acction needed and receipt not present
                        rowClass: this.status == 'Action Needed' && (!record.Transient__r.Receipt_Uploaded_R1__c || record.Transient__r.Receipt_Uploaded_R1__c === 'No') ? 'backgroundColorRed' : '' 
                    };
                });
                console.log('data length'+this.data.length);
                console.log(result);
            })
            .catch(error => {
                console.log('error 12'+error)
            });
}
