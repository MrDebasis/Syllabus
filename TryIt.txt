@isTest
public class PSPSendSummaryReportToPayeeQueableTest {
    private static final String CAREGIVER_RECORD_TYPE = 'Caregiver';
    private static final String PROFILENAME_EXTERNAL = 'External Base User';
    private static final String SECURITY_ANALYST_DEV_NAME = 'SecurityAnalyst';
    
    @TestSetup
    public static void testSetUp() {
        List<Account> patients = TestDataFactory.getPatientAccountsList();
        patients[0].PSPEmail__c = 'casjcndjnk@rfds.com';
        insert patients;
        
        insert TestDataFactory.getCaregiversRecordsToInsert(CAREGIVER_RECORD_TYPE, 3);
        Map<Id, Contact> contactByAccountId = ContactsSelector.newInstance()
            .selectByAccountId(AccountsSelector.newInstance().selectAll().keySet()).getContactsByAccountId();
        insert TestDataFactory.getExternalUsers(PROFILENAME_EXTERNAL, contactByAccountId.size(), contactByAccountId.values());
        
        List<Case> patientSupportCases = new List<Case>();
        for (Account patient : patients) {
            Case patientSupportCase = TestDataFactory.getPatientCasestoInsert('PatientSupport');
            patientSupportCase.AccountId = patient.Id;
            patientSupportCase.ContactId = patient.PersonContactId;
            patientSupportCases.add(patientSupportCase);
        }
        insert patientSupportCases;
        
        List<Reimbursement__c> reimbursementRecords = TestDataFactory.createReimbursementRecords(patientSupportCases);
        reimbursementRecords[0].ReceiptSubmittedBy__c = 'Patient';
        reimbursementRecords[0].Payee__c = patients[0].Id;
        reimbursementRecords[0].ProgramType__c = 'MYCARVKTI';
        insert reimbursementRecords;
        
        Account payeeAccount = [SELECT Id, PSPEmail__c FROM Account WHERE Id = :reimbursementRecords[0].Payee__c LIMIT 1];
        payeeAccount.PSPEmail__c = 'survey35@test.com';
        update payeeAccount;
    }
    
    @isTest
    static void PSPSendSummaryReportToPayeeQueableTest1() {
        TestDataFactory.getInternalUsersForRunAs(new Set<String>{'PSP Navy Rep', 'Security Analyst', 'PSRS Rep'});
        User testUser = UsersSelector.newInstance().selectByRoleName(new Set<String>{SECURITY_ANALYST_DEV_NAME})[0];
        
        System.runAs(testUser) {
            PSPSendSummaryReportToPayeeQueable instance = new PSPSendSummaryReportToPayeeQueable(
                [SELECT Id, PSPPayeeEmail__c, CaseIDNumber__c, PayeeName__c, TotalAmountReimbursable__c, ProgramType__c 
                 FROM Reimbursement__c WHERE PSPPayeeEmail__c != NULL LIMIT 1],
                getTemplateMap(), getWrapper()
            );
            System.enqueueJob(instance);
        }
    }
    
    private static Map<String, EmailTemplate> getTemplateMap() {
        EmailTemplate template = TestDataFactory.createEmailtemplate();
        template.HTMLValue = 'its  [Payee Name]';
        update template;
        return new Map<String, EmailTemplate>{'MYCARVKTI' => template, 'CiltaCel' => template};
    }
    
    private static Map<Id, ExpenseLineItemsServiceImpl.ExpenseDateWrapper> getWrapper() {
        Id reimbursementId = [SELECT Id FROM Reimbursement__c WHERE PSPPayeeEmail__c != NULL LIMIT 1].Id;
        ExpenseLineItemsServiceImpl.ExpenseDateWrapper wrapper = new ExpenseLineItemsServiceImpl.ExpenseDateWrapper();
        wrapper.startDate = System.today();
        wrapper.endDate = System.today();
        return new Map<Id, ExpenseLineItemsServiceImpl.ExpenseDateWrapper>{ reimbursementId => wrapper };
    }
}
