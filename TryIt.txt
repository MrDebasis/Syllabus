<template>
    <!-- Screen 1 -->
    <template if:true={isScreen1}>
        <template for:each={screen1Questions} for:item="q">
            <div key={q.apiName} class="s-question">
                <label>{q.label}</label>
                <lightning-input 
                    type="date"
                    data-id={q.apiName}
                    onchange={handleInputChange}
                    required={q.required}>
                </lightning-input>
            </div>
        </template>
    </template>

    <!-- Screen 2 -->
    <template if:true={isScreen2}>
        <template for:each={screen2Questions} for:item="q">
            <div key={q.apiName} class="s-question">
                <label>{q.label}</label>
                <div class="s-buttons">
                    <lightning-button
                        label="Yes"
                        data-id={q.apiName}
                        data-label={q.label}
                        data-value="Yes"
                        onclick={handleInputChange}
                        variant={q.yesVariant}>
                    </lightning-button>

                    <lightning-button
                        label="No"
                        data-id={q.apiName}
                        data-label={q.label}
                        data-value="No"
                        onclick={handleInputChange}
                        variant={q.noVariant}>
                    </lightning-button>
                </div>
            </div>
        </template>
    </template>

    <!-- Navigation -->
    <lightning-button label="Next" onclick={handleNext} disabled={isNextDisabled}></lightning-button>
</template>


import { LightningElement, api, track } from 'lwc';

export default class PspApheresisSurveyLWCComp extends LightningElement {
    @api caseId = '';
    @api surveyType = '';
    @api questions = []; // Expect format: { 1: [questions], 2: [questions], ... }

    @track answers = []; // [{ UniqueId, label, value }]
    @track isNextDisabled = true;
    @track currentScreen = 1;

    get isScreen1() {
        return this.currentScreen === 1;
    }

    get isScreen2() {
        return this.currentScreen === 2;
    }

    get screen1Questions() {
        return this.questions[1] || [];
    }

    get screen2Questions() {
        return this.questions[2] || [];
    }

    handleInputChange(event) {
        const apiName = event.target.dataset.id;
        const value = event.target.value || event.target.dataset.value;
        const label = event.target.dataset.label || this.getLabelByApiName(apiName);
        const uniqueId = `${this.surveyType}_${this.caseId}_${apiName}_${this.currentScreen}`;

        const newAnswer = {
            UniqueId: uniqueId,
            label: label,
            value: value
        };

        const existingIndex = this.answers.findIndex(a => a.UniqueId === uniqueId);
        if (existingIndex > -1) {
            this.answers.splice(existingIndex, 1, newAnswer);
        } else {
            this.answers.push(newAnswer);
        }

        // Handle button variants for screen 2
        const screenQuestions = this.questions[this.currentScreen];
        const question = screenQuestions.find(q => q.apiName === apiName);
        if (question) {
            question.yesVariant = value === 'Yes' ? 'brand' : 'neutral';
            question.noVariant = value === 'No' ? 'brand' : 'neutral';
        }

        console.log('answers:', JSON.stringify(this.answers, null, 2));
        this.validateRequired();
    }

    validateRequired() {
        const screenQuestions = this.questions[this.currentScreen] || [];
        const requiredQuestions = screenQuestions.filter(q => q.required);
        const allAnswered = requiredQuestions.every(q => {
            const uniqueId = `${this.surveyType}_${this.caseId}_${q.apiName}_${this.currentScreen}`;
            const ans = this.answers.find(a => a.UniqueId === uniqueId);
            return ans && ans.value !== undefined && ans.value !== null && ans.value !== '';
        });

        this.isNextDisabled = !allAnswered;
    }

    handleNext() {
        if (this.currentScreen < 5) {
            this.currentScreen++;
            this.isNextDisabled = true; // Reset for next screen
        }
    }

    getLabelByApiName(apiName) {
        const allQuestions = Object.values(this.questions).flat();
        const found = allQuestions.find(q => q.apiName === apiName);
        return found ? found.label : '';
    }
}
