import { LightningElement, api, track } from 'lwc';

export default class PspApheresisSurveyLWCComp extends LightningElement {
    @api caseId = '';
    @api surveyType = '';
    @api questions = []; // { "1": [...], "2": [...] }

    @track answers = [];
    @track isNextDisabled = true;
    @track currentScreen = 1;
    @track tripDatesSection = false;
    @track tripDatePairs = [{ arrival: '', departure: '' }];
    @track tripDatesQuestion = null; // Holds the question object triggering trip dates

    get isScreen1() {
        return this.currentScreen === 1;
    }

    get isScreen2() {
        return this.currentScreen === 2;
    }

    get isScreen3() {
        return this.currentScreen === 3;
    }

    get screen1Questions() {
        return this.questions[this.currentScreen] || [];
    }

    get screen2Questions() {
        return this.questions[this.currentScreen] || [];
    }

    get screen3Questions() {
        return this.questions[this.currentScreen] || [];
    }

    handleInputChange(event) {
        const apiName = event.target.dataset.id;
        const value = event.target.value || event.target.dataset.value;
        const label = event.target.dataset.label || this.getLabelByApiName(apiName);
        const uniqueId = `${this.surveyType}_${this.caseId}_${apiName}_${this.currentScreen}`;

        const newAnswer = { UniqueId: uniqueId, label, value };
        const existingIndex = this.answers.findIndex(a => a.UniqueId === uniqueId);

        if (existingIndex > -1) {
            this.answers.splice(existingIndex, 1, newAnswer);
        } else {
            this.answers.push(newAnswer);
        }

        // Show trip dates section if bridging therapy is 'Yes'
        if (
            this.isScreen3 &&
            label === 'Will the patient receive bridging therapy at your certified treatment center?*' &&
            value === 'Yes'
        ) {
            this.tripDatesSection = true;
            this.tripDatesQuestion = this.questions[this.currentScreen].find(q => q.label === label);
        } else {
            this.tripDatesSection = false;
            this.tripDatesQuestion = null;
        }

        this.validateRequired();
    }

    validateRequired() {
        const currentQuestions = this.questions[this.currentScreen] || [];
        const requiredQuestions = currentQuestions.filter(q => q.required);

        const allAnswered = requiredQuestions.every(q => {
            const uniqueId = `${this.surveyType}_${this.caseId}_${q.apiName}_${this.currentScreen}`;
            const answerObj = this.answers.find(a => a.UniqueId === uniqueId);
            return answerObj && answerObj.value;
        });

        this.isNextDisabled = !allAnswered;
    }

    handleNext() {
        if (this.currentScreen < 5) {
            this.currentScreen++;
            this.isNextDisabled = true;
        }
    }

    getLabelByApiName(apiName) {
        const allQuestions = Object.values(this.questions).flat();
        const found = allQuestions.find(q => q.apiName === apiName);
        return found ? found.label : '';
    }

    handleTripDateChange(event) {
        const index = event.target.dataset.index;
        const field = event.target.dataset.field;
        const value = event.target.value;

        this.tripDatePairs[index][field] = value;

        this.saveTripDates();
    }

    handleAddTripDate() {
        this.tripDatePairs = [...this.tripDatePairs, { arrival: '', departure: '' }];
        this.saveTripDates();
    }

    saveTripDates() {
        if (!this.tripDatesQuestion) return;

        const UniqueId = `${this.surveyType}_${this.caseId}_${this.tripDatesQuestion.apiName}`;
        const label = this.tripDatesQuestion.label;
        const value = JSON.stringify(this.tripDatePairs);

        const newAnswer = { UniqueId, label, value };
        const index = this.answers.findIndex(a => a.UniqueId === UniqueId);

        if (index > -1) {
            this.answers.splice(index, 1, newAnswer);
        } else {
            this.answers.push(newAnswer);
        }
    }
}


<template>
    <!-- Screen 1 -->
    <template if:true={isScreen1}>
        <template for:each={screen1Questions} for:item="q">
            <div key={q.apiName}>
                <label>{q.label}</label>
                <lightning-input type="date" data-id={q.apiName} onchange={handleInputChange} required={q.required}></lightning-input>
            </div>
        </template>
    </template>

    <!-- Screen 2 -->
    <template if:true={isScreen2}>
        <template for:each={screen2Questions} for:item="q">
            <div key={q.apiName}>
                <label>{q.label}</label>
                <lightning-button label="Yes" data-id={q.apiName} data-label={q.label} data-value="Yes" onclick={handleInputChange}></lightning-button>
                <lightning-button label="No" data-id={q.apiName} data-label={q.label} data-value="No" onclick={handleInputChange}></lightning-button>
            </div>
        </template>
    </template>

    <!-- Screen 3 -->
    <template if:true={isScreen3}>
        <template for:each={screen3Questions} for:item="q">
            <div key={q.apiName}>
                <label>{q.label}</label>
                <lightning-button label="Yes" data-id={q.apiName} data-label={q.label} data-value="Yes" onclick={handleInputChange}></lightning-button>
                <lightning-button label="No" data-id={q.apiName} data-label={q.label} data-value="No" onclick={handleInputChange}></lightning-button>
                <lightning-button label="Not sure yet" data-id={q.apiName} data-label={q.label} data-value="Not sure yet" onclick={handleInputChange}></lightning-button>
            </div>
        </template>
    </template>

    <!-- Trip Dates Section -->
    <template if:true={tripDatesSection}>
        <div>
            <label>{tripDatesQuestion.label}</label>
            <template for:each={tripDatePairs} for:item="pair" for:index="index">
                <div key={index}>
                    <lightning-input type="date" label="Arrival Date" data-index={index} data-field="arrival" value={pair.arrival} onchange={handleTripDateChange}></lightning-input>
                    <lightning-input type="date" label="Departure Date" data-index={index} data-field="departure" value={pair.departure} onchange={handleTripDateChange}></lightning-input>
                </div>
            </template>
            <lightning-button label="+ Add More Dates" onclick={handleAddTripDate}></lightning-button>
        </div>
    </template>

    <!-- Navigation -->
    <lightning-button label="Next" onclick={handleNext} disabled={isNextDisabled}></lightning-button>
</template>
