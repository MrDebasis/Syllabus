import { LightningElement, api,track } from 'lwc';
import myResource from '@salesforce/resourceUrl/Patient_Portal';
import FORM_FACTOR from '@salesforce/client/formFactor';

const RreceiptScreens = {
    1: { bool: 'submitExpense' , value: 'valuesFromSubmitExpense', btnName : 'Submit Expense'}
};
const showWithOutReceiptScreenCategories = {
    1: { bool: 'showMissingReceiptScreen' , value: 'valuesFromMissingReceiptScreen',btnName : 'Next'},
    2: { bool: 'showMissingReceiptReasonScreen' , value: 'valuesFromReceiptReasonScreen',btnName : 'Next'},
    3: { bool: 'showMissingReceiptLimitScreen', value: 'valuesFromReceiptLimitScreen',btnName : 'Next'},
    4: { bool: 'submitExpense', value: 'valuesFromSubmitExpense',btnName : 'Submit Expense'}
};

export default class PspSubmitExpenses extends LightningElement {
    blueCrossIcon = `${myResource}/icons/BlueCrossIcon.svg`;
    mobileView;
    @api selectedData;
    @track selectedScreenCategory;
    @track flowScreens = {
        'Receipt Screens' : RreceiptScreens,
        'Without Receipt Screens' : showWithOutReceiptScreenCategories,
    }

    @track showWarningPopUp = false;
    @track submitExpense  =false;
    @track showMissingReceiptScreen = false;
    @track showMissingReceiptReasonScreen  = false;
    @track showMissingReceiptLimitScreen = false;

    connectedCallback(){
        this.mobileView = FORM_FACTOR == 'Small' ? true : false;
        console.log('selectedData',this.selectedData);
        this.showWarningPopUp = this.selectedData.length === 1 ? true : false;

        const selectedReceiptDataCount = this.selectedData.filter(record => record.Receipt_Uploaded_R1__c ?? 'No' === 'Yes').length;
        const selectedDataCount = this.selectedData.length;
        this.selectedScreenCategory = selectedDataCount === selectedReceiptDataCount ? 'Receipt Screens' : 'Without Receipt Screens';
        this.calculateWhichScreenToRender();
    }

    calculateWhichScreenToRender(){
    if(this.selectedScreenCategory === 'Receipt Screens' && this.selectedData.length > 1){
        this.currentScreenIndex ++;
        this.closeScreens();
        this.updateScreen();
    }else{
        this.currentScreenIndex ++;
        this.closeScreens();
        this.updateScreen();
    }
      //  const count = this.selectedData.filter(record => record.Receipt_Uploaded_R1__c ?? 'No' === 'Yes').length;
 
    }

    closeScreens(){
        for(let item in this.flowScreens[this.selectedScreenCategory]){
            this[this.flowScreens[this.selectedScreenCategory][item].bool] = false;
            }
    }

    @track currentScreenIndex = 0;
    @track nextButtonName = 'Next';
    updateScreen(){
     this[this.flowScreens[this.selectedScreenCategory][this.currentScreenIndex].bool] = true;
     this.nextButtonName = this.flowScreens[this.selectedScreenCategory][this.currentScreenIndex].btnName;
        }

    //open for single expense
    openSubmitExpense(){
        this.showWarningPopUp = false;
        //this.currentScreenIndex ++;
        this.closeScreens();
        this.updateScreen();
    }

    closeAlert(){
        this.showWarningPopUp =false;
        this.closeModal();
    }

    handleNext(){
        const selectedDataCount = this.selectedData.length;
        const repeat = selectedDataCount * 2;
        console.log('Next Clicked...',repeat);


    }

    closeModal(){
        this.dispatchEvent(new CustomEvent('close' , {detail: true}));
    }

}
