    <lightning-datatable class="LighteningdataTable"
    table-classes="bg-color-table"
        key-field="Id"
        data={data}
        columns={columns}
        enable-lazy-loading="true"
        enable-infinite-loading="true"
        onloadmore={loadMoreData}
        onscroll={handleScroll}
        load-more-offset="10"
        hide-checkbox-column="true">
    </lightning-datatable>

@track data = [];
@track columns = [
    { label: 'Id', fieldName: 'Id', sortable: true },
    { label: 'Expense date', fieldName: 'ExpenseDate__c', sortable: true },
    { label: 'Expense category', fieldName: 'ExpenseCategory__c', sortable: true },
    { label: 'Vendor', fieldName: 'ExpenseDetailVendor__c', sortable: true },
    { label: 'City of purchase', fieldName: 'ExpenseLocation__c', sortable: true },
    { label: 'Receipt', fieldName: 'Receipt', sortable: true },
    { label: 'Receipt amount', fieldName: 'ReceiptAmount__c', sortable: true },
    { label: 'Reimbursable', fieldName: 'ReimbursableAmount__c', sortable: true },
    { label: 'Non-reimbursable', fieldName: 'NonReimbursableAmount__c', sortable: true },
    { label: 'Notes', fieldName: 'Notes__c', sortable: true },
];
error;
rowLimit = 10;
rowOffSet = 0;

totalCount;

@wire(getTotalCount)
wiredTotalCount({ error, data }) {
    if (data) {
        this.totalCount = data;
    } else if (error) {
        console.error(error);
    }
}

loadData() {
    return getExpenseLineItems({ limitSize: this.rowLimit, offset: this.rowOffSet })
        .then(result => {
            this.data = [...this.data, ...result];
            this.error = undefined;
            console.log('data length'+this.data.length);
            console.log(result);
        })
        .catch(error => {
            this.error = error;
        });
}

currentDataLength;
loadMoreData(event) {
    console.log('LOAD MORE DATA');
     this.currentDataLength = this.data.length;

     const { target } = event;
    

     if(this.currentDataLength >= this.totalCount){
        target.isLoading = false;
    }else{
         target.isLoading = true;
    }

    
        this.rowOffSet++;
        this.loadData()
            .then(()=> {
                target.isLoading = false;
            });   
    }

    
    handleScroll(event) {
        const table = event.target;
        const scrollPosition = table.scrollTop + table.offsetHeight;
        const totalHeight = table.scrollHeight;
    
        if (scrollPosition >= totalHeight) {
            console.log('LOAD MORE DATA');
     this.currentDataLength = this.data.length;

     const { target } = event;
    

     if(this.currentDataLength >= this.totalCount){
        target.isLoading = false;
    }else{
         target.isLoading = true;
    }

    
        this.rowOffSet++;
        this.loadData()
            .then(()=> {
                target.isLoading = false;
            }); 
        }
    }
:    @AuraEnabled
  public static List<ExpenseLineItem__c> getExpenseLineItems(Integer limitSize, Integer offset) {
    Integer offsetValue = offset == 0 ? 10 : offset * 10;
    List<ExpenseLineItem__c> listOfExpenseLineItem = [SELECT Id, ExpenseDate__c, ExpenseCategory__c, ExpenseDetailVendor__c, ExpenseLocation__c,
                                 ReceiptAmount__c, ReimbursableAmount__c, NonReimbursableAmount__c, Notes__c FROM ExpenseLineItem__c
                                 ORDER BY ExpenseDate__c DESC
                                 LIMIT :limitSize
                                 OFFSET :offsetValue
                                 ];
   
    return listOfExpenseLineItem;
}
