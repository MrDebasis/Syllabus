public with sharing class DynamicTableController {
    
    @AuraEnabled(cacheable=true)
    public static List<Account> getAccounts() {
        return [SELECT Id, Name, Industry, Phone FROM Account LIMIT 50];
    }

    @AuraEnabled
    public static void updateAccounts(List<Account> updatedAccounts) {
        update updatedAccounts;
    }
}


<template>
    <lightning-card title="Dynamic Editable DataTable">
        <lightning-datatable
            key-field="Id"
            data={data}
            columns={columns}
            draft-values={draftValues}
            onsave={handleSave}
            oncellchange={handleCellChange}
            sorted-by={sortedBy}
            sorted-direction={sortedDirection}
            onsort={handleSort}
            hide-checkbox-column="true"
        >
        </lightning-datatable>
    </lightning-card>
</template>


import { LightningElement, wire, track } from 'lwc';
import getAccounts from '@salesforce/apex/DynamicTableController.getAccounts';
import updateAccounts from '@salesforce/apex/DynamicTableController.updateAccounts';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class DynamicTable extends LightningElement {
    @track data = [];
    @track columns = [
        { label: 'Name', fieldName: 'Name', editable: true, sortable: true },
        { label: 'Industry', fieldName: 'Industry', editable: true, sortable: true },
        { label: 'Phone', fieldName: 'Phone', editable: true, sortable: true }
    ];

    draftValues = [];
    sortedBy;
    sortedDirection = 'asc';

    @wire(getAccounts)
    wiredAccounts({ data, error }) {
        if (data) {
            this.data = data;
        } else if (error) {
            this.showToast('Error', error.body.message, 'error');
        }
    }

    handleSave(event) {
        const updatedFields = event.detail.draftValues;

        updateAccounts({ updatedAccounts: updatedFields })
            .then(() => {
                this.showToast('Success', 'Records updated', 'success');
                this.draftValues = [];
                return refreshApex(this.wiredAccounts);
            })
            .catch(error => {
                this.showToast('Error updating records', error.body.message, 'error');
            });
    }

    handleSort(event) {
        const { fieldName: sortedBy, sortDirection } = event.detail;
        const cloneData = [...this.data];

        cloneData.sort((a, b) => {
            let valA = a[sortedBy] || '';
            let valB = b[sortedBy] || '';
            return sortDirection === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        });

        this.data = cloneData;
        this.sortedBy = sortedBy;
        this.sortedDirection = sortDirection;
    }

    showToast(title, message, variant) {
        this.dispatchEvent(new ShowToastEvent({ title, message, variant }));
    }
}
