import { LightningElement,wire,track } from 'lwc';
import FORM_FACTOR from '@salesforce/client/formFactor';
import { CurrentPageReference, NavigationMixin } from 'lightning/navigation';
import myResource from '@salesforce/resourceUrl/Patient_Portal';
import PATIENT_PORTAL_CSS from '@salesforce/resourceUrl/PatientPortal';
import { loadStyle } from 'lightning/platformResourceLoader';
import getExpenseLineItems from '@salesforce/apex/ReportSummaryController.getExpenseLineItems';
import getReimbursementDetails from '@salesforce/apex/ReportSummaryController.getReimbursementDetails';
import getTotalCount from '@salesforce/apex/ReportSummaryController.getTotalCount';



export default class Psp_ReportSummary_LWCComponent extends NavigationMixin(LightningElement) {
    greaterThenIcon = `${myResource}/icons/Vector.svg`;
    reimbursementDetailsMap = new Map();
    loading=true;
    mobileView;

    connectedCallback(){
        this.mobileView =FORM_FACTOR == 'Small' ? true : false;
        Promise.all([
            loadStyle(this, PATIENT_PORTAL_CSS)]);
    this.getReimbursementDetails();
    this.loadData();
    this.getTotalCount();

    }

    reimbursementRecordId;
    @wire(CurrentPageReference)
    getPageReferenceParameters(currentPageReference) {
        if (currentPageReference) {
            this.reimbursementRecordId =currentPageReference.state.id;
        }
    }

        getTotalCount() {
            getTotalCount({ reimbursementRecId: this.reimbursementRecordId })
                .then(result => {
                    this.totalCount = result;
                })
                .catch(error => {
                    console.error(error);
                });
        }

    async getReimbursementDetails() {
        try {
            const result = await getReimbursementDetails({ reimbursementId: this.reimbursementRecordId });
                if (result && typeof result === 'object') {
                    Object.keys(result).forEach(key => {
                        this.reimbursementDetailsMap.set(key, result[key]);
                });
            }
                this.setValues();
            } catch (error) {
                console.error('Error on getExpenseDetails:', error);
            }
    }

id;
name;
status;
payeeName;
createdDate;
isCompletedState = false;
reimbursableAmount;
trackingNumber;
deliveryMethod;
dateSend;

    async setValues(){
        if(this.reimbursementDetailsMap!==null){
            this.id = this.reimbursementDetailsMap.get('id');
            this.createdDate = this.dateFormator(this.reimbursementDetailsMap.get('CreatedDate'));
            this.status = this.reimbursementDetailsMap.get('Status__c');
            this.name = this.reimbursementDetailsMap.get('Name').replace('Reimbursement-','Report ');
            this.payeeName = this.reimbursementDetailsMap.get('Payee__r.Name');

            this.reimbursableAmount = this.reimbursementDetailsMap.get('TotalAmountReimbursable__c');
            this.trackingNumber = this.reimbursementDetailsMap.get('TrackingNumber__c');
            this.deliveryMethod = this.reimbursementDetailsMap.get('Carrier__c');
            this.dateSend = this.reimbursementDetailsMap.get('DateMailed__c');
            
            this.status = 'No Payment';
            this.isCompletedState = this.status === 'Pending Payment' || this.status === 'Payment sent' ? true :false;
            this.dynamicCSSChangeAsPerStatus();
    }
}

dateFormator(inputDate){
    const date = new Date(inputDate);
    const options = {year :'numeric', month: 'long', day:'numeric'};
    const formattor = new Intl.DateTimeFormat('en-US',options);
    return formattor.format(date);
}

dynamicCSSClass;
dynamicCSSCardClass;
dynamicCSSChangeAsPerStatus(){
   
    if(this.status){
        /**Text and background color change for status */
        this.dynamicCSSClass = this.status === 'In Review' || this.status === 'On Hold' ? 'statusColorChange inreview':
        this.status === 'Received' ||  this.status === 'No Payment' ?  'statusColorChange received' : 
        this.status === 'Action needed' ?  'statusColorChange actionNeeded' : 
        this.status === 'Pending Payment' ?  'statusColorChange pendingAndSendPayment' : 
        this.status === 'Payment sent' ?  'statusColorChange pendingAndSendPayment' :  '';
      


        /**Card Background Color change*/
        this.dynamicCSSCardClass = this.status === 'In Review' || this.status === 'On Hold' ? 'inreviewCardBackground Reportcard':
        this.status === 'Received' ||  this.status === 'No Payment'?  'receivedCardBackground Reportcard' : 
        this.status === 'Action needed' ?  'Reportcard actionNeededCardBackground' : 
        this.status === 'Pending Payment' ?  'Reportcard pendingAndSendPaymentCardBackground' : 
        this.status === 'Payment sent' ?  'Reportcard pendingAndSendPaymentCardBackground' : '';  
      
        this.loading =false;
    }
}


@track data = [];
@track columns = [
    { label: 'Expense date', fieldName: 'ExpenseDate__c', sortable: true, hideDefaultActions: true, fixedWidth: 125,type: "date",
        typeAttributes:{
            year: "numeric",
            month: "short",
            day: "2-digit"
        }, sortable: true},
    { label: 'Expense category', fieldName: 'ExpenseCategory__c', sortable: true, hideDefaultActions: true, fixedWidth: 142, wrapText: true },
    { label: 'Vendor', fieldName: 'ExpenseDetailVendor__c', sortable: true, hideDefaultActions: true, fixedWidth: 100 },
    { label: 'City of purchase', fieldName: 'ExpenseLocation__c', sortable: true, hideDefaultActions: true, fixedWidth: 132, wrapText: true },
    { 
        label: 'Receipt', 
        fieldName: 'Receipt', 
        type: 'button-icon', 
        sortable: true, 
        hideDefaultActions: true, 
        fixedWidth: 125, 
        cellAttributes: { 
            alignment: 'center' 
        }, 
        typeAttributes: {
            iconName: 'utility:file',
            name: 'file',
            title: 'file',
            variant: 'bare',
            alternativeText: 'file'
        }
    },
    { label: 'Receipt amount', fieldName: 'ReceiptAmount__c', sortable: true, hideDefaultActions: true, fixedWidth: 140, cellAttributes: { alignment: 'right' }, },
    { label: 'Reimbursable', fieldName: 'ReimbursableAmount__c', sortable: true, hideDefaultActions: true, fixedWidth: 122 },
    { label: 'Non-reimbursable', fieldName: 'NonReimbursableAmount__c', sortable: true, hideDefaultActions: true, fixedWidth: 147 },
    { label: 'Notes', fieldName: 'Notes__c', sortable: true, hideDefaultActions: true, fixedWidth: 120 , wrapText: true },
    { // Adding the column with the icon button
        type: 'button-icon',
        typeAttributes: {
            iconName: 'utility:chevronright',
            name: 'navigate',
            title: 'Navigate',
            variant: 'bare',
            alternativeText: 'Navigate'
        }, 
        hideDefaultActions: true,
      
    }
];
error;
rowLimit = 10;
rowOffSet = 0;
totalCount;

loadData() {
    return getExpenseLineItems({ limitSize: this.rowLimit, offset: this.rowOffSet,reimbursementRecId : this.reimbursementRecordId })
        .then(result => {
            this.data = [...this.data, ...result];
           
            console.log('data length'+this.data.length);
            console.log(result);
        })
        .catch(error => {
            console.log('error 12'+error)
        });
}

currentDataLength;
loadMoreData(event) {
    try{
    console.log('LOAD MORE DATA');
     this.currentDataLength = this.data.length;

     const { target } = event;
    

     if(this.currentDataLength >= this.totalCount){
        target.isLoading = false;
    }else{
         target.isLoading = true;
             
        this.rowOffSet++;
        this.loadData()
            .then(()=> {
                target.isLoading = false;
            }); 
    }
}catch(error){
console.log('error'+error);
}
    }

    showReportedExpense =false;
    sendRecIdToReportedExpenseScreen;
    handleRowAction(event) {
        const actionName = event.detail.action.name;
        const row = event.detail.row;
    
       if (actionName === 'navigate') {
        this.sendRecIdToReportedExpenseScreen = row.Id;
        this.showReportedExpense =true;
        }
    }

    handleBackReportedExpensePage(){
        this.showReportedExpense =false;
    }

    sortDirection = 'desc';
    sortField= 'ExpenseDate__c';

    handleSort(event) {    
        try{   
        this.sortField = event.detail.fieldName;       
        this.sortDirection = event.detail.sortDirection;       
        this.sortData(event.detail.fieldName, event.detail.sortDirection);
        }catch(error){
            console.log('error'+error);
        }
    }

    sortData(fieldname, direction) {
        try{   
        let parseData = JSON.parse(JSON.stringify(this.data));
       
        let keyValue = (a) => {
            return a[fieldname];
        };

       let isReverse = direction === 'asc' ? 1: -1;
           parseData.sort((x, y) => {
            x = keyValue(x) ? keyValue(x) : ''; 
            y = keyValue(y) ? keyValue(y) : '';
           
            return isReverse * ((x > y) - (y > x));
        });
        
        this.data = parseData;
    }catch(error){
        console.log('error'+error);
    }
    } 

}



    <lightning-datatable class="LighteningdataTable"
    table-classes="bg-color-table"
        key-field="Id"
        data={data}
        columns={columns}
        enable-infinite-loading
        onloadmore={loadMoreData}
        load-more-offset="10"
        max-row-selection="1"
        onrowaction={handleRowAction}
        onsort={handleSort}
        sorted-direction={sortDirection}
        sorted-by={sortField}
        hide-checkbox-column="true"
        resize-column-disabled >
    </lightning-datatable>
