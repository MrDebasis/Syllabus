this.answers {"apheresis_appointment_date":"2025-04-29"}

<template>
    <template if:true={isScreen1}>
          <template for:each={screen1Questions} for:item="q">
            <div key={q.apiName} class="s-question">
                <label>{q.label}</label>
                    <lightning-input 
                        type="date"
                        data-id={q.apiName}
                        onchange={handleInputChange}
                        required={q.required}>
                    </lightning-input>
            </div>
        </template>
</template>
    <lightning-button label="Next" onclick={handleNext} disabled={isNextDisabled}></lightning-button>
</template>

import { LightningElement,api,track } from 'lwc';

export default class PspApheresisSurveyLWCComp extends LightningElement {
 @api caseId = '';
 @api surveyType = '';
 @api questions = [];
 @track answers = {};
    @track isNextDisabled = true;

 @track currentScreen = 1;

 get isScreen1(){
    return this.currentScreen === 1;
 }

  // Get questions for screen 1
    get screen1Questions() {
        return this.questions[this.currentScreen];
    }

    handleInputChange(event) {
        const field = event.target.dataset.id;
        const value = event.target.value;
        this.answers[field] = value;

        console.log('this.answers', JSON.stringify(this.answers));
        this.validateRequired();
    }

    validateRequired() {
        const requiredQuestions = this.screen1Questions.filter(q => q.required);
        const allAnswered = requiredQuestions.every(q => {
            const val = this.answers[q.apiName];
            return val !== undefined && val !== '';
        });

        this.isNextDisabled = !allAnswered;
    }

    handleNext() {
        if (this.currentScreen < 5) {
            this.currentScreen++;
            this.isNextDisabled = false; // Reset for next screen
        }
    }
}
