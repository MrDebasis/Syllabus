// surveyTestA.js
import { LightningElement, track } from 'lwc';

const surveyConfig = {
    testA: {
        steps: {
            start: {
                type: 'dateInputs',
                questions: [
                    { id: 'dob', label: 'Date of Birth', type: 'date', required: true },
                    { id: 'lastVisit', label: 'Last Visit Date', type: 'date', required: true },
                    { id: 'nextVisit', label: 'Next Scheduled Visit', type: 'date', required: true }
                ],
                next: 'question1'
            },
            question1: {
                type: 'yesNo',
                questionId: 'serviceHelpful',
                label: 'Was the service helpful?',
                required: true,
                options: ['Yes', 'No'],
                next: 'question2'
            },
            question2: {
                type: 'multipleChoice',
                questionId: 'futureVisit',
                label: 'Would you like to visit again?',
                required: true,
                options: ['Yes', 'No', 'Not Sure Yet'],
                next: 'end'
            },
            end: {
                type: 'message',
                label: 'Thank you for completing the survey.'
            }
        }
    }
};

export default class SurveyTestA extends LightningElement {
    @track currentStep = 'start';
    @track answers = {};
    @track selectedOption = '';
    @track showDateInputs = false;
    @track showYesNo = false;
    @track showMultipleChoice = false;
    @track showMessage = false;
    @track isNextButtonEnabled = false;
    @track questionValues = {}; // Store question-specific values for binding

    connectedCallback() {
        this.updateFlags();
    }

    get stepConfig() {
        return surveyConfig.testA.steps[this.currentStep];
    }

    updateFlags() {
        const type = this.stepConfig.type;
        this.showDateInputs = type === 'dateInputs';
        this.showYesNo = type === 'yesNo';
        this.showMultipleChoice = type === 'multipleChoice';
        this.showMessage = type === 'message';

        // Pre-populate question values
        if (this.stepConfig.questions) {
            this.stepConfig.questions.forEach(q => {
                this.questionValues[q.id] = this.answers[q.id] || '';
            });
        }

        this.updateNextButtonState();
    }

    handleInputChange(event) {
        const { name, value } = event.target;
        this.answers[name] = value;
        this.questionValues[name] = value;
        this.updateNextButtonState();
    }

    handleOptionChange(event) {
        this.selectedOption = event.detail.value;
        this.answers[this.stepConfig.questionId] = this.selectedOption;
        this.updateNextButtonState();
    }

    updateNextButtonState() {
        const step = this.stepConfig;
        if (step.type === 'dateInputs') {
            this.isNextButtonEnabled = step.questions.every(q => this.answers[q.id]);
        } else if (step.type === 'yesNo' || step.type === 'multipleChoice') {
            this.isNextButtonEnabled = !!this.selectedOption;
        } else {
            this.isNextButtonEnabled = true;
        }
    }

    handleNext() {
        this.selectedOption = '';
        this.currentStep = this.stepConfig.next;
        this.updateFlags();
    }

    get yesNoOptions() {
        return this.stepConfig.options.map(o => ({ label: o, value: o }));
    }

    get multipleChoiceOptions() {
        return this.stepConfig.options.map(o => ({ label: o, value: o }));
    }
}


<template>
    <div class="survey-container">
        <template if:true={showDateInputs}>
            <template for:each={stepConfig.questions} for:item="q">
                <lightning-input
                    key={q.id}
                    type="date"
                    name={q.id}
                    label={q.label}
                    value={answers[q.id]}
                    onchange={handleInputChange}
                    required={q.required}>
                </lightning-input>
            </template>
        </template>

        <template if:true={showYesNo}>
            <lightning-radio-group
                label={stepConfig.label}
                name="yesno"
                options={yesNoOptions}
                value={selectedOption}
                type="radio"
                onchange={handleOptionChange}>
            </lightning-radio-group>
        </template>

        <template if:true={showMultipleChoice}>
            <lightning-radio-group
                label={stepConfig.label}
                name="multiplechoice"
                options={multipleChoiceOptions}
                value={selectedOption}
                type="radio"
                onchange={handleOptionChange}>
            </lightning-radio-group>
        </template>

        <template if:true={showMessage}>
            <div class="thank-you">{stepConfig.label}</div>
        </template>

        <lightning-button
    class="slds-m-top_medium"
    variant="brand"
    label="Next"
    onclick={handleNext}
    disabled={isNextButtonDisabled}>
</lightning-button>
    </div>
</template>
