import { LightningElement, track } from 'lwc';

export default class DynamicDatatable extends LightningElement {
    @track tables = [];

    // Configuration: Define objects, fields, and mock data
    config = {
        Account: {
            columns: [
                { label: 'Name', fieldName: 'Name', type: 'text', editable: true },
                { label: 'Industry', fieldName: 'Industry', type: 'text', editable: true },
                { label: 'Revenue', fieldName: 'Revenue', type: 'currency', editable: true }
            ],
            data: [
                { Id: '1', Name: 'Acme Corp', Industry: 'Manufacturing', Revenue: 500000 },
                { Id: '2', Name: 'Tech Innovators', Industry: 'Software', Revenue: 1200000 }
            ]
        },
        Contact: {
            columns: [
                { label: 'First Name', fieldName: 'FirstName', type: 'text', editable: true },
                { label: 'Last Name', fieldName: 'LastName', type: 'text', editable: true },
                { label: 'Email', fieldName: 'Email', type: 'email', editable: true }
            ],
            data: [
                { Id: '1', FirstName: 'John', LastName: 'Doe', Email: 'john.doe@example.com' },
                { Id: '2', FirstName: 'Jane', LastName: 'Smith', Email: 'jane.smith@example.com' }
            ]
        }
    };

    connectedCallback() {
        // Convert config into an array of tables for iteration
        this.tables = Object.keys(this.config).map(objName => ({
            objectName: objName,
            columns: this.config[objName].columns,
            data: this.config[objName].data
        }));
    }

    handleSave(event) {
        const { objectName } = event.target.dataset;
        const updatedRecords = event.detail.draftValues;

        // Simulate saving by updating local data
        this.tables = this.tables.map(table => {
            if (table.objectName === objectName) {
                table.data = table.data.map(record => {
                    const updatedRecord = updatedRecords.find(upd => upd.Id === record.Id);
                    return updatedRecord ? { ...record, ...updatedRecord } : record;
                });
            }
            return table;
        });

        // Clear draft values
        this.template.querySelectorAll('lightning-datatable').forEach(dt => dt.draftValues = []);

        // Show a success message
        this.showToast('Success', `${objectName} records updated successfully`, 'success');
    }

    showToast(title, message, variant) {
        this.dispatchEvent(new CustomEvent('lightning__showtoast', {
            detail: { title, message, variant }
        }));
    }
}



<template>
    <lightning-card title="Dynamic Data Tables">
        <template for:each={tables} for:item="table">
            <div key={table.objectName} class="slds-m-bottom_medium">
                <h2 class="slds-text-heading_medium">{table.objectName} Data</h2>
                
                <lightning-datatable
                    key-field="Id"
                    data={table.data}
                    columns={table.columns}
                    draft-values={table.draftValues}
                    onsave={handleSave}
                    data-object-name={table.objectName}
                    hide-checkbox-column>
                </lightning-datatable>
            </div>
        </template>
    </lightning-card>
</template>
