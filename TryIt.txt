public class TestDebasis {
    
    private static List<Reimbursement__c> getReimbursement(){
        return  [select Id,CaseIDNumber__r.Status,CreatedFromTrip__r.LookuptoPatientCaregiver__c, CreatedFromTrip__r.PatientOrCaregiverTrip__c,
                 CreatedFromTrip__r.ProgramType__c, ProgramType__c,PatientPortalsPortalExpense__c ,CaseIDNumber__c
                 from Reimbursement__c 
                 where 
                 PatientPortalsPortalExpense__c = false and CreatedFromTrip__r.ProgramType__c ='MYCARVKTI' 
                 and ProgramType__c ='MYCARVKTI' and CaseIDNumber__r.Status != 'Closed' and CaseIDNumber__c != null];
    }
    
    private static void shareRecordsForPatientAndLAR(){
        Set<Id> allAccountId = new Set<Id>(); // Patient Id
        Map<String,String> reimburshmentIdWithAccountIdMap = new Map<String, String>();
        Map<String,String> reimburshmentIdWithUserIdMap = new Map<String, String>();
        
        set<String> distinctCaseId = new Set<String>();
        
        List<Reimbursement__c> listOfReimburshment =getReimbursement() ;
         
        Map<String , List<String> > caseIdWithAssociatedContact = new Map<String ,List<String> >();
         Map<String , List<String> > caseIdWithListOfReimburshment = new Map<String ,List<String> >();
        
        //Patient Share
        for (Reimbursement__c reim : listOfReimburshment){ 
            if(reim.CreatedFromTrip__r.LookuptoPatientCaregiver__c != null){
                // allAccountId.add(reim.CreatedFromTrip__r.LookuptoPatientCaregiver__c); 
                 distinctCaseId.add( reim.CaseIDNumber__c);
                reimburshmentIdWithAccountIdMap.put(reim.Id,reim.CreatedFromTrip__r.LookuptoPatientCaregiver__c );
            }
            
            //for LAR
            if(caseIdWithListOfReimburshment.containsKey(reim.CaseIDNumber__c)){
                caseIdWithListOfReimburshment.put(reim.CaseIDNumber__c ,new List<String> {reim.Id});
            }else{
                 caseIdWithListOfReimburshment.put(reim.CaseIDNumber__c ,(List<String>)caseIdWithListOfReimburshment.get(reim.CaseIDNumber__c).add(reim.Id));
            }
        }
        
        for(user usr : [select id,AccountId from User where AccountId  =: reimburshmentIdWithAccountIdMap.values()]){
            reimburshmentIdWithUserIdMap.put(reimburshmentIdWithAccountIdMap.get(usr.AccountId),usr.id);
        } 
        prepareShareRecordsForPortal(reimburshmentIdWithUserIdMap);
        
        //LAR Share
       List<HealthCloudGA__ContactContactRelation__c> associatedContacts = [SELECT Id
                                                                           from HealthCloudGA__ContactContactRelation__c 
                                                                           where Patient_Support_Case__c =:distinctCaseId];
        
        for(HealthCloudGA__ContactContactRelation__c associatedContact : associatedContacts){
            if(caseIdWithAssociatedContact.containsKey(associatedContact.Patient_Support_Case__c)){
                caseIdWithAssociatedContact.put(associatedContact.Patient_Support_Case__c ,new List<String> {associatedContact.Id});
            }else{
                 caseIdWithAssociatedContact.put(associatedContact.Patient_Support_Case__c ,(List<String>)caseIdWithAssociatedContact.get(associatedContact.Patient_Support_Case__c).add(associatedContact.Id));
            }
        }
        
        
        for(case caseRec : [select id from case where id =: caseIdWithListOfReimburshment.keySet()]){
            for (Reimbursement__c reimb : caseIdWithListOfReimburshment.get(caseRec.Id)){
                
            }
            
        }
        
       
        
        
        
    }
    
  public static List<Reimbursement__Share> prepareShareRecordsForPortal(Map<String,String> reimburshmentIdWithUserIdMap)
	{
		List<Reimbursement__Share> reimburseShare = new List<Reimbursement__Share>();
		if(reimburshmentIdWithUserIdMap.isEmpty()){
			return reimburseShare;
		}

        for(Reimbursement__c Reimbursement : [Select Id from Reimbursement__c where id =: reimburshmentIdWithUserIdMap.keySet()])
		{
		
				Reimbursement__Share share = new Reimbursement__Share();
				share.ParentId = reimbursement.Id;
				share.AccessLevel = 'Edit';
				share.RowCause = Schema.Reimbursement__Share.rowCause.Apex__c;
				share.UserOrGroupId = reimburshmentIdWithUserIdMap.get(Reimbursement.id);
				reimburseShare.add(share);
		}

		return reimburseShare;
	}

}
