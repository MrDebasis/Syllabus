<template>
    <div class="pagination">
        <lightning-button 
            disabled={isPreviousDisabled} 
            onclick={handlePreviousClick} 
            label="Previous">
        </lightning-button>

        <template for:each={pageButtons} for:item="btn">
            <lightning-button
                key={btn.page}
                class="slds-m-horizontal_xx-small"
                data-page={btn.page}
                onclick={handlePageClick}
                disabled={btn.disabled}
                variant={btn.variant}
                label={btn.page}>
            </lightning-button>
        </template>

        <lightning-button 
            disabled={isNextDisabled} 
            onclick={handleNextClick} 
            label="Next">
        </lightning-button>
    </div>
</template>


import { LightningElement, api, track } from 'lwc';

export default class Psp_PSSTrackerPaginationLWCComp extends LightningElement {
    @api currentPage;
    @api totalRecords;
    @api pageSize;

    @track paginatedCasesMap = new Map();
    @track pageButtons = [];

    @api
    setPaginatedMap(map) {
        this.paginatedCasesMap = map;
        this.generatePageButtons(); // refresh page button data
    }

    get totalPages() {
        return Math.ceil(this.totalRecords / this.pageSize);
    }

    get isPreviousDisabled() {
        return this.currentPage === 1;
    }

    get isNextDisabled() {
        return this.currentPage === this.totalPages;
    }

    generatePageButtons() {
        const maxVisiblePages = 5;
        let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = startPage + maxVisiblePages - 1;

        if (endPage > this.totalPages) {
            endPage = this.totalPages;
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        const buttons = [];

        for (let i = startPage; i <= endPage; i++) {
            const hasData = this.paginatedCasesMap.has(i) && this.paginatedCasesMap.get(i).length > 0;

            buttons.push({
                page: i,
                disabled: !hasData,
                variant: i === this.currentPage ? 'brand' : 'neutral'
            });
        }

        this.pageButtons = buttons;
    }

    handlePreviousClick() {
        this.dispatchEvent(new CustomEvent('previous'));
    }

    handleNextClick() {
        this.dispatchEvent(new CustomEvent('next'));
    }

    handlePageClick(event) {
        const page = parseInt(event.target.dataset.page, 10);
        this.dispatchEvent(new CustomEvent('pagechange', { detail: page }));
    }

    @api
    refreshPagination(currentPage) {
        this.currentPage = currentPage;
        this.generatePageButtons();
    }
}




updatePaginationState() {
    const currentPageData = this.paginatedCasesMap.get(this.currentPage) || [];
    this.processedCases = this.preprocessTableData(currentPageData);

    const paginationComponent = this.template.querySelector('c-psp_-p-s-s-tracker-pagination-l-w-c-comp');
    if (paginationComponent) {
        paginationComponent.setPaginatedMap(this.paginatedCasesMap);
        paginationComponent.refreshPagination(this.currentPage);
    }
}
