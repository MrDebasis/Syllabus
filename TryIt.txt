@AuraEnabled
public static void saveRecord(Map<String, Object> payload) {
    String recordId = (String) payload.get('recordId');
    String objectApiName = (String) payload.get('objectApiName');
    
    // Safely convert nested map
    Map<Object, Object> rawFields = (Map<Object, Object>) payload.get('fields');
    Map<String, Object> fields = new Map<String, Object>();
    for (Object key : rawFields.keySet()) {
        fields.put(String.valueOf(key), rawFields.get(key));
    }

    if (String.isBlank(recordId) || String.isBlank(objectApiName) || fields.isEmpty()) {
        throw new AuraHandledException('Invalid payload: recordId, objectApiName, and fields are required.');
    }

    SObjectType sObjType = Schema.getGlobalDescribe().get(objectApiName);
    if (sObjType == null) {
        throw new AuraHandledException('Invalid object type: ' + objectApiName);
    }

    SObject recordToUpdate = sObjType.newSObject(recordId);
    Map<String, Schema.SObjectField> fieldMap = sObjType.getDescribe().fields.getMap();

    for (String fieldName : fields.keySet()) {
        if (fieldMap.containsKey(fieldName)) {
            recordToUpdate.put(fieldName, fields.get(fieldName));
        } else {
            throw new AuraHandledException('Field ' + fieldName + ' is not valid for object ' + objectApiName);
        }
    }

    update recordToUpdate;
}
