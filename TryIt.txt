public class NotificationHandler {

    // This method checks eligibility based on case ProgramType and RecordType
    private static Map<Id, Boolean> checkEligibilityProgramType(Set<Id> caseIds) {
        Map<Id, Boolean> eligibilityMap = new Map<Id, Boolean>();
        
        if (!caseIds.isEmpty()) {
            List<Case> caseList = [
                SELECT Id, ProgramType__c, RecordType.Name 
                FROM Case 
                WHERE Id IN :caseIds
            ];

            for (Case caseRec : caseList) {
                eligibilityMap.put(
                    caseRec.Id, 
                    caseRec.ProgramType__c == 'MYCARVKTI' && 
                    caseRec.RecordType.Name == 'Patient Support'
                );
            }
        }
        return eligibilityMap;
    }

    // This method fetches email template names based on their IDs
    private static Map<Id, String> getEmailTemplateNames(Set<Id> emailTemplateIds) {
        Map<Id, String> templateMap = new Map<Id, String>();
        
        if (!emailTemplateIds.isEmpty()) {
            List<EmailTemplate> templates = [
                SELECT Id, Name 
                FROM EmailTemplate 
                WHERE Id IN :emailTemplateIds
            ];

            for (EmailTemplate template : templates) {
                templateMap.put(template.Id, template.Name);
            }
        }
        return templateMap;
    }

    // This method checks if an email template is eligible for sending notifications
    private static Map<String, Boolean> isEligibleEmailTemplateToSendNotification(Set<String> emailTemplateNames) {
        Map<String, Boolean> notificationEligibilityMap = new Map<String, Boolean>();
        
        if (!emailTemplateNames.isEmpty()) {
            List<Portal_Notification_Settings__mdt> portalNotificationList = [
                SELECT Name__c, Send_Notification__c 
                FROM Portal_Notification_Settings__mdt 
                WHERE Name__c IN :emailTemplateNames
            ];

            for (Portal_Notification_Settings__mdt portalNotificationRec : portalNotificationList) {
                notificationEligibilityMap.put(
                    portalNotificationRec.Name__c, 
                    portalNotificationRec.Send_Notification__c
                );
            }
        }

        // If template name is not found in metadata, assume it's ineligible
        for (String templateName : emailTemplateNames) {
            if (!notificationEligibilityMap.containsKey(templateName)) {
                notificationEligibilityMap.put(templateName, false);
            }
        }

        return notificationEligibilityMap;
    }

    public static void handleNotificationCreation(List<EmailMessage> lstOfEmailMessage) {
        Set<Id> caseIds = new Set<Id>();
        Set<Id> emailTemplateIds = new Set<Id>();

        // Collect caseIds and emailTemplateIds from the EmailMessage list
        for (EmailMessage emailMsg : lstOfEmailMessage) {
            if (emailMsg.ParentId != null) {
                caseIds.add(emailMsg.ParentId);  // ParentId is the Case Id
            }
            if (emailMsg.EmailTemplateId != null) {
                emailTemplateIds.add(emailMsg.EmailTemplateId);  // EmailTemplateId is the template Id
            }
        }

        // Get eligibility of cases based on ProgramType and RecordType
        Map<Id, Boolean> eligibilityMap = checkEligibilityProgramType(caseIds);

        // Get email template names for the provided template IDs
        Map<Id, String> templateNameMap = getEmailTemplateNames(emailTemplateIds);

        // Prepare the set of email template names to check for notification eligibility
        Set<String> emailTemplateNames = new Set<String>(templateNameMap.values());

        // Get the eligibility of email templates to send notifications
        Map<String, Boolean> emailTemplateEligibilityMap = isEligibleEmailTemplateToSendNotification(emailTemplateNames);

        List<Notification__c> notificationsToCreate = new List<Notification__c>();

        // Process each email message and create notifications if eligible
        for (EmailMessage emailMsg : lstOfEmailMessage) {
            String caseId = emailMsg.ParentId;
            String emailTemplateId = emailMsg.EmailTemplateId;

            // Check case eligibility (ProgramType and RecordType)
            if (caseId != null && eligibilityMap.containsKey(caseId) && eligibilityMap.get(caseId)) {
                String emailTemplateName = templateNameMap.get(emailTemplateId);

                // Check email template eligibility for sending notifications
                if (emailTemplateName != null && emailTemplateEligibilityMap.get(emailTemplateName)) {
                    // Create notification record
                    Notification__c notification = new Notification__c();
                    notification.Subject__c = 'Email sent: ' + emailMsg.Subject;
                    notification.Case__c = caseId;
                    notification.EmailMessageId__c = emailMsg.Id;
                    notification.Recipient__c = emailMsg.ToAddress;
                    notificationsToCreate.add(notification);
                }
            }
        }

        // Perform a bulk DML operation to insert the notifications
        if (!notificationsToCreate.isEmpty()) {
            insert notificationsToCreate;
        }
    }
}

