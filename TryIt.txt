// surveyConfig.js
const surveyConfig = {
    apheresis: {
        steps: {
            start: {
                type: 'date',
                questions: [
                    { id: 'Q1', label: 'When is the apheresis appointment?', type: 'date', required: true },
                    { id: 'Q2', label: 'What day should the patient arrive?', type: 'date', required: true },
                    { id: 'Q3', label: 'What day should the patient depart?', type: 'date', required: true }
                ],
                next: 'screen2'
            },
            screen2: {
                type: 'multipleChoice',
                questionId: 'futureVisit',
                label: 'Will the patient receive bridging therapy?',
                required: true,
                options: ['Yes', 'No', 'Not Sure Yet'],
                followUp: {
                    Yes: {
                        type: 'date',
                        label: 'Please select the bridging therapy start date',
                        id: 'FollowUpDate'
                    },
                    No: {
                        next: 'end'
                    },
                    'Not Sure Yet': {
                        type: 'text',
                        label: 'Please provide more information',
                        id: 'FollowUpText'
                    }
                },
                next: null
            },
            end: {
                type: 'message',
                label: 'Thank you for completing the survey.'
            }
        }
    }
};


// pspSurveyLWCComponent.js
import { LightningElement, track } from 'lwc';
import surveyConfig from './surveyConfig';

export default class PspSurveyLWCComponent extends LightningElement {
    @track currentStep = 'start';
    @track answers = {};
    @track selectedOption = '';

    @track showDateInputs = false;
    @track showMultipleChoice = false;
    @track showFollowUpDate = false;
    @track showFollowUpText = false;
    @track showMessage = false;
    @track isNextButtonDisabled = true;

    @track renderedDateQuestions = [];
    @track multipleChoiceLabel = '';
    @track multipleChoiceOptions = [];
    @track messageLabel = '';
    @track followUpLabel = '';
    @track followUpValue = '';

    get stepConfig() {
        return surveyConfig.apheresis.steps[this.currentStep];
    }

    connectedCallback() {
        this.updateUI();
    }

    updateUI() {
        const step = this.stepConfig;

        // Reset UI flags
        this.showDateInputs = false;
        this.showMultipleChoice = false;
        this.showFollowUpDate = false;
        this.showFollowUpText = false;
        this.showMessage = false;
        this.isNextButtonDisabled = true;

        if (step.type === 'date') {
            this.showDateInputs = true;
            this.renderedDateQuestions = step.questions.map(q => ({
                ...q,
                value: this.answers[q.id] || ''
            }));
        } else if (step.type === 'multipleChoice') {
            this.showMultipleChoice = true;
            this.multipleChoiceLabel = step.label;
            this.multipleChoiceOptions = step.options.map(opt => ({ label: opt, value: opt }));
        } else if (step.type === 'message') {
            this.showMessage = true;
            this.messageLabel = step.label;
        }
    }

    handleInputChange(event) {
        const { name, value } = event.target;
        this.answers[name] = value;

        if (this.showDateInputs) {
            this.renderedDateQuestions = this.renderedDateQuestions.map(q =>
                q.id === name ? { ...q, value } : q
            );
        }

        this.updateNextButtonState();
    }

    handleOptionChange(event) {
        this.selectedOption = event.detail.value;
        const step = this.stepConfig;
        this.answers[step.questionId] = this.selectedOption;

        const followUp = step.followUp?.[this.selectedOption];

        this.showFollowUpDate = followUp?.type === 'date';
        this.showFollowUpText = followUp?.type === 'text';
        this.followUpLabel = followUp?.label || '';
        this.followUpValue = this.answers[followUp?.id] || '';

        this.updateNextButtonState();
    }

    handleFollowUpChange(event) {
        const { name, value } = event.target;
        this.answers[name] = value;
        this.followUpValue = value;
        this.updateNextButtonState();
    }

    updateNextButtonState() {
        const step = this.stepConfig;
        let isValid = true;

        if (step.type === 'date') {
            isValid = step.questions.every(q => this.answers[q.id]);
        } else if (step.type === 'multipleChoice') {
            const followUp = step.followUp?.[this.selectedOption];
            if (!this.selectedOption) {
                isValid = false;
            } else if (followUp?.type === 'date') {
                isValid = !!this.answers[followUp.id];
            } else if (followUp?.type === 'text') {
                isValid = !!this.answers[followUp.id];
            }
        }

        this.isNextButtonDisabled = !isValid;
    }

    handleNext() {
        const step = this.stepConfig;

        if (step.type === 'multipleChoice') {
            const followUp = step.followUp?.[this.selectedOption];
            if (followUp?.next) {
                this.currentStep = followUp.next;
            } else if (step.next) {
                this.currentStep = step.next;
            } else {
                this.currentStep = 'end';
            }
        } else {
            this.currentStep = step.next || 'end';
        }

        this.selectedOption = '';
        this.followUpValue = '';
        this.updateUI();
    }
}


<!-- pspSurveyLWCComponent.html -->
<template>
    <div class="survey-container">
        <!-- Date Inputs -->
        <template if:true={showDateInputs}>
            <template for:each={renderedDateQuestions} for:item="q">
                <lightning-input
                    key={q.id}
                    type={q.type}
                    name={q.id}
                    label={q.label}
                    value={q.value}
                    required={q.required}
                    onchange={handleInputChange}>
                </lightning-input>
            </template>
        </template>

        <!-- Multiple Choice -->
        <template if:true={showMultipleChoice}>
            <lightning-radio-group
                label={multipleChoiceLabel}
                name="multipleChoice"
                options={multipleChoiceOptions}
                value={selectedOption}
                type="radio"
                onchange={handleOptionChange}>
            </lightning-radio-group>
        </template>

        <!-- Follow-up Date -->
        <template if:true={showFollowUpDate}>
            <lightning-input
                type="date"
                name="FollowUpDate"
                label={followUpLabel}
                value={followUpValue}
                onchange={handleFollowUpChange}>
            </lightning-input>
        </template>

        <!-- Follow-up Text -->
        <template if:true={showFollowUpText}>
            <lightning-input
                type="text"
                name="FollowUpText"
                label={followUpLabel}
                value={followUpValue}
                onchange={handleFollowUpChange}>
            </lightning-input>
        </template>

        <!-- Message -->
        <template if:true={showMessage}>
            <div class="thank-you">{messageLabel}</div>
        </template>

        <!-- Next Button -->
        <lightning-button
            class="slds-m-top_medium"
            variant="brand"
            label="Next"
            onclick={handleNext}
            disabled={isNextButtonDisabled}>
        </lightning-button>
    </div>
</template>

