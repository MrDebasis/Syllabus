import { LightningElement, api, track } from 'lwc';

export default class PspApheresisSurveyLWCComp extends LightningElement {
    @api caseId = '';
    @api surveyType = '';
    @api questions = {}; // Format: { "1": [...], "2": [...], etc. }

    @track answers = [];
    @track isNextDisabled = true;
    @track currentScreen = 1;

    @track tripDatesSection = false;
    @track tripDatePairs = [{ arrival: '', departure: '' }];

    get isScreen1() {
        return this.currentScreen === 1;
    }

    get isScreen2() {
        return this.currentScreen === 2;
    }

    get isScreen3() {
        return this.currentScreen === 3;
    }

    get screen1Questions() {
        return this.questions[this.currentScreen] || [];
    }

    get screen2Questions() {
        return this.questions[this.currentScreen] || [];
    }

    get screen3Questions() {
        return this.questions[this.currentScreen] || [];
    }

    handleInputChange(event) {
        const apiName = event.target.dataset.id;
        const value = event.target.value || event.target.dataset.value;
        const label = event.target.dataset.label || this.getLabelByApiName(apiName);
        const uniqueId = `${this.surveyType}_${this.caseId}_${apiName}_${this.currentScreen}`;

        const newAnswer = {
            UniqueId: uniqueId,
            label: label,
            value: value
        };

        const existingIndex = this.answers.findIndex(a => a.UniqueId === uniqueId);
        if (existingIndex > -1) {
            this.answers.splice(existingIndex, 1, newAnswer);
        } else {
            this.answers.push(newAnswer);
        }

        // Handle showing trip date section
        if (this.isScreen3 && label === 'Will the patient receive bridging therapy at your certified treatment center?*' && value === 'Yes') {
            this.tripDatesSection = true;
        } else if (this.isScreen3) {
            this.tripDatesSection = false;
        }

        this.validateRequired();
    }

    handleTripDateChange(event) {
        const index = parseInt(event.target.dataset.index, 10);
        const field = event.target.dataset.field;
        const value = event.target.value;
        const apiName = event.target.dataset.id;

        this.tripDatePairs[index][field] = value;

        // Save trip date pair to answers
        this.saveAnswer(apiName, this.getLabelByApiName(apiName), [...this.tripDatePairs]);
    }

    handleAddTripDate() {
        this.tripDatePairs = [...this.tripDatePairs, { arrival: '', departure: '' }];
        const apiName = this.screen3Questions[0]?.apiName;
        this.saveAnswer(apiName, this.getLabelByApiName(apiName), [...this.tripDatePairs]);
    }

    saveAnswer(apiName, label, value) {
        const uniqueId = `${this.surveyType}_${this.caseId}_${apiName}_tripDates`;
        const newAnswer = {
            UniqueId: uniqueId,
            label,
            value: JSON.stringify(value)
        };

        const existingIndex = this.answers.findIndex(a => a.UniqueId === uniqueId);
        if (existingIndex > -1) {
            this.answers.splice(existingIndex, 1, newAnswer);
        } else {
            this.answers.push(newAnswer);
        }
    }

    validateRequired() {
        const currentQuestions = this.questions[this.currentScreen] || [];
        const requiredQuestions = currentQuestions.filter(q => q.required);

        const allAnswered = requiredQuestions.every(q => {
            const uniqueId = `${this.surveyType}_${this.caseId}_${q.apiName}_${this.currentScreen}`;
            const answer = this.answers.find(a => a.UniqueId === uniqueId);
            return answer && answer.value;
        });

        this.isNextDisabled = !allAnswered;
    }

    handleNext() {
        if (this.currentScreen < 5) {
            this.currentScreen++;
            this.isNextDisabled = true;
        }
    }

    getLabelByApiName(apiName) {
        const allQuestions = Object.values(this.questions).flat();
        const found = allQuestions.find(q => q.apiName === apiName);
        return found ? found.label : '';
    }
}


<template>
    <!-- Screen 1 -->
    <template if:true={isScreen1}>
        <template for:each={screen1Questions} for:item="q">
            <div key={q.apiName}>
                <label>{q.label}</label>
                <lightning-input
                    type="date"
                    data-id={q.apiName}
                    onchange={handleInputChange}
                    required={q.required}>
                </lightning-input>
            </div>
        </template>
    </template>

    <!-- Screen 2 -->
    <template if:true={isScreen2}>
        <template for:each={screen2Questions} for:item="q">
            <div key={q.apiName}>
                <label>{q.label}</label>
                <lightning-button label="Yes" data-id={q.apiName} data-label={q.label} data-value="Yes" onclick={handleInputChange}></lightning-button>
                <lightning-button label="No" data-id={q.apiName} data-label={q.label} data-value="No" onclick={handleInputChange}></lightning-button>
            </div>
        </template>
    </template>

    <!-- Screen 3 -->
    <template if:true={isScreen3}>
        <template for:each={screen3Questions} for:item="q">
            <div key={q.apiName}>
                <label>{q.label}</label>
                <lightning-button label="Yes" data-id={q.apiName} data-label={q.label} data-value="Yes" onclick={handleInputChange}></lightning-button>
                <lightning-button label="No" data-id={q.apiName} data-label={q.label} data-value="No" onclick={handleInputChange}></lightning-button>
                <lightning-button label="Not sure yet" data-id={q.apiName} data-label={q.label} data-value="Not sure yet" onclick={handleInputChange}></lightning-button>
            </div>
        </template>

        <!-- Trip Dates Section -->
        <template if:true={tripDatesSection}>
            <div class="s-trip-dates">
                <template for:each={tripDatePairs} for:item="pair" for:index="index">
                    <div key={index} class="s-date-pair">
                        <lightning-input
                            type="date"
                            label="Arrival Date"
                            data-index={index}
                            data-field="arrival"
                            data-id="tripDates"
                            value={pair.arrival}
                            onchange={handleTripDateChange}
                            required>
                        </lightning-input>

                        <lightning-input
                            type="date"
                            label="Departure Date"
                            data-index={index}
                            data-field="departure"
                            data-id="tripDates"
                            value={pair.departure}
                            onchange={handleTripDateChange}
                            required>
                        </lightning-input>
                    </div>
                </template>

                <lightning-button
                    label="+ Add More Dates"
                    variant="brand-outline"
                    onclick={handleAddTripDate}>
                </lightning-button>
            </div>
        </template>
    </template>

    <!-- Navigation -->
    <div class="s-nav">
        <lightning-button label="Next" onclick={handleNext} disabled={isNextDisabled}></lightning-button>
    </div>
</template>
