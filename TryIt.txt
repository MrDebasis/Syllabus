handleEditClick(event) {
    const rowId = event.target.dataset.id;
    const field = event.target.dataset.field;

    // Step 1: Flush pending edited values into UI before switching
    const pendingEdits = this.editedValues[rowId];
    if (pendingEdits) {
        this.processedCases = this.processedCases.map(row => {
            if (row.Id === rowId) {
                return {
                    ...row,
                    columns: row.columns.map(col => ({
                        ...col,
                        value: pendingEdits[col.field] !== undefined ? pendingEdits[col.field] : col.value
                    }))
                };
            }
            return row;
        });

        // Optional: Clear editedValues after flush if you want to discard old edits
        // delete this.editedValues[rowId];
    }

    // Step 2: Now apply the new editing state
    this.processedCases = this.processedCases.map(row => {
        if (row.Id === rowId) {
            return {
                ...row,
                isEditing: true,
                detailRowKeyForSaveAndCancel: `${row.Id}-save-cancel`,
                columns: row.columns.map(col => ({
                    ...col,
                    isEditing: col.field === field
                }))
            };
        }
        return {
            ...row,
            isEditing: false,
            detailRowKeyForSaveAndCancel: null,
            columns: row.columns.map(col => ({
                ...col,
                isEditing: false
            }))
        };
    });
}
