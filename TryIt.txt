convertDateFormat(dateStr) {
    try {
        if (!dateStr || typeof dateStr !== 'string') {
            return null;
        }

        // Detect if the user is on an iPhone or Mac (Safari)
        let isAppleDevice = /iPhone|iPad|Macintosh/.test(navigator.userAgent) && !window.MSStream;

        // Use appropriate date parsing function
        return isAppleDevice ? this.convertDateForApple(dateStr) : this.convertDateForOther(dateStr);
    } catch (error) {
        return null;
    }
}

// Function for iPhone & Mac (Safari)
convertDateForApple(dateStr) {
    try {
        let cleanedDateStr = dateStr
            .trim()
            .replace(/[,]/g, '')  // Remove commas
            .replace(/(\d{1,2})[st|nd|rd|th]/gi, '$1') // Remove suffixes like "8th"
            .replace(/(?:Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)\s+/i, '') // Remove weekday
            .replace(/(\d+)(?:\s+|-|\/|\.)([A-Za-z]+)(?:\s+|-|\/|\.)(\d+)/, '$2 $1, $3'); // Normalize formats like "08-Dec-2024" or "08.Dec.2024"

        let parsedDate = this.parseDateManually(cleanedDateStr); // Custom parsing
        if (!parsedDate) return null;

        let year = parsedDate.getUTCFullYear();
        let month = String(parsedDate.getUTCMonth() + 1).padStart(2, '0'); 
        let day = String(parsedDate.getUTCDate()).padStart(2, '0'); 

        return `${year}-${month}-${day}`;
    } catch (error) {
        return null;
    }
}

// Function for Other Browsers (Chrome, Edge, Firefox)
convertDateForOther(dateStr) {
    try {
        let cleanedDateStr = dateStr
            .trim()
            .replace(/[,]/g, '')
            .replace(/(\d{1,2})[st|nd|rd|th]/gi, '$1')
            .replace(/(?:Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)\s+/i, '') // Remove weekday
            .replace(/(\d+)(?:\s+|-|\/|\.)([A-Za-z]+)(?:\s+|-|\/|\.)(\d+)/, '$2 $1, $3'); // Normalize formats

        let date = new Date(cleanedDateStr + ' UTC'); // Force UTC parsing
        if (isNaN(date.getTime())) return null;

        let year = date.getUTCFullYear();
        let month = String(date.getUTCMonth() + 1).padStart(2, '0'); 
        let day = String(date.getUTCDate()).padStart(2, '0'); 

        return `${year}-${month}-${day}`;
    } catch (error) {
        return null;
    }
}

// Custom Date Parsing for Safari (Manually Extract Components)
parseDateManually(dateStr) {
    const months = {
        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,
        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11,
        'January': 0, 'February': 1, 'March': 2, 'April': 3, 'May': 4, 'June': 5,
        'July': 6, 'August': 7, 'September': 8, 'October': 9, 'November': 10, 'December': 11
    };

    let parts = dateStr.match(/\d+|[A-Za-z]+/g);
    if (!parts) return null;

    let day, month, year;

    if (isNaN(parts[0])) { // "December 8 2024"
        [month, day, year] = [months[parts[0]], parts[1], parts[2]];
    } else if (isNaN(parts[1])) { // "8 Dec 2024"
        [day, month, year] = [parts[0], months[parts[1]], parts[2]];
    } else {
        return null;
    }

    let date = new Date(Date.UTC(year, month, day));
    return isNaN(date.getTime()) ? null : date;
}
