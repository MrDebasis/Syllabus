private HttpResponse callOutToTextractAPI(String base64File, String fileExtension) {
    if (String.isEmpty(base64File)) {
        Application.logentry.error('ContentVersionsService.callOutToTextractAPI(): Base64 file data is empty.');
        return null;
    }

    HttpRequest request = new HttpRequest();
    AwsWrapper mapi = new AwsWrapper();
    Textract_API_Details__mdt apiDetails = TextractMetaDataSelector.newInstance().getTextractAPIDetails('TextractAPIDetails');

    if (apiDetails == null) {
        Application.logentry.error('ContentVersionsService.callOutToTextractAPI(): API details are missing.');
        return null;
    }

    // Assign Base64 data
    mapi.file = base64File;

    // Check if the file is HEIC format
    if (fileExtension != null && fileExtension.equalsIgnoreCase('heic')) {
        mapi.returnFile = true;
    }

    request.setEndpoint(apiDetails.EndPoint__c);
    request.setHeader('Content-Type', apiDetails.ContentType__c);
    request.setHeader('User-Agent', apiDetails.UserAgent__c);
    request.setHeader('x-api-key', apiDetails.APIKey__c);
    request.setMethod(apiDetails.HTTPMethod__c);
    request.setTimeout((Integer) apiDetails.TimeOut__c);
    request.setBody(JSON.serialize(mapi));

    try {
        return new Http().send(request);
    } catch (Exception e) {
        Application.logentry.error('ContentVersionsService.callOutToTextractAPI(): Error during API callout: ' + e);
        return null;
    }
}

public Map<String, String> getReceiptJSON(String base64File, String fileExtension) {
    String responseBody = '';
    HttpResponse response = callOutToTextractAPI(base64File, fileExtension);
    if (response != null && (response.getStatusCode() == 200 || response.getStatusCode() == 201)) {
        responseBody = response.getBody();
    }
    return parseReceiptJSON(responseBody);
}
