@AuraEnabled
public static void bulkSaveRecords(List<Map<String, Object>> payloadList) {
    try {
        Map<String, SObject> recordsToUpdate = new Map<String, SObject>();

        for (Map<String, Object> payload : payloadList) {
            String recordId = (String) payload.get('recordId');
            String objectApiName = (String) payload.get('objectApiName');
            Map<String, Object> updatedFields = (Map<String, Object>) payload.get('updatedFields');

            SObjectType sObjectType = Schema.getGlobalDescribe().get(objectApiName);
            if (sObjectType == null) {
                throw new IllegalArgumentException('Invalid objectApiName: ' + objectApiName);
            }

            Map<String, Schema.SObjectField> fieldMap = sObjectType.getDescribe().fields.getMap();
            SObject record = sObjectType.newSObject(recordId);

            for (String fieldName : updatedFields.keySet()) {
                if (!fieldMap.containsKey(fieldName)) {
                    throw new IllegalArgumentException('Field does not exist: ' + fieldName);
                }

                Schema.SObjectField field = fieldMap.get(fieldName);
                Schema.DisplayType fieldType = field.getDescribe().getType();
                Object updatedValue = updatedFields.get(fieldName);

                if (updatedValue == null) {
                    continue; // skip nulls or handle as needed
                }

                switch on fieldType {
                    when DATE {
                        record.put(fieldName, Date.valueOf((String) updatedValue));
                    }
                    when DATETIME {
                        record.put(fieldName, DateTime.valueOf((String) updatedValue));
                    }
                    when BOOLEAN {
                        record.put(fieldName, Boolean.valueOf((String) updatedValue));
                    }
                    when INTEGER {
                        record.put(fieldName, Integer.valueOf((String) updatedValue));
                    }
                    when DOUBLE {
                        record.put(fieldName, Double.valueOf((String) updatedValue));
                    }
                    when CURRENCY {
                        record.put(fieldName, Decimal.valueOf((String) updatedValue));
                    }
                    when else {
                        record.put(fieldName, updatedValue);
                    }
                }
            }
            recordsToUpdate.put(recordId, record);
        }

        update recordsToUpdate.values();
    } catch (Exception e) {
        System.debug('Error in bulkSaveRecords: ' + e.getMessage());
        throw new AuraHandledException('Error updating records: ' + e.getMessage());
    }
}


async handleSaveAll() {
    this.showSpinner = true;

    const payloadList = Object.entries(this.editedValues).map(([recordId, fields]) => {
        const row = this.processedCases.find(r => r.Id === recordId);
        return {
            recordId,
            objectApiName: row.objectApiName || 'Case',
            updatedFields: fields
        };
    });

    if (payloadList.length === 0) {
        this.showSpinner = false;
        return;
    }

    try {
        await bulkSaveRecords({ payloadList });

        // Update UI after successful save
        this.processedCases = this.processedCases.map(row => {
            const updated = this.editedValues[row.Id];
            if (updated) {
                let updatedRow = {
                    ...row,
                    isEditing: false,
                    detailRowKeyForSaveAndCancel: null,
                    columns: row.columns.map(col => ({
                        ...col,
                        value: updated[col.field] ?? col.value,
                        isEditing: false,
                        cellClass: ''
                    }))
                };
                updatedRow = this.updateNextActionStyling(updatedRow);
                return updatedRow;
            }
            return row;
        });

        this.editedValues = {};
        this.showSpinner = false;
        this.showToastAfterSaving('success', 'All records saved successfully.');

    } catch (error) {
        this.showSpinner = false;
        this.showToastAfterSaving('error', `Bulk save failed: ${
            error.message || (error.body && error.body.message) || JSON.stringify(error)
        }`);
    }
}
