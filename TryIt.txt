public with sharing class FileUploadController {
    @AuraEnabled
    public static String uploadChunkToContentDocument(
        String fileName,
        String base64Chunk,
        String contentType,
        Boolean isLastChunk,
        String contentDocumentId
    ) {
        try {
            ContentVersion newVersion;

            if (contentDocumentId == null) {
                // First chunk: Create a new ContentVersion
                newVersion = new ContentVersion(
                    Title = fileName,
                    PathOnClient = fileName,
                    VersionData = EncodingUtil.base64Decode(base64Chunk),
                    IsMajorVersion = false
                );
                insert newVersion;
                
                // Return the ContentDocumentId to ensure all chunks are linked
                return newVersion.ContentDocumentId;
            } else {
                // Subsequent chunks: Add new ContentVersion to the same ContentDocument
                newVersion = new ContentVersion(
                    Title = fileName,
                    PathOnClient = fileName,
                    VersionData = EncodingUtil.base64Decode(base64Chunk),
                    IsMajorVersion = false,
                    ContentDocumentId = contentDocumentId // Correctly linking to existing ContentDocument
                );
                insert newVersion;
            }

            return contentDocumentId; // Always return ContentDocumentId

        } catch (Exception e) {
            throw new AuraHandledException("Error uploading file: " + e.getMessage());
        }
    }
}


const CHUNK_SIZE = 750 * 1024; // 750 KB per chunk

uploadInChunks(fileName, base64Data, contentType) {
    this.isLoading = true;
    let startPosition = 0;
    let endPosition = Math.min(CHUNK_SIZE, base64Data.length);
    let contentDocumentId = null; // Corrected to track ContentDocumentId

    const uploadChunk = () => {
        const chunk = base64Data.substring(startPosition, endPosition);

        uploadChunkToContentDocument({
            fileName: fileName,
            base64Chunk: chunk,
            contentType: contentType,
            isLastChunk: endPosition >= base64Data.length,
            contentDocumentId: contentDocumentId // Correctly using ContentDocumentId
        })
        .then((returnedId) => {
            if (!contentDocumentId) {
                contentDocumentId = returnedId; // Set ContentDocumentId after first chunk
            }
            console.log("Uploaded Chunk, ContentDocumentId:", contentDocumentId);

            if (endPosition < base64Data.length) {
                startPosition = endPosition;
                endPosition = Math.min(startPosition + CHUNK_SIZE, base64Data.length);
                uploadChunk(); // Continue uploading next chunk
            } else {
                this.uploadedFileIds.push(contentDocumentId);
                this.showSuccessMessage("File uploaded successfully!");
                this.isLoading = false;
            }
        })
        .catch((error) => {
            console.error("Error uploading chunk:", error);
            this.showErrorMessage("File upload failed!", true);
            this.isLoading = false;
        });
    };

    uploadChunk(); // Start uploading in chunks
}
