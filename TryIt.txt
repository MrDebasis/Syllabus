uploadInChunks(fileName, base64Data, contentType) {
    this.isLoading = true;
    let startPosition = 0;
    let endPosition = Math.min(CHUNK_SIZE, base64Data.length);
    let contentDocumentId = null; // This will be set to the ContentDocumentId from Apex

    const uploadChunk = () => {
        const chunk = base64Data.substring(startPosition, endPosition);

        // Pass the current contentDocumentId along with the chunk
        uploadChunkToContentDocument({
            fileName: fileName,
            base64Chunk: chunk,
            contentType: contentType,
            isLastChunk: endPosition >= base64Data.length,
            contentDocumentId: contentDocumentId // Pass the correct ContentDocumentId
        })
        .then((returnedId) => {
            if (!contentDocumentId && returnedId) {
                // On first chunk, set the contentDocumentId
                contentDocumentId = returnedId;
                console.log('First ContentDocumentId:', contentDocumentId); // Debug log
            }
            if (endPosition < base64Data.length) {
                startPosition = endPosition;
                endPosition = Math.min(startPosition + CHUNK_SIZE, base64Data.length);
                uploadChunk(); // Upload next chunk
            } else {
                this.uploadedFileIds.push(contentDocumentId);
                this.showSuccessMessage("File uploaded successfully!");
                this.isLoading = false;
            }
        })
        .catch((error) => {
            console.error("Error uploading chunk:", error);
            this.showErrorMessage("File upload failed!", true);
            this.isLoading = false;
        });
    };

    uploadChunk(); // Start chunked upload
}


@AuraEnabled
public static String uploadChunkToContentDocument(
    String fileName,
    String base64Chunk,
    String contentType,
    Boolean isLastChunk,
    String contentDocumentId // Passing ContentDocumentId
) {
    try {
        ContentVersion newVersion;

        if (contentDocumentId == null) {
            // First chunk: Create a new ContentVersion
            newVersion = new ContentVersion(
                Title = fileName,
                PathOnClient = fileName,
                VersionData = EncodingUtil.base64Decode(base64Chunk),
                FirstPublishLocationId = UserInfo.getUserId(), // Associate with the user or a record
                IsMajorVersion = false
            );
            insert newVersion;

            // Return the associated ContentDocumentId for next chunks
            return newVersion.ContentDocumentId;
        } else {
            // Subsequent chunks: Associate with existing ContentDocument
            newVersion = new ContentVersion(
                Title = fileName,
                PathOnClient = fileName,
                VersionData = EncodingUtil.base64Decode(base64Chunk),
                ContentDocumentId = contentDocumentId, // Correctly link to the previous ContentDocument
                IsMajorVersion = isLastChunk
            );
            insert newVersion;
        }

        // Always return the ContentDocumentId to continue appending
        return contentDocumentId;

    } catch (Exception e) {
        throw new AuraHandledException('Error uploading file: ' + e.getMessage());
    }
}
