<template>
    <template if:true={stepConfig}>
        <div class="survey-container">
            <template if:true={stepConfig.type}>

                <!-- Step 1: Date Input Questions -->
                <template if:true={stepConfig.type === 'dateInputs'}>
                    <template for:each={stepConfig.questions} for:item="q">
                        <lightning-input
                            key={q.id}
                            type="date"
                            name={q.id}
                            label={q.label}
                            value={answers[q.id]}
                            onchange={handleInputChange}
                            required={q.required}>
                        </lightning-input>
                    </template>
                </template>

                <!-- Step 2: Yes/No Question -->
                <template if:true={stepConfig.type === 'yesNo'}>
                    <lightning-radio-group
                        label={stepConfig.label}
                        name="yesno"
                        options={yesNoOptions}
                        value={selectedOption}
                        type="radio"
                        onchange={handleOptionChange}>
                    </lightning-radio-group>
                </template>

                <!-- Step 3: Multiple Choice -->
                <template if:true={stepConfig.type === 'multipleChoice'}>
                    <lightning-radio-group
                        label={stepConfig.label}
                        name="multiplechoice"
                        options={multipleChoiceOptions}
                        value={selectedOption}
                        type="radio"
                        onchange={handleOptionChange}>
                    </lightning-radio-group>
                </template>

                <!-- End Screen -->
                <template if:true={stepConfig.type === 'message'}>
                    <div class="thank-you">{stepConfig.label}</div>
                </template>

                <template if:true={stepConfig.next}>
                    <lightning-button
                        class="slds-m-top_medium"
                        variant="brand"
                        label="Next"
                        onclick={handleNext}
                        disabled={!isNextEnabled}>
                    </lightning-button>
                </template>
            </template>
        </div>
    </template>
</template>


// surveyTestA.js
import { LightningElement, track } from 'lwc';

const surveyConfig = {
    testA: {
        steps: {
            start: {
                type: 'dateInputs',
                questions: [
                    { id: 'dob', label: 'Date of Birth', type: 'date', required: true },
                    { id: 'lastVisit', label: 'Last Visit Date', type: 'date', required: true },
                    { id: 'nextVisit', label: 'Next Scheduled Visit', type: 'date', required: true }
                ],
                next: 'question1'
            },
            question1: {
                type: 'yesNo',
                questionId: 'serviceHelpful',
                label: 'Was the service helpful?',
                required: true,
                options: ['Yes', 'No'],
                next: 'question2'
            },
            question2: {
                type: 'multipleChoice',
                questionId: 'futureVisit',
                label: 'Would you like to visit again?',
                required: true,
                options: ['Yes', 'No', 'Not Sure Yet'],
                next: 'end'
            },
            end: {
                type: 'message',
                label: 'Thank you for completing the survey.'
            }
        }
    }
};

export default class SurveyTestA extends LightningElement {
    @track currentStep = 'start';
    @track answers = {};
    @track selectedOption = '';

    get stepConfig() {
        return surveyConfig.testA.steps[this.currentStep];
    }

    handleInputChange(event) {
        const { name, value } = event.target;
        this.answers[name] = value;
    }

    handleOptionChange(event) {
        this.selectedOption = event.detail.value;
        this.answers[this.stepConfig.questionId] = this.selectedOption;
    }

    get isNextEnabled() {
        const step = this.stepConfig;
        if (step.type === 'dateInputs') {
            return step.questions.every(q => this.answers[q.id]);
        }
        if (step.type === 'yesNo' || step.type === 'multipleChoice') {
            return !!this.selectedOption;
        }
        return true;
    }

    handleNext() {
        this.selectedOption = '';
        this.currentStep = this.stepConfig.next;
    }

    get yesNoOptions() {
        return this.stepConfig.options.map(o => ({ label: o, value: o }));
    }

    get multipleChoiceOptions() {
        return this.stepConfig.options.map(o => ({ label: o, value: o }));
    }
}

.survey-container {
    padding: 1rem;
    background: #f4f6f9;
    border-radius: 8px;
}

.thank-you {
    font-size: 1.5rem;
    font-weight: bold;
    text-align: center;
    margin: 2rem 0;
    color: #2e844a;
}
