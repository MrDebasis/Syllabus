public without sharing class EmailMessageTriggerHandler {
    
    // STEP 1: This method checks eligibility based on case ProgramType and RecordType
    private static Map<Id, Boolean> checkEligibilityProgramType(Set<Id> caseIds) {
        Map<Id, Boolean> eligibilityMap = new Map<Id, Boolean>();
        
        if (!caseIds.isEmpty()) {
            List<Case> caseList = [
                SELECT Id, ProgramType__c, RecordType.Name 
                FROM Case 
                WHERE Id IN :caseIds
            ];
            
            for (Case caseRec : caseList) {
                eligibilityMap.put(
                    caseRec.Id, 
                    caseRec.ProgramType__c == 'MYCARVKTI' && 
                    caseRec.RecordType.Name == 'Patient Support'
                );
            }
        }
        return eligibilityMap;
    }
    
    // STEP 2: This method fetches email template names based on their IDs
    private static Map<Id, String> getEmailTemplateNames(Set<Id> emailTemplateIds) {
        Map<Id, String> templateMap = new Map<Id, String>();
        
        if (!emailTemplateIds.isEmpty()) {
            List<EmailTemplate> templates = [
                SELECT Id, Name 
                FROM EmailTemplate 
                WHERE Id IN :emailTemplateIds
            ];
            
            for (EmailTemplate template : templates) {
                templateMap.put(template.Id, template.Name);
            }
        }
        return templateMap;
    }
    
    // STEP 3: This method checks if an email template is eligible for sending notifications
    private static Map<String, Boolean> isEligibleEmailTemplateToSendNotification(Set<String> emailTemplateNames) {
        Map<String, Boolean> notificationEligibilityMap = new Map<String, Boolean>();
        
        if (!emailTemplateNames.isEmpty()) {
            List<Portal_Notification_Settings__mdt> portalNotificationList = [
                SELECT Name__c, Send_Notification__c 
                FROM Portal_Notification_Settings__mdt 
                WHERE Name__c IN :emailTemplateNames
            ];
            
            for (Portal_Notification_Settings__mdt portalNotificationRec : portalNotificationList) {
                notificationEligibilityMap.put(
                    portalNotificationRec.Name__c, 
                    portalNotificationRec.Send_Notification__c
                );
            }
        }
        
        // Mark templates not found in metadata as ineligible
        for (String templateName : emailTemplateNames) {
            if (!notificationEligibilityMap.containsKey(templateName)) {
                notificationEligibilityMap.put(templateName, false);
            }
        }
        
        return notificationEligibilityMap;
    }
    
    // STEP 4: Fetch users based on email addresses
    private static Map<String, User> getUserIdUsingEmail(Set<String> emails) {
        Map<String, User> userMap = new Map<String, User>();
        
        if (!emails.isEmpty()) {
            List<User> users = [
                SELECT Id, Email FROM User WHERE Email IN :emails
            ];
            for (User user : users) {
                userMap.put(user.Email, user);
            }
        }
        
        return userMap;
    }
    
    // Main method to handle notification creation
    public static void handleNotificationCreation(List<EmailMessage> lstOfEmailMessage) {
        Set<Id> caseIds = new Set<Id>();
        Set<Id> emailTemplateIds = new Set<Id>();
        Set<String> allEmails = new Set<String>();
        
        // Collect Case and EmailTemplate IDs, and email addresses
        for (EmailMessage emailMsg : lstOfEmailMessage) {
            if (emailMsg.ParentId != null) {
                caseIds.add(emailMsg.ParentId);  // ParentId is the Case Id
            }
            if (emailMsg.EmailTemplateId != null) {
                emailTemplateIds.add(emailMsg.EmailTemplateId);  // Email Template Id 
            }
            if (emailMsg.ToAddress != null && emailMsg.ToAddress.contains('.com')) {
                List<String> splitEmails = emailMsg.ToAddress.split('.com');
                for (String email : splitEmails) {
                    allEmails.add(email.trim() + '.com'); // Reattach '.com' after splitting
                }
            }
        }
        
        // Fetch eligibility data and template names
        Map<Id, Boolean> eligibilityMap = checkEligibilityProgramType(caseIds);
        Map<Id, String> templateNameMap = getEmailTemplateNames(emailTemplateIds);
        Set<String> emailTemplateNames = new Set<String>(templateNameMap.values());
        Map<String, Boolean> emailTemplateEligibilityMap = isEligibleEmailTemplateToSendNotification(emailTemplateNames);
        
        // Fetch users based on the email addresses
        Map<String, User> userMap = getUserIdUsingEmail(allEmails);
        
        List<Notification__c> notificationsToCreate = new List<Notification__c>();
        
        // Process each email message and create notifications
        for (EmailMessage emailMsg : lstOfEmailMessage) {
            String caseId = emailMsg.ParentId;
            String emailTemplateId = emailMsg.EmailTemplateId;
            
            // Check case and template eligibility
            if (caseId != null && eligibilityMap.get(caseId) && emailTemplateId != null) {
                String emailTemplateName = templateNameMap.get(emailTemplateId);
                
                if (emailTemplateName != null && emailTemplateEligibilityMap.get(emailTemplateName)) {
                    for (String email : allEmails) {
                        if (userMap.containsKey(email)) {
                            Notification__c noti = new Notification__c();
                            noti.Subject__c = emailMsg.Subject; // Assuming Subject and Body are the right fields
                            noti.Message__c = emailMsg.HtmlBody;
                            noti.RelatedRecordId__c = caseId;
                            noti.ReadStatus__c = 'Unread';
                            noti.AssignedTo__c = userMap.get(email).Id;
                            noti.Country__c = 'US';
                            notificationsToCreate.add(noti);
                        }
                    }
                }
            }
        }
        
        // Insert notifications if any
        if (!notificationsToCreate.isEmpty()) {
            insert notificationsToCreate;
        }
    }
}
