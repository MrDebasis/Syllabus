export const surveyConfig = {
    apheresis: {
        title: "Apheresis Survey",
        screens: [
            {
                screenNo: "screen1",
                bool: "isScreen1Visible",
                type: "date",
                values: [],
                questions: [
                    {
                        id: "Q1",
                        label: "Apheresis appointment date?",
                        required: true,
                        type: "date"
                    },
                    {
                        id: "Q2",
                        label: "Patient arrival date?",
                        required: true,
                        type: "date"
                    },
                    {
                        id: "Q3",
                        label: "Patient departure date?",
                        required: true,
                        type: "date"
                    }
                ],
                buttonName: "Next",
                isNextEnabled: false,
                next: "screen2"
            },
            {
                screenNo: "screen2",
                bool: "isScreen2Visible",
                type: "radio",
                values: [],
                questions: [
                    {
                        id: "Q4",
                        label: "Are the dates related to CARVYKTIÂ® treatment?",
                        options: ["Yes", "No"],
                        required: true,
                        type: "radio"
                    }
                ],
                buttonName: "Next",
                isNextEnabled: false,
                next: "screen3"
            },
            {
                screenNo: "screen3",
                bool: "isScreen3Visible",
                type: "radio",
                values: [],
                questions: [
                    {
                        id: "Q5",
                        label: "Will the patient receive bridging therapy?",
                        options: ["Yes", "No", "Not Sure Yet"],
                        required: true,
                        type: "radio"
                    }
                ],
                buttonName: "Submit",
                isNextEnabled: false,
                next: "end"
            },
            {
                screenNo: "end",
                bool: "isEndVisible",
                type: "message",
                values: [],
                questions: [],
                label: "Thank you for completing the Apheresis survey."
            }
        ]
    }
};


import { LightningElement, track } from 'lwc';
import { surveyConfig } from './surveyConfig.js';

export default class DynamicSurvey extends LightningElement {
    @track selectedSurvey = 'apheresis';
    @track surveyData = surveyConfig.apheresis;
    @track answers = {};

    @track isScreen1Visible = true;
    @track isScreen2Visible = false;
    @track isScreen3Visible = false;
    @track isEndVisible = false;

    get currentScreen() {
        return this.surveyData.screens.find(screen => this[screen.bool]);
    }

    handleInputChange(event) {
        const { name, value } = event.target;
        this.answers[name] = value;

        // Enable Next if all required questions are answered
        this.currentScreen.isNextEnabled = this.currentScreen.questions.every(q => {
            return q.required ? this.answers[q.id] : true;
        });
    }

    handleNext() {
        const current = this.currentScreen;
        this[current.bool] = false;

        const next = this.surveyData.screens.find(s => s.screenNo === current.next);
        if (next) this[next.bool] = true;
    }

    get isNextDisabled() {
        return !this.currentScreen.isNextEnabled;
    }
}


<template>
    <template for:each={surveyData.screens} for:item="screen">
        <template if:true={this[screen.bool]} key={screen.screenNo}>
            <template if:true={screen.questions.length}>
                <template for:each={screen.questions} for:item="q">
                    <lightning-input
                        key={q.id}
                        type={q.type}
                        name={q.id}
                        label={q.label}
                        value={answers[q.id]}
                        onchange={handleInputChange}
                        required={q.required}>
                    </lightning-input>

                    <template if:true={q.options}>
                        <lightning-radio-group
                            key={q.id}
                            name={q.id}
                            label={q.label}
                            options={q.options.map(opt => ({ label: opt, value: opt }))}
                            value={answers[q.id]}
                            onchange={handleInputChange}>
                        </lightning-radio-group>
                    </template>
                </template>
            </template>

            <template if:true={screen.label}>
                <div class="thank-you">{screen.label}</div>
            </template>

            <lightning-button
                label={screen.buttonName}
                onclick={handleNext}
                disabled={isNextDisabled}>
            </lightning-button>
        </template>
    </template>
</template>
