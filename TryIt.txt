CHILD COMPONENT :     <c-psp_-p-s-s-tracker-pagination-l-w-c-comp
    current-page={currentPage}
    total-records={casesFiltered.length}
    page-size="10"
    onprevious={handlePrevious}
    onnext={handleNext}
    onpagechange={handlePageClick}>
</c-psp_-p-s-s-tracker-pagination-l-w-c-comp> <template>
    <div class="pagination">
        <lightning-button 
            disabled={isPreviousDisabled} 
            onclick={handlePreviousClick} 
            label="Previous">
        </lightning-button>
        
        <template for:each={paginationNumbers} for:item="page">
            <lightning-button
                key={page}
                class={}
                onclick={handlePageClick}
                data-page={page}
                variant={pageHilight}
                label={page}>
            </lightning-button>
        </template>
    
        <lightning-button 
            disabled={isNextDisabled} 
            onclick={handleNextClick} 
            label="Next">
        </lightning-button>
        {currentPage}
    </div>
</template>

export default class Psp_PSSTrackerPaginationLWCComp extends LightningElement {
    @api currentPage;
    @api totalRecords;
    @api pageSize;

    @track pageHilight='';
    get totalPages() {
        return Math.ceil(this.totalRecords / this.pageSize);
    }

    get paginationNumbers() {
        const maxVisiblePages = 5;
        const startPage = Math.floor((this.currentPage - 1) / maxVisiblePages) * maxVisiblePages + 1;
        const endPage = Math.min(startPage + maxVisiblePages - 1, this.totalPages);

        const pages = [];
        for (let i = startPage; i <= endPage; i++) {
            pages.push(i);
        }

        return pages;
    }

    get isPreviousDisabled() {
        return this.currentPage === 1;
    }

    get isNextDisabled() {
        return this.currentPage === this.totalPages;
    }

    handlePreviousClick() {
        this.dispatchEvent(new CustomEvent('previous'));
    }

    handleNextClick() {
        this.dispatchEvent(new CustomEvent('next'));
    }

    handlePageClick(event) {
        const page = parseInt(event.target.dataset.page, 10);
        this.pageHilight = 'brand' ;
        this.dispatchEvent(new CustomEvent('pagechange', { detail: page }));
    }

    get getNextButtonCSS(){
        return this.currentPage === this.totalPages  ? '' : 'brand';
    }
    get getPreviousButtonCSS(){
        return this.currentPage === 1  ? '' : 'brand';
    }

    getButtonVariant() {
        return this.pageHilight === this.currentPage ? 'brand' : 'neutral';
    }
}
------------------------------

       set casesFiltered(value) {
        this._casesFiltered = value;
        this.paginatedCasesMap = this.createPaginationMap(value); // Create a map for paginated data
        this.currentPage = 1; // Initialize to the first page
        this.updatePaginationState(); // Update the pagination state
    }

    createPaginationMap(data) {
        const itemsPerPage = 10; // Number of items per page
        const paginatedMap = new Map();
        const totalPages = Math.ceil(data.length / itemsPerPage);

        for (let i = 0; i < totalPages; i++) {
            const start = i * itemsPerPage;
            const end = start + itemsPerPage;
            paginatedMap.set(i + 1, data.slice(start, end));
        }

        return paginatedMap;
    }

    updatePaginationState() {
        const currentPageData = this.paginatedCasesMap.get(this.currentPage) || [];
        this.processedCases = this.preprocessTableData(currentPageData); // Preprocess data for the table
       // this.isPreviousDisabled = this.currentPage === 1;
       // this.isNextDisabled = this.currentPage === this.paginatedCasesMap.size;
    }
    
    handlePrevious() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updatePaginationState();
        }
    }

    handleNext() {
        if (this.currentPage < this.paginatedCasesMap.size) {
            this.currentPage++;
            this.updatePaginationState();
        }
    }

    handlePageClick(event) {
        const pageNumber = event.detail;
        this.currentPage = pageNumber;
        this.updatePaginationState();
    }
