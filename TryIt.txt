
    1: { bool: 'enableBydefultFirstScreen' , value: 'valuesFromFirstScreen'},
    2: { bool: 'enableReceiptScreen' , value: 'valuesFromReceiptScreen'},
    3: { bool: 'enableExpenseDetailsScreen', value: 'valuesFromExpenseDetailsScreen' }
};
const showWithOutReceiptScreenCategories = {
    1: { bool: 'enableBydefultFirstScreen' , value: 'valuesFromFirstScreen'},
    2: { bool: 'enableExpenseDetailsScreen', value: 'valuesFromExpenseDetailsScreen' }
};
export default class Psp_AddExpense_LWCComponent extends LightningElement {
    blueCrossIcon = `${myResource}/icons/BlueCrossIcon.svg`;

    @track currentScreenIndex =1;
    @track enableReceiptScreen =false;
    @track enableBydefultFirstScreen =false;
    @track enableExpenseDetailsScreen =false;
    @track selectedExpenseCategory ='Airline Fees';
    @track flowScreens = 
    {
        'Airline Fees' : showReceiptScreenCategories,
        'Car Rental' : showReceiptScreenCategories,
        'Hotel Fees' : showReceiptScreenCategories,
        'Internet/Online' : showReceiptScreenCategories,
        'Laundry' : showReceiptScreenCategories,
        'Long Term Public Transportation (Rail/Bus)' : showReceiptScreenCategories,
        'Meals and Supplies' : showReceiptScreenCategories,
        'Miscellaneous' : showReceiptScreenCategories,
        'Non Reimbursable Expense' : showReceiptScreenCategories,
        'Parking' : showReceiptScreenCategories,
        'Personal Car Expenses' : showReceiptScreenCategories,
        'Personal Car Mileage' : showWithOutReceiptScreenCategories,
        'Public Transport':showReceiptScreenCategories,
        'Taxi or Ride Share': showReceiptScreenCategories,
        'Tips/Gratuities': showWithOutReceiptScreenCategories,
        'Tolls': showReceiptScreenCategories
    }

    isNewExpenseModalOpen =false;
    connectedCallback(){
        this.enableBydefultFirstScreen =true;
    }

    handleChange(event) {
        const fieldName = event.target.dataset.label;
        const value = event.target.value;
        console.log('value'+value);
        switch(fieldName) {
            case 'Expense Category':
                this.selectedExpenseCategory = value;
        break;
        }
    }

    openAddExpense(){
        this.isNewExpenseModalOpen =true;
    }

    handleClose(){
        this.isNewExpenseModalOpen =false;
    }

    @track showNextBtn = false;
    @track showBackBtn =false;
    @track enableNextBtn =false;
    @track enableBackBtn = false;
    handleNext(){
        console.log('Handling Next in parent');
        this.closeScreens();
        this.currentScreenIndex ++;
        this[this.flowScreens[this.selectedExpenseCategory][this.currentScreenIndex].bool] = true;
    }

    // Disable all screens by default
    closeScreens(){
        for(let item in this.flowScreens[this.selectedExpenseCategory]){
            this[this.flowScreens[this.selectedExpenseCategory][item].bool] = false;
         }
            /*for (let category in this.flowScreens) {
                for (let index in this.flowScreens[category]) {
                  this.flowScreens[category][index].bool = false;
                }
              }*/
              
    }:  <!--Footer-->
            <div class="slds-modal__footer">
                <div class="adjustFooterBtn">
                    <c-psp_-custom-screen-footer_-l-w-c-component onnext={handleNext} back-button-name= "Previous" show-back ="true" show-next="true" next-button-name="Next"></c-psp_-custom-screen-footer_-l-w-c-component>
                </div>
            </div>: footer comp:     @api nextButtonName;
    @api backButtonName;
    @api showNext =false;
    @api showBack =false;

    connectedCallback(){}
    handleNext(){
        console.log('Clicked Next');
        this.dispatchEvent(new CustomEvent(('next')));
    }

    handleBack(){
        console.log('Clicked back');
        this.dispatchEvent(new CustomEvent(('back')));
    }:<template>
    <div class="">
        <template if:true={showBack}>
            <button title={backButtonName} onclick={handleBack} class="slds-button slds-button_brand my-save-btn-white">{backButtonName}</button>
        </template>
        <template if:true={showNext}>
            <button title={nextButtonName} onclick={handleNext} class="slds-button slds-button_brand my-save-btn">{nextButtonName}</button>
        </template>
    </div>
</template>
