import { LightningElement, api, track } from 'lwc';

export default class PspOutOfSpecSurveyLWCComp extends LightningElement {
  @api caseId = '';
  @api surveyType = '';
  @api questions = [];

  @track answers = [];
  @track _isNextDisabled = true;
  @track currentScreen = 1;

  get isScreen1() {
    return this.currentScreen === 1;
  }

  get isScreen2() {
    return this.currentScreen === 2;
  }

  get isScreen3() {
    return this.currentScreen === 3;
  }

  @track yesButtonClass = 'slds-button';
  @track noButtonClass = 'slds-button';

  @track screen1_OnYes = false;
  @track screen1_OnNo = false;
  @track screen1_OnYes_value = '';
  @track screen1_OnNo_value = '';

  handleResponse(event) {
    const response = event.currentTarget.dataset.response;
    const apiName = event.currentTarget.dataset.question;
    const questionLabel = event.currentTarget.label || ''; // fallback if label not set

    // Handle UI styling and flags
    switch (response) {
      case 'Yes':
        this.yesButtonClass = 'slds-button slds-button_brand';
        this.noButtonClass = 'slds-button';

        this.screen1_OnYes = true;
        this.screen1_OnYes_value = response;

        this.screen1_OnNo = false;
        this.screen1_OnNo_value = '';
        break;

      case 'No':
        this.yesButtonClass = 'slds-button';
        this.noButtonClass = 'slds-button slds-button_brand';

        this.screen1_OnNo = true;
        this.screen1_OnNo_value = response;

        this.screen1_OnYes = false;
        this.screen1_OnYes_value = '';
        break;

      default:
        this.yesButtonClass = 'slds-button';
        this.noButtonClass = 'slds-button';
    }

    // Prepare answer object
    const UniqueId = `${this.surveyType}_${this.caseId}_${apiName}`;
    const answerObj = {
      UniqueId,
      label: questionLabel,
      value: response
    };

    // Check if answer already exists
    const existingIndex = this.answers.findIndex(ans => ans.UniqueId === UniqueId);
    if (existingIndex !== -1) {
      this.answers[existingIndex] = answerObj; // update existing
    } else {
      this.answers.push(answerObj); // add new
    }

    console.log('Answers:', JSON.stringify(this.answers));
  }

  handleDateChange(event) {
    const apiName = event.currentTarget.dataset.question;
    const questionLabel = ''; // add data-label if needed
    const value = event.detail.value;
    const UniqueId = `${this.surveyType}_${this.caseId}_${apiName}`;

    const answerObj = {
      UniqueId,
      label: questionLabel,
      value
    };

    const existingIndex = this.answers.findIndex(ans => ans.UniqueId === UniqueId);
    if (existingIndex !== -1) {
      this.answers[existingIndex] = answerObj;
    } else {
      this.answers.push(answerObj);
    }

    console.log('Date Change Answers:', JSON.stringify(this.answers));
  }

  handleNext() {
    // Your next screen logic here
    console.log('Proceeding to next screen...');
  }
}

'<template if:true={isScreen1}>
  <lightning-card title="Is the patient aware of the exceptional release?*">
    <div class="slds-button-group" role="group">
      <lightning-button
        label="Yes"
        data-response="Yes"
        data-question="Q1"
        class={yesButtonClass}
        onclick={handleResponse}>
      </lightning-button>
      <lightning-button
        label="No"
        data-response="No"
        data-question="Q1"
        class={noButtonClass}
        onclick={handleResponse}>
      </lightning-button>
    </div>

    <template if:true={screen1_OnYes}>
      <div>When did the conversation occur between the patient and a member of the health care team?*</div>
      <lightning-input 
        type="date"
        data-question="Q2"
        onchange={handleDateChange}>
      </lightning-input>
    </template>

    <template if:true={screen1_OnNo}>
      <div>When should we follow up to confirm the patientâ€™s awareness?*</div>
      <lightning-input 
        type="date"
        data-question="Q2"
        onchange={handleDateChange}>
      </lightning-input>
    </template>
  </lightning-card>
</template>
