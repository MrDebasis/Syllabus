 @AuraEnabled(cacheable=false)
    public static void saveRecord(Map<String, Object> payload) {
        try {
            // Extract recordId, objectApiName, fieldName, and updatedValue from the payload
            String recordId = (String) payload.get('recordId');
            String objectApiName = (String) payload.get('objectApiName');
            String fieldName = (String) payload.get('fieldName');
            Object updatedValue = payload.get('updatedValue');

            System.debug('Received Payload: ' + payload);
            System.debug('RecordId: ' + recordId + ', ObjectApiName: ' + objectApiName + ', FieldName: ' + fieldName + ', UpdatedValue: ' + updatedValue);

            // Get SObject Type dynamically from the objectApiName
            SObjectType sObjectType = Schema.getGlobalDescribe().get(objectApiName);
            if (sObjectType == null) {
                throw new IllegalArgumentException('Invalid objectApiName: ' + objectApiName);
            }

            SObject recordToUpdate = sObjectType.newSObject(recordId);
            Map<String, Schema.SObjectField> fieldMap = sObjectType.getDescribe().fields.getMap();

            // Ensure that the field exists
            if (!fieldMap.containsKey(fieldName)) {
                throw new IllegalArgumentException('Field does not exist: ' + fieldName);
            }

            // Update the field based on its type
            Schema.SObjectField field = fieldMap.get(fieldName);
            Schema.DisplayType fieldType = field.getDescribe().getType();

            if (updatedValue == null) {
                throw new IllegalArgumentException('Updated value cannot be null.');
            }

            switch on fieldType {
                when DATE {
                    recordToUpdate.put(fieldName, Date.valueOf((String) updatedValue));
                }
                when DATETIME {
                    recordToUpdate.put(fieldName, DateTime.valueOf((String) updatedValue));
                }
                when BOOLEAN {
                    recordToUpdate.put(fieldName, Boolean.valueOf((String) updatedValue));
                }
                when INTEGER {
                    recordToUpdate.put(fieldName, Integer.valueOf((String) updatedValue));
                }
                when DOUBLE {
                    recordToUpdate.put(fieldName, Double.valueOf((String) updatedValue));
                }
                when CURRENCY {
                    recordToUpdate.put(fieldName, Decimal.valueOf((String) updatedValue));
                }
                when else {
                    recordToUpdate.put(fieldName, updatedValue);
                }
            }

            // Update the record
            update recordToUpdate;

        } catch (Exception e) {
            System.debug('Error updating record: ' + e.getMessage());
            throw new AuraHandledException('Error updating record: ' + e.getMessage());
        }
    }

 @track editedValues = {}; // Stores temp edits
    handleRowAction(event) {
        const rowId = event.target.dataset.id;
        this.processedCases = this.processedCases.map(row => ({
            ...row,
            isExpanded: row.Id === rowId ? !row.isExpanded : row.isExpanded,
            showContent: row.Id === rowId ? !row.showContent : row.showContent
        }));
    }
    
    handleEditClick(event) {
        const rowId = event.target.dataset.id;
        const field = event.target.dataset.field;

        this.processedCases = this.processedCases.map(row => {
            if (row.Id === rowId) {
                return {
                    ...row,
                    isEditing: true, // Set row to editing mode
                    detailRowKeyForSaveAndCancel: `${row.Id}-save-cancel`, // Add key for Save and Cancel row
                    columns: row.columns.map(col => ({
                        ...col,
                        isEditing: col.field === field
                    }))
                };
            }
            return {
                ...row,
                isEditing: false, // Ensure other rows are not in editing mode
                detailRowKeyForSaveAndCancel: null, // Clear Save and Cancel row key for other rows
                columns: row.columns.map(col => ({
                    ...col,
                    isEditing: false
                }))
            };
        });
    }
    
    handleInputChange(event) {
        const rowId = event.target.dataset.id;
        const field = event.target.dataset.field;
        const value = event.target.value;
    
        if (!this.editedValues[rowId]) {
            this.editedValues[rowId] = {};
        }
        this.editedValues[rowId][field] = value;
    }
    
    @track showSpinner = false;
    async handleSave(event) {
        this.showSpinner = true;
        const rowId = event.target.dataset.id;  // Get recordId from the event
        // const objectName = event.target.dataset.obj; 

        const updatedRow = this.processedCases.find(row => row.Id === rowId);
        if (!updatedRow) {
            console.warn(`No row found with rowId: ${rowId}`);
            this.showSpinner = false;
            return;
        }

        const updatedValues = this.editedValues[rowId];

        if(!updatedValues || Object.keys(updatedValues).length === 0) {
            this.handleCancel(event);
            this.showSpinner = false;
            this.showToastAfterSaving('success', `Record saved successfully.`);
            return;
        }

        // Prepare the payload for the Apex method
        const payload = {
            recordId: rowId,
            objectApiName: updatedRow.objectApiName || 'Case',  // Use the objectApiName dynamically
            fieldName: Object.keys(updatedValues)[0],  // Get the first field to update (can be expanded to multiple fields)
            updatedValue: updatedValues[Object.keys(updatedValues)[0]]  // Get the updated value
        };

        console.log('Payload to send to backend:', JSON.stringify(payload));

        try {
            // Call Apex method to update the record
            await saveRecord({ payload });

            console.log(`Record saved successfully.`);

            this.showSpinner = false;
            // this.updateNextActionHighlight();
            this.showToastAfterSaving('success', `Record saved successfully.`); 
            // Update the UI after successful save
            this.processedCases = this.processedCases.map(row => {
                if (row.Id === rowId) {
                    let updatedRow = {
                        ...row,
                        isEditing: false,  // Exit editing mode
                        detailRowKeyForSaveAndCancel: null,  // Clear Save/Cancel row key
                        columns: row.columns.map(col => ({
                            ...col,
                            value: updatedValues[col.field] ?? col.value,  // Update column value with the new data
                            isEditing: false,  // Reset editing state
                            cellClass: col.field === Object.keys(updatedValues)[0] ? '' : col.cellClass // Reset cellClass only for the updated field
                        }))
                    };
                    updatedRow = this.updateNextActionStyling(updatedRow);
                    return updatedRow;
                }
                return row;
            });
            // Remove the edited values after save
            delete this.editedValues[rowId];

        } catch (error) {
            this.showSpinner = false;
            this.showToastAfterSaving('error', `Error saving record. Details: ${
                error.message || (error.body && error.body.message) || JSON.stringify(error)
            }`);
            console.error(`Error saving record with rowId: ${rowId}`, error);
        }
    }

  <div class="table-edit-container">
            <table class="slds-table slds-table_bordered slds-table_col-bordered">
                <thead>
                    <tr>
                        <th scope="col"></th> <!-- Toggle icon column -->
                        <template for:each={columnConfig} for:item="column">
                            <template if:true={column.visible}>
                                <th key={column.column_id} scope="col" class={column.ColumnWidth}>
                                    <div class="slds-grid slds-grid_vertical-align-center">
                                        <span class="font-style3 slds-m-right_xx-small">{column.label}</span>
                                        <template if:true={column.isSortingApplied}>
                                            <template if:true={column.IsAscsortDirection}>
                                                <lightning-button-icon
                                                    icon-name="utility:arrowup"
                                                    variant="bare"
                                                    size="small"
                                                    alternative-text="Sort Ascending"
                                                    data-column-id={column.column_id}
                                                    onclick={handleSort}>
                                                </lightning-button-icon>
                                            </template>
                                            <template if:true={column.IsDescsortDirection}>
                                                <lightning-button-icon
                                                    icon-name="utility:arrowdown"
                                                    variant="bare"
                                                    size="small"
                                                    alternative-text="Sort Descending"
                                                    data-column-id={column.column_id}
                                                    onclick={handleSort}>
                                                </lightning-button-icon>
                                            </template>
                                        </template>
                                    </div>
                                </th>
                            </template>
                        </template>
                    </tr>
                </thead>
                <tbody>
                    <template for:each={processedCases} for:item="row">
                        <tr key={row.Id}>
                            <td>
                                <template if:true={row.isExpanded}>
                                    <lightning-button-icon
                                        icon-name="utility:dash"
                                        variant="bare"
                                        alternative-text="Collapse Details"
                                        data-id={row.Id}
                                        onclick={handleRowAction}>
                                    </lightning-button-icon>
                                </template>
                                <template if:false={row.isExpanded}>
                                    <lightning-button-icon
                                        icon-name="utility:add"
                                        variant="bare"
                                        alternative-text="Expand Details"
                                        data-id={row.Id}
                                        onclick={handleRowAction}>
                                    </lightning-button-icon>
                                </template>
                            </td>
                            <template for:each={row.columns} for:item="column">
                                <td key={column.field} class={column.cellClass}>
                                    <template if:true={column.isEditable}>
                                        <template if:true={column.isEditing}>
                                            <template if:true={column.isString}>
                                                <lightning-textarea
                                                    value={column.value}
                                                    data-id={row.Id}
                                                    data-field={column.field}
                                                    onchange={handleInputChange}
                                                    variant="label-hidden"
                                                >
                                                </lightning-textarea>
                                            </template>
                                            <template if:true={column.isNumber}>
                                                <lightning-input
                                                    type="number"
                                                    value={column.value}
                                                    data-id={row.Id}
                                                    data-field={column.field}
                                                    onchange={handleInputChange}
                                                    variant="label-hidden"
                                                >
                                                </lightning-input>
                                            </template>
                                            <template if:true={column.isDate}>
                                                <lightning-input
                                                    type="date"
                                                    value={column.value}
                                                    data-id={row.Id}
                                                    data-field={column.field}
                                                    onchange={handleInputChange}
                                                    variant="label-hidden"
                                                    >
                                                </lightning-input>
                                            </template>
                                            <template if:true={column.isPicklist}>
                                                <lightning-combobox
                                                    value={column.value}
                                                    data-id={row.Id}
                                                    data-field={column.field}
                                                    options={column.options}
                                                    onchange={handleInputChange}
                                                    variant="label-hidden"
                                                >
                                                </lightning-combobox>
                                            </template>
                                        </template>
                                    </template>
                                    <template if:false={column.isEditing}>
                                        <template if:true={column.isHyperlink}>
                                            <lightning-formatted-rich-text class="link-style" value={column.value}></lightning-formatted-rich-text>
                                        </template>
                                        <template if:false={column.isHyperlink}>
                                            <div class="slds-grid slds-grid_align-spread slds-grid_vertical-align-center">
                                                <lightning-formatted-rich-text class="editable-cell" value={column.value}></lightning-formatted-rich-text>
                                                <!-- <span class="editable-cell">{column.value}</span>   -->
                                                <template if:true={column.isEditable}>
                                                    <lightning-button-icon
                                                        icon-name="utility:edit"
                                                        variant="bare"
                                                        class="slds-float_right"
                                                        alternative-text="Edit"
                                                        data-id={row.Id}
                                                        data-field={column.field}
                                                        onclick={handleEditClick}>
                                                    </lightning-button-icon>
                                                </template>                                              
                                            </div>
                                        </template>
                                    </template>
                                </td>
                            </template>
                        </tr>
                        <template if:true={row.isEditing}>
                            <tr key={row.detailRowKeyForSaveAndCancel} class="save-cancel-row">
                                <td colspan={}>
                                    <div class="">
                                        <lightning-button
                                            label="Save"
                                            data-id={row.Id}
                                            onclick={handleSave}>
                                        </lightning-button>
                                        <lightning-button
                                            label="Cancel"
                                            data-id={row.Id}
                                            onclick={handleCancel}
                                            class="slds-m-left_small">
                                        </lightning-button>
                                    </div>
                                </td>
                            </tr>
                        </template>
                        <template if:true={row.showContent}>
                            <tr key={row.detailRowKey} class="case-detail-row">
                                <td colspan="1">
                                    <div>
                                       
                                       <!-- <c-dynamic-datatable-debasis record-id={row.Id}></c-dynamic-datatable-debasis>-->
                                        <c-psp_-p-s-s-tracker-data-table-l-w-c-comp case-id={row.Id} onspin={loadSpinner}></c-psp_-p-s-s-tracker-data-table-l-w-c-comp>
                                    </div>
                                </td>
                            </tr>
                        </template>
                    </template>
                </tbody>
            </table>
        </div>
