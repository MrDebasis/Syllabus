
global class LoginLogoutMilestoneBatch implements Database.Batchable<sObject> {
    
    global Database.QueryLocator start(Database.BatchableContext bc) {
        return Database.getQueryLocator([SELECT Platform, LoginKey, UserId, CreatedDate FROM LoginEvent WHERE EventDate = TODAY]);
    }
    
    global void execute(Database.BatchableContext bc, List<sObject> scope) {
        
        Set<Id> userIds = new Set<Id>();
        for (LoginEvent event : (List<LoginEvent>) scope) {
            userIds.add(event.UserId);
        }
        
        Map<Id, User> userIdToAccountTypeMap = new Map<Id, User>([
            SELECT Id, Account.AccountType__c 
            FROM User 
            WHERE Id IN :userIds AND 
            UserPortalType__c = 'Patient Portal' AND 
            IsPortalEnabled = true AND 
            IsActive = true
        ]);
        
        
        List<PatientSupportMilestone__c> milestones = new List<PatientSupportMilestone__c>();
        for (LoginEvent event : (List<LoginEvent>) scope) {
            if(event.Status!=null && event.Status.equals('Success')){
                
                PatientSupportMilestone__c milestone = new PatientSupportMilestone__c();
                milestone.MilestoneType__c = 'Login';
                milestone.LoginKey__c = event.LoginKey;                
                milestone.SubmittedBy__c =event.UserId;
                milestone.LoginTime__c = event.CreatedDate;
                milestone.RecordTypeId = '012KS000000PG52YAG';
                milestone.Type__c =userIdToAccountTypeMap.get(event.UserId)?.Account.AccountType__c;
                milestone.DeviceType__c = event.Platform != null && (event.Platform == 'iOS' || event.Platform == 'Android') ? 'MOBILE' : 'DESKTOP';
                
                milestones.add(milestone);
            }
        }
        insert milestones;
    }
    
    global void finish(Database.BatchableContext bc) {
        
        Set<Id> userIds = new Set<Id>();
        List<LogoutEvent> logoutEvents = new List<LogoutEvent>();
                
        for (LogoutEvent event : [SELECT LoginKey, UserId, CreatedDate 
                                  FROM LogoutEvent 
                                  WHERE EventDate = TODAY]) {
                                      userIds.add(event.UserId);
                                      logoutEvents.add(event);
                                  }
        List<PatientSupportMilestone__c> milestones = [SELECT Id, LoginKey__c, SubmittedBy__c, LogoutTime__c, CreatedDate 
                                                       FROM PatientSupportMilestone__c 
                                                       WHERE CreatedDate = TODAY AND 
                                                       MilestoneType__c = 'Login' AND 
                                                       SubmittedBy__c IN :userIds];
        
        Map<String, PatientSupportMilestone__c> loginKeyToMilestoneMap = new Map<String, PatientSupportMilestone__c>();
        for (PatientSupportMilestone__c milestone : milestones) {
            loginKeyToMilestoneMap.put(milestone.LoginKey__c, milestone);
        }
        
        //Updateing the LogoutTime__c field on the milestones based on the LogoutEvent records
        for (LogoutEvent event : logoutEvents) {
            PatientSupportMilestone__c milestone = loginKeyToMilestoneMap.get(event.LoginKey);
            if (milestone != null) {
                    milestone.LogoutTime__c = event.CreatedDate;
                } else {
                    milestone.LogoutTime__c = milestone.LoginTime__c.addMinutes(30);
            }
        }
        update milestones;
    }
    
    
}18:45:10:015 EXCEPTION_THROWN [4]|System.UnexpectedException: The requested operation is not supported by this SObject
