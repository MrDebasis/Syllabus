import { LightningElement, api } from 'lwc';
import getObjectTables from '@salesforce/apex/PSSMetadataDynamicTableController.getObjectTables';

export default class DynamicTableComponent extends LightningElement {
    @api caseId = '';
    tables = {};
    loading = false;
    error;

    connectedCallback() {
        this.loadTables();
    }

    async loadTables() {
        this.loading = true;
        this.error = null;

        try {
            const result = await getObjectTables({ caseId: this.caseId });
            console.log('Apex result:', JSON.stringify(result));
            this.populateTables(result);
        } catch (e) {
            this.error = e.body?.message || e.message;
            console.error('Error loading tables:', e);
        } finally {
            this.loading = false;
        }
    }

    populateTables(result) {
        this.tables = {};

        for (const [objectName, wrapper] of Object.entries(result)) {
            let recordsArray = Object.values(wrapper.data);

            // Add extra fields if needed for specific tables
            if (objectName === 'HealthCloudGA__ContactContactRelation__c') {
                recordsArray = recordsArray.map(record => ({
                    ...record,
                    accountUrl: record.Account__c
                        ? `/lightning/r/Account/${record.Account__c}/view`
                        : null
                }));
            } else if (objectName === 'echosign_dev1__SIGN_Agreement__c') {
                recordsArray = recordsArray.map(record => ({
                    ...record,
                    tripUrl: record.Trip__c
                        ? `/lightning/r/Trip__c/${record.Trip__c}/view`
                        : null,
                    agreementUrl: record.Id
                        ? `/lightning/r/echosign_dev1__SIGN_Agreement__c/${record.Id}/view`
                        : null
                }));
            }

            this.tables[objectName] = {
                columns: this.buildLightningColumns(wrapper.columns, objectName),
                data: recordsArray,
                draftValues: [],
                sortedBy: '',
                sortedDirection: 'asc'
            };
        }
    }

    buildLightningColumns(columns, objectName) {
        return columns
            .filter(col => col.visible)
            .sort((a, b) => {
                if (a.PSSViewColumnOrder__c != null && b.PSSViewColumnOrder__c != null) {
                    return a.PSSViewColumnOrder__c - b.PSSViewColumnOrder__c;
                }
                return a.column_id.localeCompare(b.column_id);
            })
            .map(col => {
                let type = 'text';
                let typeAttributes;
                const dataType = col.data_type?.toLowerCase() || 'string';
                const field = col.column_id.toLowerCase();
                let actualField = col.column_id; // actual data field (used for sorting)

                // Special URL Columns
                if (objectName === 'HealthCloudGA__ContactContactRelation__c' && col.column_id === 'ContactName__c') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'ContactName__c' },
                        target: '_blank'
                    };
                    return {
                        label: col.label,
                        fieldName: 'accountUrl',
                        type,
                        typeAttributes,
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        sortField: 'ContactName__c' // custom field used for sorting
                    };
                }

                if (objectName === 'echosign_dev1__SIGN_Agreement__c' && col.column_id === 'TripName__c') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'TripName__c' },
                        target: '_blank'
                    };
                    return {
                        label: col.label,
                        fieldName: 'tripUrl',
                        type,
                        typeAttributes,
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        sortField: 'TripName__c'
                    };
                }

                if (objectName === 'echosign_dev1__SIGN_Agreement__c' && col.column_id === 'Name') {
                    type = 'url';
                    typeAttributes = {
                        label: { fieldName: 'Name' },
                        target: '_blank'
                    };
                    return {
                        label: col.label,
                        fieldName: 'agreementUrl',
                        type,
                        typeAttributes,
                        editable: col.editable,
                        sortable: col.isSortingApplied,
                        sortField: 'Name'
                    };
                }

                // Generic types
                switch (dataType) {
                    case 'number':
                        type = 'number';
                        break;
                    case 'date':
                    case 'datetime':
                        type = 'date';
                        break;
                    case 'picklist':
                        type = 'picklist';
                        if (col.picklistValues) {
                            const options = col.picklistValues.split(';').map(val => ({
                                label: val.trim(),
                                value: val.trim()
                            }));
                            typeAttributes = {
                                options,
                                placeholder: 'Select',
                                value: { fieldName: col.column_id },
                                context: { fieldName: 'Id' }
                            };
                        }
                        break;
                    default:
                        if (field.includes('phone')) {
                            type = 'phone';
                        } else {
                            type = 'text';
                        }
                }

                return {
                    label: col.label,
                    fieldName: col.column_id,
                    type,
                    typeAttributes,
                    editable: col.editable,
                    sortable: col.isSortingApplied,
                    sortField: col.column_id
                };
            });
    }

    // Getters for each object table
    get caseTable() {
        return this.tables['Case'];
    }

    get getAgreement() {
        return this.tables['echosign_dev1__SIGN_Agreement__c'];
    }

    get associatedContact() {
        return this.tables['HealthCloudGA__ContactContactRelation__c'];
    }

    get contactTable() {
        return this.tables['Contact'];
    }

    handleSave(event) {
        const objectName = event.target.dataset.obj;
        const draftValues = event.detail.draftValues;

        this.tables[objectName].data = this.tables[objectName].data.map(row => {
            const draft = draftValues.find(d => d.Id === row.Id);
            return draft ? { ...row, ...draft } : row;
        });

        this.tables[objectName].draftValues = [];
    }

    handleSort(event) {
        const { fieldName, sortDirection } = event.detail;
        const objectName = event.target.dataset.obj;

        const columnConfig = this.tables[objectName].columns.find(col => col.fieldName === fieldName);
        const sortField = columnConfig?.sortField || fieldName;

        let sortedData = [...this.tables[objectName].data];
        sortedData.sort((a, b) => {
            const aVal = a[sortField] ?? '';
            const bVal = b[sortField] ?? '';
            return sortDirection === 'asc'
                ? aVal > bVal ? 1 : -1
                : aVal < bVal ? 1 : -1;
        });

        this.tables[objectName].data = sortedData;
        this.tables[objectName].sortedBy = fieldName;
        this.tables[objectName].sortedDirection = sortDirection;
    }
}
