import { LightningElement, api, track } from 'lwc';

export default class Psp_PSSTrackerPaginationLWCComp extends LightningElement {
    @api currentPage;
    @api totalRecords;
    @api pageSize;
    @api validPages = [];

    @track pageButtons = [];

    get totalPages() {
        return Math.ceil(this.totalRecords / this.pageSize);
    }

    get isPreviousDisabled() {
        return this.currentPage === 1;
    }

    get isNextDisabled() {
        return this.currentPage === this.totalPages;
    }

    renderedCallback() {
        this.generatePageButtons();
    }

    generatePageButtons() {
        const maxVisiblePages = 5;
        let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = startPage + maxVisiblePages - 1;

        if (endPage > this.totalPages) {
            endPage = this.totalPages;
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        const pages = [];
        for (let i = startPage; i <= endPage; i++) {
            pages.push({
                page: i,
                disabled: !this.validPages.includes(i),
                variant: i === this.currentPage ? 'brand' : 'neutral'
            });
        }

        this.pageButtons = pages;
    }

    handlePreviousClick() {
        this.dispatchEvent(new CustomEvent('previous'));
    }

    handleNextClick() {
        this.dispatchEvent(new CustomEvent('next'));
    }

    handlePageClick(event) {
        const page = parseInt(event.target.dataset.page, 10);
        this.dispatchEvent(new CustomEvent('pagechange', { detail: page }));
    }
}


<template>
    <div class="pagination slds-m-top_medium">
        <lightning-button 
            disabled={isPreviousDisabled}
            onclick={handlePreviousClick}
            label="Previous">
        </lightning-button>

        <template for:each={pageButtons} for:item="btn">
            <lightning-button
                key={btn.page}
                class="slds-m-horizontal_xx-small"
                data-page={btn.page}
                onclick={handlePageClick}
                disabled={btn.disabled}
                variant={btn.variant}
                label={btn.page}>
            </lightning-button>
        </template>

        <lightning-button 
            disabled={isNextDisabled}
            onclick={handleNextClick}
            label="Next">
        </lightning-button>
    </div>
</template>
====================================================================

import { LightningElement, track } from 'lwc';

export default class YourParentComponent extends LightningElement {
    @track currentPage = 1;
    @track casesFiltered = [];
    @track paginatedCasesMap = new Map();
    @track processedCases = [];

    get validPages() {
        return [...this.paginatedCasesMap.entries()]
            .filter(([page, records]) => records.length > 0)
            .map(([page]) => page);
    }

    set casesFiltered(value) {
        this._casesFiltered = value;
        this.paginatedCasesMap = this.createPaginationMap(value);
        this.currentPage = 1;
        this.updatePaginationState();
    }

    createPaginationMap(data) {
        const itemsPerPage = 10;
        const map = new Map();
        const totalPages = Math.ceil(data.length / itemsPerPage);

        for (let i = 0; i < totalPages; i++) {
            const start = i * itemsPerPage;
            const end = start + itemsPerPage;
            map.set(i + 1, data.slice(start, end));
        }

        return map;
    }

    updatePaginationState() {
        const data = this.paginatedCasesMap.get(this.currentPage) || [];
        this.processedCases = this.preprocessTableData(data);
    }

    handlePrevious() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updatePaginationState();
        }
    }

    handleNext() {
        if (this.currentPage < this.paginatedCasesMap.size) {
            this.currentPage++;
            this.updatePaginationState();
        }
    }

    handlePageClick(event) {
        this.currentPage = event.detail;
        this.updatePaginationState();
    }

    preprocessTableData(data) {
        // Modify this as needed
        return data;
    }
}


<c-psp_-p-s-s-tracker-pagination-l-w-c-comp
    current-page={currentPage}
    total-records={casesFiltered.length}
    page-size="10"
    valid-pages={validPages}
    onprevious={handlePrevious}
    onnext={handleNext}
    onpagechange={handlePageClick}>
</c-psp_-p-s-s-tracker-pagination-l-w-c-comp>
