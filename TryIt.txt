public class TestDebasis {

    private static List<Reimbursement__c> getReimbursement() {
        return [
            SELECT Id, 
                   CaseIDNumber__r.Status, 
                   CreatedFromTrip__r.LookuptoPatientCaregiver__c, 
                   CreatedFromTrip__r.PatientOrCaregiverTrip__c,
                   CreatedFromTrip__r.ProgramType__c, 
                   ProgramType__c, 
                   PatientPortalsPortalExpense__c, 
                   CaseIDNumber__c
            FROM Reimbursement__c 
            WHERE PatientPortalsPortalExpense__c = false 
              AND CreatedFromTrip__r.ProgramType__c = 'MYCARVKTI' 
              AND ProgramType__c = 'MYCARVKTI' 
              AND CaseIDNumber__r.Status != 'Closed' 
              AND CaseIDNumber__c != null
        ];
    }

    private static void shareRecordsForPatientAndLAR() {
        Map<String, String> reimbursementIdWithAccountIdMap = new Map<String, String>();
        Set<String> distinctCaseIds = new Set<String>();
        Map<String, List<String>> caseIdWithReimbursementIds = new Map<String, List<String>>();
        Map<String, List<String>> caseIdWithAssociatedContacts = new Map<String, List<String>>();

        // Prepare reimbursement-related mappings
        for (Reimbursement__c reim : getReimbursement()) {
            if (reim.CreatedFromTrip__r.LookuptoPatientCaregiver__c != null) {
                reimbursementIdWithAccountIdMap.put(reim.Id, reim.CreatedFromTrip__r.LookuptoPatientCaregiver__c);
                distinctCaseIds.add(reim.CaseIDNumber__c);
            }

            if (!caseIdWithReimbursementIds.containsKey(reim.CaseIDNumber__c)) {
                caseIdWithReimbursementIds.put(reim.CaseIDNumber__c, new List<String>());
            }
            caseIdWithReimbursementIds.get(reim.CaseIDNumber__c).add(reim.Id);
        }

        // Prepare user IDs for reimbursement sharing
        Map<String, String> reimbursementIdWithUserIdMap = new Map<String, String>();
        for (User usr : [SELECT Id, AccountId FROM User WHERE AccountId IN :reimbursementIdWithAccountIdMap.values()]) {
            String accountId = usr.AccountId;
            reimbursementIdWithUserIdMap.put(reimbursementIdWithAccountIdMap.keySet().find(rId -> reimbursementIdWithAccountIdMap.get(rId) == accountId), usr.Id);
        }
        prepareAndInsertShareRecords(reimbursementIdWithUserIdMap);

        // Prepare LAR-related mappings
        for (HealthCloudGA__ContactContactRelation__c contactRelation : [
            SELECT Id, Patient_Support_Case__c 
            FROM HealthCloudGA__ContactContactRelation__c 
            WHERE Patient_Support_Case__c IN :distinctCaseIds
        ]) {
            String caseId = contactRelation.Patient_Support_Case__c;
            if (!caseIdWithAssociatedContacts.containsKey(caseId)) {
                caseIdWithAssociatedContacts.put(caseId, new List<String>());
            }
            caseIdWithAssociatedContacts.get(caseId).add(contactRelation.Id);
        }

        // Prepare LAR sharing records
        List<Reimbursement__Share> reimbursementShares = new List<Reimbursement__Share>();
        for (String caseId : caseIdWithReimbursementIds.keySet()) {
            List<String> reimbursementIds = caseIdWithReimbursementIds.get(caseId);
            List<String> associatedContacts = caseIdWithAssociatedContacts.get(caseId);

            if (associatedContacts != null) {
                for (String contactId : associatedContacts) {
                    for (String reimbursementId : reimbursementIds) {
                        Reimbursement__Share share = new Reimbursement__Share();
                        share.ParentId = reimbursementId;
                        share.AccessLevel = 'Edit';
                        share.RowCause = Schema.Reimbursement__Share.RowCause.Apex__c;
                        share.UserOrGroupId = contactId;
                        reimbursementShares.add(share);
                    }
                }
            }
        }
        insert reimbursementShares;
    }

    private static void prepareAndInsertShareRecords(Map<String, String> reimbursementIdWithUserIdMap) {
        if (reimbursementIdWithUserIdMap.isEmpty()) {
            return;
        }

        List<Reimbursement__Share> reimbursementShares = new List<Reimbursement__Share>();
        for (Reimbursement__c reimbursement : [
            SELECT Id 
            FROM Reimbursement__c 
            WHERE Id IN :reimbursementIdWithUserIdMap.keySet()
        ]) {
            Reimbursement__Share share = new Reimbursement__Share();
            share.ParentId = reimbursement.Id;
            share.AccessLevel = 'Edit';
            share.RowCause = Schema.Reimbursement__Share.RowCause.Apex__c;
            share.UserOrGroupId = reimbursementIdWithUserIdMap.get(reimbursement.Id);
            reimbursementShares.add(share);
        }
        insert reimbursementShares;
    }
}

