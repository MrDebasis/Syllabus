/* ðŸ”´ NEW: Highlight style for future dates */
.highlight-red {
    background-color: #ffdddd;
    color: #b00000;
    font-weight: bold;
}


preprocessTableData(cases) {
    const sortedCases = this.sortTableData(cases, this.columnConfig);

    return sortedCases.map(row => {
        const updatedRow = {
            ...row,
            columns: [],
            showContent: false,
            isExpanded: false,
            detailRowKey: `${row.Id}-details`
        };

        this.columnConfig.forEach(column => {
            if (column.visible) {
                const fieldParts = column.column_id.split('.');
                let fieldValue = row;
                for (const part of fieldParts) {
                    fieldValue = fieldValue ? fieldValue[part] : undefined;
                }

                let value = fieldValue;
                let isHyperlink = false;
                let cellClass = ''; // ðŸ”´ NEW: default class

                // ðŸ”´ NEW: Apply red highlight if date is in the future
                if (column.column_id === 'nextActionDueDate__c' && fieldValue) {
                    const dueDate = new Date(fieldValue);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    if (dueDate > today) {
                        cellClass = 'highlight-red';
                    }
                }

                // Hyperlink logic
                if (column.column_id === 'Account.Name') {
                    value = `${fieldValue}</br><a href="/lightning/r/Case/${row.Id}/view" target="_blank">${row.CaseNumber}</a>`;
                    isHyperlink = true;
                } else if (column.column_id === 'CartCoordinatorName__c') {
                    value = fieldValue;
                    isHyperlink = true;
                } else if (column.column_id === 'TreatmentCenterName__c') {
                    value = `<a href="/lightning/r/Account/${row.TreatmentSite__c}/view" target="_blank">${fieldValue}</a>`;
                    isHyperlink = true;
                }

                updatedRow.columns.push({
                    field: column.column_id.toLowerCase(),
                    label: column.label,
                    value: value,
                    isHyperlink: isHyperlink,
                    dataType: column.data_type,
                    isEditing: false,
                    isEditable: column.editable || false,
                    isString: column.isString || false,
                    isNumber: column.isNumber || false,
                    isDate: column.isDate || false,
                    isPicklist: column.isPicklist || false,
                    options: column.isPicklist ? column.picklist_values.map(value => ({ label: value, value })) : null,
                    cellClass // ðŸ”´ NEW: pass class
                });
            }
        });

        return updatedRow;
    });
}



<template for:each={row.columns} for:item="column">
    <!-- ðŸ”´ CHANGED: Add class={column.cellClass} -->
    <td key={column.field} class={column.cellClass}>
        <template if:true={column.isEditable}>
            <template if:true={column.isEditing}>
                <template if:true={column.isString}>
                    <lightning-textarea
                        value={column.value}
                        data-id={row.Id}
                        data-field={column.field}
                        onchange={handleInputChange}>
                    </lightning-textarea>
                </template>
                <!-- other types omitted for brevity -->
            </template>
        </template>
        <template if:false={column.isEditing}>
            <template if:true={column.isHyperlink}>
                <lightning-formatted-rich-text value={column.value}></lightning-formatted-rich-text>
            </template>
            <template if:false={column.isHyperlink}>
                {column.value}
                <template if:true={column.isEditable}>
                    <lightning-button-icon
                        icon-name="utility:edit"
                        variant="bare"
                        class="slds-float_right"
                        alternative-text="Edit"
                        data-id={row.Id}
                        data-field={column.field}
                        onclick={handleEditClick}>
                    </lightning-button-icon>
                </template>
            </template>
        </template>
    </td>
</template>
