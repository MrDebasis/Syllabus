// pspSurveyLWCComponent.js
import { LightningElement, track } from 'lwc';
import decryptData from '@salesforce/apex/EncryptionService.decrypt';
import getSurveyQuestions from '@salesforce/apex/EncryptionService.getSurveyQuestions';

export default class PspSurveyLWCComponent extends LightningElement {
    @track caseId;
    @track surveyType;
    @track mrnNumber;
    @track orderId;
    @track error;

    @track isApheresisTherapy = false;
    @track isBridgingTherapy = false;
    @track isInfusionAndMonitoringTherapy = false;
    @track isOutOfSpecPatient = false;
    @track isMonitoringExtension = false;

    @track flow = [];
    @track currentScreen = 1;

    connectedCallback() {
        const rawParam = this.getEncryptedParamFromUrl('details');
        if (rawParam) {
            const decoded = decodeURIComponent(rawParam);
            this.callDecrypt(decoded);
        } else {
            this.error = 'No encrypted parameter found in URL';
        }
    }

    getEncryptedParamFromUrl(paramName) {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(paramName);
        } catch (e) {
            console.error('Error parsing URL params:', e);
            return null;
        }
    }

    callDecrypt(encrypted) {
        decryptData({ encryptedBase64: encrypted })
            .then(result => {
                if (result) {
                    this.parseDecryptedString(result);
                }
            })
            .catch(error => {
                this.error = error.body ? error.body.message : error;
                console.error('Decryption failed:', this.error);
            });
    }

    parseDecryptedString(decrypted) {
        const params = new URLSearchParams(decrypted);

        this.caseId = params.get('caseId');
        this.surveyType = params.get('type');
        this.mrnNumber = params.get('mrn');
        this.orderId = params.get('orderId');

        if (this.surveyType) {
            this.triggerSurveyOnType();
        }
    }

    triggerSurveyOnType() {
        switch (this.surveyType) {
            case 'Apheresis':
                this.isApheresisTherapy = true;
                break;
            case 'Bridging':
                this.isBridgingTherapy = true;
                break;
            case 'Infusion and Monitoring':
                this.isInfusionAndMonitoringTherapy = true;
                break;
            case 'Out of Spec Patient':
                this.isOutOfSpecPatient = true;
                break;
            case 'Monitoring Extension':
                this.isMonitoringExtension = true;
                break;
            default:
                console.warn('Unknown survey type:', this.surveyType);
        }
        this.getQuestions();
    }

    getQuestions() {
        getSurveyQuestions({ surveyType: this.surveyType })
            .then(result => {
                this.generateFlow(result);
            })
            .catch(error => {
                console.error('Error loading questions:', error);
            });
    }

    generateFlow(screenMap) {
        this.flow = Object.keys(screenMap).map(key => {
            const screenNo = parseInt(key, 10);
            const questions = screenMap[key].map(q => ({
                ...q,
                isDate: q.type === 'Date',
                isPicklist: q.type === 'Picklist',
                isText: q.type === 'Text'
            }));
            return {
                screenNo,
                buttonName: screenNo === Object.keys(screenMap).length ? 'Submit' : 'Next',
                isNextEnabled: false,
                next: screenNo === Object.keys(screenMap).length ? null : screenNo + 1,
                questions
            };
        });
        this.currentScreen = this.flow[0]?.screenNo || 1;
    }

    handleInputChange(event) {
        const { name, value } = event.target;
        const screen = this.flow.find(f => f.screenNo === this.currentScreen);
        const question = screen.questions.find(q => q.apiName === name);
        question.answer = value;

        screen.isNextEnabled = screen.questions.every(q => !q.required || !!q.answer);
    }

    handleNext() {
        const current = this.flow.find(f => f.screenNo === this.currentScreen);
        if (current.next) {
            this.currentScreen = current.next;
        } else {
            console.log('Survey complete:', this.flow);
        }
    }

    get currentScreenQuestions() {
        return this.flow.find(f => f.screenNo === this.currentScreen)?.questions || [];
    }

    get currentButtonLabel() {
        return this.flow.find(f => f.screenNo === this.currentScreen)?.buttonName || 'Next';
    }

    get isNextEnabled() {
        return this.flow.find(f => f.screenNo === this.currentScreen)?.isNextEnabled || false;
    }
}


<template>
    <div>Order # {orderId}</div>
    <div>MRN # {mrnNumber}</div>

    <template lwc:if={isApheresisTherapy}>
        <div>Apheresis Therapy Survey</div>
    </template>
    <template lwc:if={isBridgingTherapy}>
        <div>Bridging Therapy Survey</div>
    </template>
    <template lwc:if={isInfusionAndMonitoringTherapy}>
        <div>Infusion And Monitoring Survey</div>
    </template>
    <template lwc:if={isOutOfSpecPatient}>
        <div>Out Of Spec Patient Survey</div>
    </template>
    <template lwc:if={isMonitoringExtension}>
        <div>Monitoring Extension Survey</div>
    </template>

    <template for:each={currentScreenQuestions} for:item="question">
        <div key={question.apiName} class="slds-m-vertical_small">
            <label class="slds-form-element__label" for={question.apiName}>{question.label}</label>
            <template lwc:if={question.isDate}>
                <lightning-input
                    type="date"
                    name={question.apiName}
                    value={question.answer}
                    onchange={handleInputChange}
                    required={question.required}>
                </lightning-input>
            </template>
            <template lwc:if={question.isPicklist}>
                <lightning-combobox
                    name={question.apiName}
                    value={question.answer}
                    options={question.options.map(option => ({ label: option, value: option }))}
                    onchange={handleInputChange}
                    required={question.required}>
                </lightning-combobox>
            </template>
            <template lwc:if={question.isText}>
                <lightning-input
                    type="text"
                    name={question.apiName}
                    value={question.answer}
                    onchange={handleInputChange}
                    required={question.required}>
                </lightning-input>
            </template>
        </div>
    </template>

    <div class="slds-m-top_medium">
        <lightning-button
            label={currentButtonLabel}
            onclick={handleNext}
            disabled={!isNextEnabled}>
        </lightning-button>
    </div>
</template>
