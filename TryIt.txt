public static void shareReimbursementForLAR(List<User> lstOfUserRecords) {
    // STEP 1: Check if users are valid Patient Portal Users
    Map<String, User> patientPortalUsersMap = new Map<String, User>();
    Map<String, User> accountIdWithUserMap = new Map<String, User>();
    Map<String, User> contactIdWithUserMap = new Map<String, User>();
    Set<String> setOfAccountIds = new Set<String>();

    if (lstOfUserRecords != null && !lstOfUserRecords.isEmpty()) {
        for (User userRec : lstOfUserRecords) {
            if (userRec.UserPortalType__c == 'Patient Portal' && userRec.IsActive && userRec.Country__c == 'US' && userRec.FederationIdentifier != null) {
                setOfAccountIds.add(userRec.AccountId);
                patientPortalUsersMap.put(userRec.Id, userRec);
                accountIdWithUserMap.put(userRec.AccountId, userRec);
                contactIdWithUserMap.put(userRec.ContactId, userRec);
            }
        }
    }

    // STEP 2: Fetch associated contacts and cases
    Map<String, HealthCloudGA__ContactContactRelation__c> mapOfAccountIdWithAssociatedContact = new Map<String, HealthCloudGA__ContactContactRelation__c>();
    Set<String> setOfCaseIds = new Set<String>();

    if (!contactIdWithUserMap.isEmpty()) {
        for (HealthCloudGA__ContactContactRelation__c associatedContactRec : [
            SELECT ID, HealthCloudGA__RelatedContact__c, Patient_Support_Case__c
            FROM HealthCloudGA__ContactContactRelation__c
            WHERE HealthCloudGA__RelatedContact__c IN :contactIdWithUserMap.keySet()
        ]) {
            String accountId = contactIdWithUserMap.get(associatedContactRec.HealthCloudGA__RelatedContact__c).AccountId;
            mapOfAccountIdWithAssociatedContact.put(accountId, associatedContactRec);
            if (associatedContactRec.Patient_Support_Case__c != null) {
                setOfCaseIds.add(associatedContactRec.Patient_Support_Case__c);
            }
        }
    }

    // STEP 3: Fetch trips and map by case ID
    Map<String, List<Trip__c>> mapOfCaseIdWithListOfTripRecs = new Map<String, List<Trip__c>>();
    if (!setOfCaseIds.isEmpty()) {
        for (Trip__c tripRec : [
            SELECT ID, RelatedCase__c, PatientOrCaregiverTrip__c
            FROM Trip__c
            WHERE RelatedCase__c IN :setOfCaseIds
        ]) {
            if (tripRec.PatientOrCaregiverTrip__c == 'Patient') {
                mapOfCaseIdWithListOfTripRecs
                    .computeIfAbsent(tripRec.RelatedCase__c, k -> new List<Trip__c>())
                    .add(tripRec);
            }
        }
    }

    // STEP 4: Process accounts and reimbursements
    Map<String, List<Reimbursement__c>> mapOfUserIdWithLstOfReimbursement = new Map<String, List<Reimbursement__c>>();
    Map<String, List<Reimbursement__c>> caseIdWithReimbursementsMap = new Map<String, List<Reimbursement__c>>();

    // Fetch all reimbursements in one query
    List<Reimbursement__c> reimbursementRecords = [
        SELECT Id, CreatedFromTrip__c, CaseIDNumber__c
        FROM Reimbursement__c
        WHERE CreatedFromTrip__c IN :mapOfCaseIdWithListOfTripRecs.values().flatten()
    ];

    // Group reimbursements by trip ID
    for (Reimbursement__c reimbursementRec : reimbursementRecords) {
        caseIdWithReimbursementsMap
            .computeIfAbsent(reimbursementRec.CreatedFromTrip__c, k -> new List<Reimbursement__c>())
            .add(reimbursementRec);
    }

    // Process accounts based on their type
    for (Account accountRec : [SELECT ID, AccountType__c FROM Account WHERE ID IN :setOfAccountIds]) {
        if (accountRec == null || String.isEmpty(accountRec.AccountType__c)) {
            continue;
        }

        switch on accountRec.AccountType__c {
            when 'Patient', 'Caregiver', 'Legally Authorized Representative' {
                HealthCloudGA__ContactContactRelation__c associatedContact = mapOfAccountIdWithAssociatedContact.get(accountRec.Id);
                String caseId = associatedContact != null ? associatedContact.Patient_Support_Case__c : null;

                if (!String.isEmpty(caseId)) {
                    List<Trip__c> lstOfPatientTrips = mapOfCaseIdWithListOfTripRecs.get(caseId);

                    if (lstOfPatientTrips != null && !lstOfPatientTrips.isEmpty()) {
                        for (Trip__c trip : lstOfPatientTrips) {
                            if (caseIdWithReimbursementsMap.containsKey(trip.Id)) {
                                List<Reimbursement__c> reimbursements = caseIdWithReimbursementsMap.get(trip.Id);

                                for (Reimbursement__c reimbursementRec : reimbursements) {
                                    mapOfUserIdWithLstOfReimbursement
                                        .computeIfAbsent(reimbursementRec.CreatedFromTrip__c, k -> new List<Reimbursement__c>())
                                        .add(reimbursementRec);
                                }
                            }
                        }
                    }
                }
            }
            when else {
                // Handle any other account types if necessary
            }
        }
    }
}

