public with sharing class FileUploadHandlerDemo {
    @AuraEnabled
    public static String uploadFile(String fileName, String base64Data, String contentType) {
        try {
            ContentVersion contentVersion = new ContentVersion();
            contentVersion.Title = fileName;
            contentVersion.PathOnClient = fileName;
            contentVersion.VersionData = EncodingUtil.base64Decode(base64Data);
            contentVersion.IsMajorVersion = true;
            insert contentVersion;

            return [SELECT ContentDocumentId FROM ContentVersion WHERE Id = :contentVersion.Id].ContentDocumentId;
        } catch (Exception e) {
            throw new AuraHandledException('File upload failed: ' + e.getMessage());
        }
    }
}


import { LightningElement, track } from 'lwc';
import uploadFileToContentDocument from '@salesforce/apex/FileUploadHandlerDemo.uploadFile';

const CHUNK_SIZE = 750000; // 750 KB per chunk

export default class FileUploadPOC extends LightningElement {
    @track file; // Track file upload status

    async handleFileChange(event) {
        const file = event.target.files[0];

        if (file.size > 25 * 1024 * 1024) {
            alert('File size exceeds 25 MB. Please upload a smaller file.');
            return;
        }

        await this.processFile(file);
    }

    async processFile(file) {
        try {
            const fileReader = new FileReader();
            fileReader.readAsDataURL(file);

            // Wait for file read completion
            const fileData = await new Promise((resolve, reject) => {
                fileReader.onload = () => resolve(fileReader.result.split(',')[1]);
                fileReader.onerror = () => reject(fileReader.error);
            });

            // Split file into chunks and upload
            const totalChunks = Math.ceil(fileData.length / CHUNK_SIZE);
            for (let i = 0; i < totalChunks; i++) {
                const start = i * CHUNK_SIZE;
                const end = Math.min(start + CHUNK_SIZE, fileData.length);

                const chunk = fileData.substring(start, end);
                await this.uploadChunk({
                    fileName: file.name,
                    base64Data: chunk,
                    contentType: file.type,
                });

                this.file = {
                    name: file.name,
                    status: `Uploading... (${i + 1}/${totalChunks} chunks uploaded)`,
                };
            }

            alert('File uploaded successfully!');
            this.file = { ...this.file, status: 'Upload Complete' };
        } catch (error) {
            console.error('Error uploading file:', error);
            this.file = { name: file.name, status: 'Failed' };
            alert('Failed to upload file. Please try again.');
        }
    }

    async uploadChunk(fileData) {
        try {
            await uploadFileToContentDocument(fileData);
        } catch (error) {
            throw new Error(`Failed to upload chunk: ${error.message}`);
        }
    }
}
