   @track caseOwnerOptions = [];
                @track treatmentCenterOptions = [];
                @track coordinatorOptions = [];
                @track selectedCaseOwnerIds = [];
                @track selectedTreatmentCenterIds = [];
                @track selectedCoordinatorIds = [];
                @track cases = [];
                @track filterType = 'ALL_CASES'; // Default filter type
                @track isLoading = false;
            
                // Fetch options for dropdowns
                connectedCallback() {
                    getQueryResults()
                        .then((result) => {
                            console.log('Serialized Query Results:', result); // Log the serialized JSON string
                            const parsedResult = JSON.parse(result); // Parse the JSON string into an object
                            console.log('Parsed Query Results:', parsedResult); // Log the parsed object
            
                            // Process CaseOwner options
                            if (parsedResult.CaseOwner) {
                                this.caseOwnerOptions = parsedResult.CaseOwner.map((item) => ({
                                    label: item.label,
                                    value: item.value,
                                }));
                                console.log('Processed Case Owner Options:', this.caseOwnerOptions); // Log the processed options
                            }
            
                            // Process Treatment Center options
                            if (parsedResult.TreatmentSite) {
                                this.treatmentCenterOptions = parsedResult.TreatmentSite.map((item) => ({
                                    label: item.label,
                                    value: item.value,
                                }));
                                console.log('Processed Treatment Center Options:', this.treatmentCenterOptions); // Log the processed options
                            }
            
                            // Process Coordinator options
                            if (parsedResult.Coordinator) {
                                this.coordinatorOptions = parsedResult.Coordinator.map((item) => ({
                                    label: item.label,
                                    value: item.value,
                                }));
                                console.log('Processed Coordinator Options:', this.coordinatorOptions); // Log the processed options
                            }
                        })
                        .catch((error) => {
                            console.error('Error fetching query results:', error); // Log the error
                        });

                        this.filterType = 'MY_CASES';
                        this.fetchFilteredCases();
                }
            
                // Handle selection in the Case Owner dropdown
                handleCaseOwnerChange(event) {
                    this.selectedCaseOwnerIds = event.detail.value; // Array of selected IDs
                    console.log('Selected Case Owner IDs:', this.selectedCaseOwnerIds); // Log the selected case owner IDs
                    this.filterType = 'CASE_OWNER'; // Set filter type to case owner
                    this.fetchFilteredCases();
                }
            
                // Handle selection in the Treatment Center dropdown
                handleTreatmentCenterChange(event) {
                    this.selectedTreatmentCenterIds = event.detail.value; // Array of selected IDs
                    console.log('Selected Treatment Center IDs:', this.selectedTreatmentCenterIds); // Log the selected treatment center IDs
                    this.includeAllTreatmentCenter = false; 
                    this.applyFilters();
                }
            
                // Handle selection in the Coordinator dropdown
                handleCoordinatorChange(event) {
                    this.selectedCoordinatorIds = event.detail.value; // Array of selected IDs
                    console.log('Selected Coordinator IDs:', this.selectedCoordinatorIds); // Log the selected coordinator IDs
                    this.includeAllCoordinator = false;
                    this.applyFilters();
                }


                //Next action Dropdown Starts
                @track nextActionOptions = [
                    { label: 'Begin Enrollment', value: 'Begin Enrollment' },
                    { label: 'Eligibility Work Up', value: 'Eligibility Work Up' }
                ];
                @track selectedNextAction = ''; // Stores the selected Next Action value
                
                // Handle selection in the Next Action dropdown
                handleNextActionChange(event) {
                    this.selectedNextAction = event.detail.value; // Capture the selected value
                    console.log('Selected Next Action:', this.selectedNextAction); // Log the selected value
                    this.includeAllNextAction = false;
                    this.applyFilters();
                }
                 //Next action Dropdown Ends


                // Stores the selected Next Action Due Date Starts 
                @track selectedNextActionDueDate = ''; // Stores the selected Next Action Due Date

                // Handle selection in the Next Action Due Date picker
                handleNextActionDueDateChange(event) {
                this.selectedNextActionDueDate = event.target.value; // Capture the selected date
                console.log('Selected Next Action Due Date:', this.selectedNextActionDueDate); // Log the selected date
                this.includeAllNextActionDueDate = false;
                this.applyFilters();
                }
                // Stores the selected Next Action Due Date Ends 


                // Stores the selected Trip Dates Starts
                @track selectedTripDates = ''; 

                // Handle selection in the Trip Dates picker
                handleTripDatesChange(event) {
                this.selectedTripDates = event.target.value; // Capture the selected date
                console.log('Selected Trip Dates:', this.selectedTripDates); // Log the selected date
                this.includeAllTripDates = false;
                this.applyFilters();
                }
                // Stores the selected Trip Dates Ends


                // Stores the selected Enrollment Status sTARTS
                @track enrollmentStatusOptions = [
                    { label: 'New', value: 'New' },
                    { label: 'Enrollment Information and Authorization Pending', value: 'Enrollment Information and Authorization Pending' },
                    { label: 'Enrollment Information and Authorization Complete', value: 'Enrollment Information and Authorization Complete' },
                    { label: 'Enrollment Process on Hold', value: 'Enrollment Process on Hold' },
                    { label: 'Enrollment Process Cancelled', value: 'Enrollment Process Cancelled' }
                ];
                @track selectedEnrollmentStatus = ''; // Stores the selected Enrollment Status
                
                // Handle selection in the Enrollment Status dropdown
                handleEnrollmentStatusChange(event) {
                    this.selectedEnrollmentStatus = event.detail.value; // Capture the selected value
                    console.log('Selected Enrollment Status:', this.selectedEnrollmentStatus); // Log the selected value
                    this.includeAllEnrollmentStatus = false;
                    this.applyFilters();
                }

                // Stores the selected Enrollment Status ENDS

                // Handle button clicks
                handleFilterChange(event) {
                    const filter = event.target.dataset.filter;
                    this.filterType = filter;
                    this.selectedCaseOwnerIds = []; // Reset selected case owners for other filters
                    console.log('Filter Type Changed:', this.filterType); // Log the selected filter type
                    this.fetchFilteredCases();
                }
            
                // Fetch filtered cases based on the selected filter
                fetchFilteredCases() {
                    this.isLoading = true;
                    const caseOwnerIds = this.filterType === 'CASE_OWNER' ? this.selectedCaseOwnerIds :  this.filterType === 'ALL_CASES' ? [] : this.selectedCaseOwnerIds;
            
                    console.log('Fetching Cases with Filter Type:', this.filterType); // Log the filter type
                    console.log('Fetching Cases with Case Owner IDs:', caseOwnerIds); // Log the case owner IDs being used
            
                    getFilteredCases({ filterType: this.filterType, caseOwnerIds })
                        .then((result) => {
                            this.cases = result;
                            this.casesFiltered =[];
                            this.casesFiltered = result;
                            console.log('Fetched Filtered Cases:', JSON.stringify(this.cases)); // Log the fetched cases
                            this.isLoading = false;
                        })
                        .catch((error) => {
                            console.error('Error fetching filtered cases:', error); // Log the error
                            this.isLoading = false;
                        });
                }


                @track includeAllNextAction = false;
                @track includeAllNextActionDueDate = false;
                @track includeAllTreatmentCenter = false;
                @track includeAllEnrollmentStatus = false;
                @track includeAllTripDates = false;
                @track includeAllCoordinator = false;

                handleShowAll(event) {
                    const filter = event.target.dataset.filter;
                
                    if (filter === 'NEXT_ACTION') {
                        this.selectedNextAction = ''; // Reset selected value
                        this.includeAllNextAction = true; // Include all values for this filter
                    } else if (filter === 'NEXT_ACTION_DUE_DATE') {
                        this.selectedNextActionDueDate = ''; // Reset selected value
                        this.includeAllNextActionDueDate = true; // Include all values for this filter
                    } else if (filter === 'TREATMENT_CENTER') {
                        this.selectedTreatmentCenterIds = []; // Reset selected value
                        this.includeAllTreatmentCenter = true; // Include all values for this filter
                    } else if (filter === 'ENROLLMENT_STATUS') {
                        this.selectedEnrollmentStatus = ''; // Reset selected value
                        this.includeAllEnrollmentStatus = true; // Include all values for this filter
                    } else if (filter === 'TRIP_DATES') {
                        this.selectedTripDates = ''; // Reset selected value
                        this.includeAllTripDates = true; // Include all values for this filter
                    } else if (filter === 'COORDINATOR') {
                        this.selectedCoordinatorIds = []; // Reset selected value
                        this.includeAllCoordinator = true; // Include all values for this filter
                    }
                
                    console.log(`Reset filter for: ${filter}`); // Log the reset action
                    this.applyFilters();
                }
                
                applyFilters() {
                    const filters = [];
                
                    // Add Next Action filter
                    if (this.includeAllNextAction) {
                        filters.push({
                            field: "NextAction__c",
                            operator: "in",
                            value: this.nextActionOptions.map(option => option.value) // Include all values
                        });
                    } else if (this.selectedNextAction) {
                        filters.push({
                            field: "NextAction__c",
                            operator: "in",
                            value: [this.selectedNextAction]
                        });
                    }
                
                    // Add Next Action Due Date filter
                    if (this.includeAllNextActionDueDate) {
                        filters.push({
                            field: "NextActionDueDate__c",
                            operator: "Date",
                            value: this.selectedNextActionDueDate // Include all dates (no specific filter)
                        });
                    } else if (this.selectedNextActionDueDate) {
                        filters.push({
                            field: "NextActionDueDate__c",
                            operator: "Date",
                            value: this.selectedNextActionDueDate
                        });
                    }
                
                    // Add Treatment Center filter
                    if (this.includeAllTreatmentCenter) {
                        filters.push({
                            field: "TreatmentSite__c",
                            operator: "in",
                            value: this.treatmentCenterOptions.map(option => option.value) // Include all values
                        });
                    } else if (this.selectedTreatmentCenterIds.length > 0) {
                        filters.push({
                            field: "TreatmentSite__c",
                            operator: "in",
                            value: this.selectedTreatmentCenterIds
                        });
                    }
                
                    // Add Enrollment Status filter
                    if (this.includeAllEnrollmentStatus) {
                        filters.push({
                            field: "EnrollmentStatus__c",
                            operator: "in",
                            value: this.enrollmentStatusOptions.map(option => option.value) // Include all values
                        });
                    } else if (this.selectedEnrollmentStatus) {
                        filters.push({
                            field: "EnrollmentStatus__c",
                            operator: "equals",
                            value: this.selectedEnrollmentStatus
                        });
                    }
                
                    // Add Trip Dates filter
                    if (this.includeAllTripDates) {
                        filters.push({
                            field: "tripDates",
                            operator: "Date",
                            value: this.selectedTripDates // Include all dates (no specific filter)
                        });
                    } else if (this.selectedTripDates) {
                        filters.push({
                            field: "tripDates",
                            operator: "Date",
                            value: this.selectedTripDates
                        });
                    }
                
                    // Add Coordinator filter
                    if (this.includeAllCoordinator) {
                        filters.push({
                            field: "coordinator",
                            operator: "in",
                            value: this.coordinatorOptions.map(option => option.value) // Include all values
                        });
                    } else if (this.selectedCoordinatorIds.length > 0) {
                        filters.push({
                            field: "coordinator",
                            operator: "in",
                            value: this.selectedCoordinatorIds
                        });
                    }
                
                    // Form the filter logic
                    const filterLogic = {
                        logic: "AND",
                        filters: filters
                    };
                
                    console.log('Filter Logic:', JSON.stringify(filterLogic, null, 2)); // Log the filter logic for debugging
                
                    // Apply the filter logic to the cases
                    const filteredCases = this.cases.filter(caseItem => {
                        return filters.every(filter => {
                            switch (filter.operator) {
                                case "in":
                                    // Check if the caseItem field matches any of the filter values
                                    console.log('Filter Field:', filter.field); // Log the filter field
                                    console.log('Filter value Field:', filter.value); // Log the filter field
                                    console.log('caseItem[filter.field] value Field:', caseItem[filter.field]); // Log the filter field
                                    return filter.value.some(value => value === caseItem[filter.field]);
                    
                                case "Date":
                                    // Compare dates
                                    return filter.value ? new Date(caseItem[filter.field]) >= new Date(filter.value) : true;
                    
                                case "equals":
                                    // Check for equality
                                    console.log('caseItem[filter.field] Field:', caseItem[filter.field]); // Log the filter field
                                    console.log('Filter value Field:', filter.value); // Log the filter field

                                    return caseItem[filter.field] === filter.value;
                    
                                default:
                                    // Return true for unsupported operators
                                    return true;
                            }
                        });
                    });

                
                    this.casesFiltered =[];
                    this.casesFiltered = filteredCases;
                    console.log('Filtered Cases:',  JSON.stringify(this.casesFiltered)); // Log the filtered cases
                    this.casesFiltered = filteredCases;
                   // console.log('Filtered Cases:', JSON.stringify(this.cases)); // Log the filtered cases
                }
                @track casesFiltered=[];

}: <div class="slds-m-around_medium">
        <!-- Multi-select combobox for Case Owner -->
        <lightning-combobox
            name="caseOwnerDropdown"
            label="Filter by Case Owner"
            placeholder="Select Case Owners"
            options={caseOwnerOptions}
            value={selectedCaseOwnerIds}
            multiple
            onchange={handleCaseOwnerChange}>
        </lightning-combobox>
    
        <!-- Filter buttons for Case Owner -->
        <div class="slds-m-top_medium">
            <lightning-button
                label="My Cases"
                data-filter="MY_CASES"
                onclick={handleFilterChange}
                class="slds-m-right_small">
            </lightning-button>
            <lightning-button
                label="Show All"
                data-filter="ALL_CASES"
                onclick={handleFilterChange}>
            </lightning-button>
        </div>
    </div>

    <div class="slds-m-around_medium">
        <!-- Multi-select combobox for Next Action -->
        <lightning-combobox
            name="nextActionDropdown"
            label="Filter by Next Action"
            placeholder="Select Next Action"
            options={nextActionOptions}
            value={selectedNextAction}
            onchange={handleNextActionChange}>
        </lightning-combobox>
    </div>
    <div class="slds-m-top_medium">
        <lightning-button
            label="Show All"
            data-filter="NEXT_ACTION"
            onclick={handleShowAll}
            class="slds-m-right_small">
        </lightning-button>
    </div>

    <div class="slds-m-around_medium">
        <!-- Date picker for Next Action Due Date -->
        <lightning-input
            type="date"
            name="nextActionDueDate"
            label="Filter by Next Action Due Date"
            placeholder="Select Next Action Due Date"
            value={selectedNextActionDueDate}
            onchange={handleNextActionDueDateChange}>
        </lightning-input>
    </div>
    <div class="slds-m-top_medium">
        <lightning-button
            label="Show All"
             data-filter="NEXT_ACTION_DUE_DATE"
             onclick={handleShowAll}
            class="slds-m-right_small">
        </lightning-button>
    </div>

    <div class="slds-m-around_medium">
        <!-- Date picker for Trip Dates -->
        <lightning-input
            type="date"
            name="tripDates"
            label="Filter by Trip Dates"
            placeholder="Select Trip Dates"
            value={selectedTripDates}
            onchange={handleTripDatesChange}>
        </lightning-input>
    </div>
    <div class="slds-m-top_medium">
        <lightning-button
            label="Show All"
             data-filter="TRIP_DATES"
             onclick={handleShowAll}
            class="slds-m-right_small">
        </lightning-button>
    </div>
    
    <div class="slds-m-around_medium">
        <!-- Multi-select combobox for Treatment Center -->
        <lightning-combobox
            name="treatmentCenterDropdown"
            label="Filter by Treatment Center"
            placeholder="Select Treatment Centers"
            options={treatmentCenterOptions}
            value={selectedTreatmentCenterIds}
            multiple
            onchange={handleTreatmentCenterChange}>
        </lightning-combobox>
    
        <!-- Show All button for Treatment Center -->
        <div class="slds-m-top_medium">
            <lightning-button
                label="Show All"
                 data-filter="TREATMENT_CENTER"
                 onclick={handleShowAll}
                class="slds-m-right_small">
            </lightning-button>
        </div>
    </div>
    
    <div class="slds-m-around_medium">
        <!-- Multi-select combobox for Coordinator -->
        <lightning-combobox
            name="coordinatorDropdown"
            label="Filter by Coordinator"
            placeholder="Select Coordinators"
            options={coordinatorOptions}
            value={selectedCoordinatorIds}
            multiple
            onchange={handleCoordinatorChange}>
        </lightning-combobox>
    
        <!-- Show All button for Coordinator -->
        <div class="slds-m-top_medium">
            <lightning-button
                label="Show All"
                 data-filter="COORDINATOR"
                 onclick={handleShowAll}
                class="slds-m-right_small">
            </lightning-button>
        </div>
    </div>

    <div class="slds-m-around_medium">
        <!-- Multi-select combobox for Enrollment Status -->
        <lightning-combobox
            name="enrollmentStatusDropdown"
            label="Filter by Enrollment Status"
            placeholder="Select Enrollment Status"
            options={enrollmentStatusOptions}
            value={selectedEnrollmentStatus}
            onchange={handleEnrollmentStatusChange}>
        </lightning-combobox>
    </div>

    <div class="slds-m-top_medium">
        <lightning-button
            label="Show All"
             data-filter="ENROLLMENT_STATUS"
             onclick={handleShowAll}
            class="slds-m-right_small">
        </lightning-button>
    </div>
    
    <!-- Loading spinner -->
    <template if:true={isLoading}>
        <lightning-spinner alternative-text="Loading"></lightning-spinner>
    </template>
    
    <!-- Display filtered cases -->
    <template if:true={casesFiltered}>
        <div class="slds-m-top_medium">
            <template for:each={casesFiltered} for:item="caseItem">
                <p key={caseItem.Id}>{caseItem.CaseNumber} - {caseItem.Account.Name}</p>
            </template>
        </div>

    </template>

    
apex classes : public without sharing class PSSTrackerCaseController {
    @AuraEnabled(cacheable=true)
    public static List<Case> getFilteredCases(String filterType, List<Id> caseOwnerIds) {
        String baseQuery = 'SELECT Id, Account.Name, CaseNumber, NextAction__c, NextActionNotes__c, NextActionDueDate__c, ' +
            'CartCoordinatorName__c, TreatmentSite__c, TreatmentCenterName__c, ApheresisPickupdate__c, ' +
            'InfusionAppointmentDate__c, EnrollmentStatus__c, EligibilityStatus__c, ConsentStatusRollUp__c, ' +
            'CasesNotes__c, CaseOwnerName__c FROM Case';
        
        List<String> whereClauses = new List<String>();
        
        switch on filterType {
            when 'MY_CASES' {
               // whereClauses.add('OwnerId = :UserInfo.getUserId()');	
                whereClauses.add('OwnerId = \'0055500000CRPzTAAX\'');	
            }
            when 'CASE_OWNER' {
                if (caseOwnerIds != null && !caseOwnerIds.isEmpty()) {
                    whereClauses.add('OwnerId IN :caseOwnerIds');
                }
            }
            when 'ALL_CASES' {
                // No owner restriction
            }
            when 'INBOUND_CASES' {
                whereClauses.add('RecordType.DeveloperName = \'Inbound_Case\'');
            }
            when 'PSS_CASES' {
                whereClauses.add('RecordType.DeveloperName = \'PSS_Case\'');
            }
            when else {
                // Optionally handle unknown filters
                throw new AuraHandledException('Invalid filter type provided: ' + filterType);
            }
        }
        
        // Add WHERE clause if needed
        if (!whereClauses.isEmpty()) {
            baseQuery += ' WHERE ' + String.join(whereClauses, ' AND ');
        }
        
        baseQuery += ' ORDER BY CreatedDate DESC'; // Adjust limit if needed
        
        System.debug('Dynamic Query: ' + baseQuery);
        
        return Database.query(baseQuery);
    }
    
    @AuraEnabled(cacheable=true)
    public static String getQueryResults() {    
        Map<String, List<Map<String, String>>> resultMap = new Map<String, List<Map<String, String>>>();
        
        // Query 1: Case Owners
        List<AggregateResult> caseOwnerResults = [
            SELECT OwnerId, COUNT(Id) 
            FROM Case 
            GROUP BY OwnerId
        ];
        Set<Id> ownerIds = new Set<Id>();
        for (AggregateResult result : caseOwnerResults) {
            ownerIds.add((Id) result.get('OwnerId'));
        }
        Map<Id, String> ownerIdToNameMap = new Map<Id, String>();
        for (User user : [SELECT Id, FirstName, LastName FROM User WHERE Id IN :ownerIds]) {
            ownerIdToNameMap.put(user.Id, user.FirstName + ' ' + user.LastName);
        }
        List<Map<String, String>> caseOwners = new List<Map<String, String>>();
        for (AggregateResult result : caseOwnerResults) {
            Id ownerId = (Id) result.get('OwnerId');
            if (ownerIdToNameMap.containsKey(ownerId)) {
                caseOwners.add(new Map<String, String>{
                    'label' => ownerIdToNameMap.get(ownerId),
                        'value' => (String) ownerId
                        });
            }
        }
        resultMap.put('CaseOwner', caseOwners);
        
        // Query 2: Treatment Sites
        List<Account> treatmentSiteResults = [
            SELECT Id, Name 
            FROM Account 
            WHERE RecordType.Name = 'Treatment Site' AND Status__c = 'Active'
        ];
        Set<String> uniqueTreatmentSites = new Set<String>();
        List<Map<String, String>> treatmentSites = new List<Map<String, String>>();
        for (Account account : treatmentSiteResults) {
            if (!uniqueTreatmentSites.contains(account.Id)) {
                uniqueTreatmentSites.add(account.Id);
                treatmentSites.add(new Map<String, String>{
                    'label' => account.Name,
                        'value' => account.Id
                        });
            }
        }
        resultMap.put('TreatmentSite', treatmentSites);
        
        // Query 3: Coordinators
        List<AggregateResult> coordinatorResults = [
            SELECT OrderID__c 
            FROM Case 
            WHERE OrderID__c != null
            GROUP BY OrderID__c
        ];
        Set<Id> orderIds = new Set<Id>();
        for (AggregateResult result : coordinatorResults) {
            orderIds.add((Id) result.get('OrderID__c'));
        }
        
        // Query unique coordinators
        Map<Id, String> coordinatorIdToNameMap = new Map<Id, String>();
        for (Order__c order : [SELECT Coordinator__r.Id, Coordinator__r.FirstName, Coordinator__r.LastName FROM Order__c WHERE Id IN :orderIds]) {
            if (order.Coordinator__r != null) {
                coordinatorIdToNameMap.put(order.Coordinator__r.Id, order.Coordinator__r.FirstName + ' ' + order.Coordinator__r.LastName);
            }
        }
        
        // Convert coordinators to a list
        List<Map<String, String>> coordinators = new List<Map<String, String>>();
        for (Id coordinatorId : coordinatorIdToNameMap.keySet()) {
            coordinators.add(new Map<String, String>{
                'label' => coordinatorIdToNameMap.get(coordinatorId),
                    'value' => (String) coordinatorId
                    });
        }
        resultMap.put('Coordinator', coordinators);
        
        return JSON.serialize(resultMap);
    }
}
