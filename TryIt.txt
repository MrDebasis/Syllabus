@AuraEnabled
public static void upsertMilestones(String payloadJson, Id caseId, String surveyType) {
    try {
        List<MilestoneWrapper> incomingList = 
            (List<MilestoneWrapper>) JSON.deserialize(payloadJson, List<MilestoneWrapper>.class);

        Set<String> uniqueIds = new Set<String>();
        for (MilestoneWrapper wrap : incomingList) {
            if (wrap != null && wrap.UniqueId != null) {
                uniqueIds.add(wrap.UniqueId);
            }
        }

        // Get record type ID safely
        Id recordTypeId;
        if (Schema.SObjectType.PatientSupportMilestone__c.getRecordTypeInfosByName().containsKey('PatientPortalSurvey')) {
            recordTypeId = Schema.SObjectType.PatientSupportMilestone__c
                .getRecordTypeInfosByName()
                .get('PatientPortalSurvey')
                .getRecordTypeId();
        } else {
            throw new AuraHandledException('Record Type "PatientPortalSurvey" not found.');
        }

        // Query existing milestones
        Map<String, PatientSupportMilestone__c> existingMap = new Map<String, PatientSupportMilestone__c>();
        if (!uniqueIds.isEmpty()) {
            for (PatientSupportMilestone__c ms : [
                SELECT Id, UniqueId__c 
                FROM PatientSupportMilestone__c 
                WHERE Case__c = :caseId 
                AND SurveyType__c = :surveyType 
                AND UniqueId__c IN :uniqueIds
            ]) {
                if (ms.UniqueId__c != null) {
                    existingMap.put(ms.UniqueId__c, ms);
                }
            }
        }

        List<PatientSupportMilestone__c> recordsToUpsert = new List<PatientSupportMilestone__c>();

        for (MilestoneWrapper wrapper : incomingList) {
            if (wrapper == null || wrapper.UniqueId == null) continue;

            PatientSupportMilestone__c record;

            if (existingMap.containsKey(wrapper.UniqueId)) {
                record = existingMap.get(wrapper.UniqueId);
            } else {
                record = new PatientSupportMilestone__c();
                record.Case__c = caseId;
                record.SurveyType__c = surveyType;
                record.UniqueId__c = wrapper.UniqueId;
                record.RecordTypeId = recordTypeId;
            }

            // Defensive null checks
            record.Question__c = wrapper.label != null ? wrapper.label : '';
            record.SurveyStatus__c = 'Completed';

            Boolean hasPriority = wrapper.priority != null && !String.isBlank(wrapper.priority);

            if (hasPriority) {
                record.Priority__c = wrapper.priority;
                record.QuestionValue__c = null;

                if (wrapper.label != null && wrapper.value != null) {
                    if (wrapper.label.toLowerCase().contains('arrival')) {
                        record.ArrivalDate__c = Date.valueOf(wrapper.value);
                        record.DepartureDate__c = null;
                    } else if (wrapper.label.toLowerCase().contains('departure')) {
                        record.DepartureDate__c = Date.valueOf(wrapper.value);
                        record.ArrivalDate__c = null;
                    } else {
                        record.ArrivalDate__c = null;
                        record.DepartureDate__c = null;
                    }
                }
            } else {
                record.Priority__c = null;
                record.QuestionValue__c = wrapper.value;
                record.ArrivalDate__c = null;
                record.DepartureDate__c = null;
            }

            recordsToUpsert.add(record);
        }

        if (!recordsToUpsert.isEmpty()) {
            upsert recordsToUpsert;
        }

    } catch (Exception e) {
        throw new AuraHandledException('Error processing milestone data: ' + e.getMessage());
    }
}
