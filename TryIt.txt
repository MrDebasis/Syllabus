@AuraEnabled
public static void upsertMilestones(String payloadJson, Id caseId, String surveyType) {
    try {
        System.debug('--- Incoming JSON Payload ---');
        System.debug(payloadJson);
        System.debug('Case Id: ' + caseId);
        System.debug('Survey Type: ' + surveyType);

        List<Object> rawList = (List<Object>) JSON.deserializeUntyped(payloadJson);
        List<MilestoneWrapper> incomingList = new List<MilestoneWrapper>();

        for (Object rawItem : rawList) {
            Map<String, Object> mapItem = (Map<String, Object>) rawItem;
            MilestoneWrapper wrapper = new MilestoneWrapper();
            wrapper.UniqueId = (String) mapItem.get('UniqueId');
            wrapper.label = (String) mapItem.get('label');
            wrapper.value = (String) mapItem.get('value');
            if (mapItem.containsKey('priority')) {
                wrapper.priority = String.valueOf(mapItem.get('priority'));
            }
            incomingList.add(wrapper);
        }

        System.debug('Parsed MilestoneWrapper List:');
        System.debug(incomingList);

        Set<String> uniqueIds = new Set<String>();
        for (MilestoneWrapper wrap : incomingList) {
            uniqueIds.add(wrap.UniqueId);
        }

        System.debug('Unique IDs collected: ' + uniqueIds);

        Id recordTypeId;
        try {
            recordTypeId = Schema.SObjectType.PatientSupportMilestone__c
                .getRecordTypeInfosByName()
                .get('PatientPortalSurvey')
                .getRecordTypeId();
        } catch (Exception e) {
            System.debug('Error fetching Record Type ID: ' + e.getMessage());
            throw e;
        }

        System.debug('Fetched Record Type ID: ' + recordTypeId);

        Map<String, PatientSupportMilestone__c> existingMap = new Map<String, PatientSupportMilestone__c>();
        for (PatientSupportMilestone__c ms : [
            SELECT Id, UniqueId__c 
            FROM PatientSupportMilestone__c 
            WHERE Case__c = :caseId 
            AND SurveyType__c = :surveyType 
            AND UniqueId__c IN :uniqueIds
        ]) {
            existingMap.put(ms.UniqueId__c, ms);
        }

        System.debug('Existing milestone map: ' + existingMap.keySet());

        List<PatientSupportMilestone__c> recordsToUpsert = new List<PatientSupportMilestone__c>();

        for (MilestoneWrapper wrapper : incomingList) {
            System.debug('Processing wrapper: ' + wrapper);
            PatientSupportMilestone__c record;

            if (existingMap.containsKey(wrapper.UniqueId)) {
                record = existingMap.get(wrapper.UniqueId);
                System.debug('Updating existing milestone: ' + wrapper.UniqueId);
            } else {
                record = new PatientSupportMilestone__c();
                record.Case__c = caseId;
                record.SurveyType__c = surveyType;
                record.UniqueId__c = wrapper.UniqueId;
                record.RecordTypeId = recordTypeId;
                System.debug('Creating new milestone: ' + wrapper.UniqueId);
            }

            record.Question__c = wrapper.label;
            record.SurveyStatus__c = 'Completed';

            if (!String.isBlank(wrapper.priority)) {
                record.Priority__c = wrapper.priority;
                record.QuestionValue__c = null;

                if (wrapper.label != null && wrapper.label.toLowerCase().contains('arrival')) {
                    record.ArrivalDate__c = Date.valueOf(wrapper.value);
                    record.DepartureDate__c = null;
                    System.debug('Set ArrivalDate__c for ' + wrapper.UniqueId);
                } else if (wrapper.label != null && wrapper.label.toLowerCase().contains('departure')) {
                    record.DepartureDate__c = Date.valueOf(wrapper.value);
                    record.ArrivalDate__c = null;
                    System.debug('Set DepartureDate__c for ' + wrapper.UniqueId);
                }
            } else {
                record.Priority__c = null;
                record.QuestionValue__c = wrapper.value;
                record.ArrivalDate__c = null;
                record.DepartureDate__c = null;
                System.debug('Set QuestionValue__c for ' + wrapper.UniqueId);
            }

            recordsToUpsert.add(record);
        }

        System.debug('Final records to upsert: ' + recordsToUpsert);

        upsert recordsToUpsert;

        System.debug('Milestones upserted successfully.');

    } catch (Exception e) {
        System.debug('Error in upsertMilestones: ' + e.getMessage());
        throw new AuraHandledException('Error processing milestone data: ' + e.getMessage());
    }
}

public class MilestoneWrapper {
    public String UniqueId;
    public String label;
    public String value;
    public String priority;
}
