import org.cometd.bayeux.client.ClientSessionChannel;
import org.cometd.client.BayeuxClient;
import org.cometd.client.transport.ClientTransport;
import org.cometd.websocket.client.WebSocketTransport;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.util.thread.QueuedThreadPool;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

@Configuration
public class CometDConfig {

    @Value("${salesforce.endpoint}")
    private String salesforceEndpoint;

    @Value("${salesforce.username}")
    private String salesforceUsername;

    @Value("${salesforce.password}")
    private String salesforcePassword;

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxClient bayeuxClient() {
        HttpClient httpClient = new HttpClient();
        httpClient.setConnectTimeout(20000);
        httpClient.setIdleTimeout(30000);
        httpClient.setExecutor(new QueuedThreadPool(256));

        try {
            httpClient.start();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        Map<String, Object> options = new HashMap<>();
        options.put(ClientTransport.MAX_NETWORK_DELAY_OPTION, 30000);

        ScheduledExecutorService schedulerExecutorService = Executors.newScheduledThreadPool(1);
        ClientTransport wsTransport = new WebSocketTransport(options, null, schedulerExecutorService);

        BayeuxClient client = new BayeuxClient(salesforceEndpoint + "/cometd/42.0", wsTransport);

        // Add Salesforce authentication credentials
        Map<String, Object> handshakeFields = new HashMap<>();
        handshakeFields.put("ext", new HashMap<>());
        handshakeFields.put("username", salesforceUsername);
        handshakeFields.put("password", salesforcePassword);

        client.handshake(handshakeFields);

        return client;
    }
}







import org.cometd.bayeux.client.ClientSessionChannel;
import org.cometd.client.BayeuxClient;
import org.cometd.client.transport.ClientTransport;
import org.cometd.websocket.client.WebSocketTransport;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.util.thread.QueuedThreadPool;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

@Configuration
public class CometDConfig {

    @Value("${salesforce.endpoint}")
    private String salesforceEndpoint;

    @Value("${salesforce.oauth.token}")
    private String salesforceOAuthToken;

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxClient bayeuxClient() {
        HttpClient httpClient = new HttpClient();
        httpClient.setConnectTimeout(20000);
        httpClient.setIdleTimeout(30000);
        httpClient.setExecutor(new QueuedThreadPool(256));

        try {
            httpClient.start();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        Map<String, Object> options = new HashMap<>();
        options.put(ClientTransport.MAX_NETWORK_DELAY_OPTION, 30000);

        ScheduledExecutorService schedulerExecutorService = Executors.newScheduledThreadPool(1);
        ClientTransport wsTransport = new WebSocketTransport(options, null, schedulerExecutorService);

        BayeuxClient client = new BayeuxClient(salesforceEndpoint + "/cometd/42.0", wsTransport);
        
        // Add OAuth 2.0 authentication header
        client.handshake((message) -> {
            Map<String, Object> ext = message.getExt(true);
            Map<String, Object> auth = new HashMap<>();
            auth.put("oauth_token", salesforceOAuthToken);
            ext.put("ext", auth);
        });

        return client;
    }
}





import org.cometd.bayeux.client.ClientSessionChannel;
import org.cometd.client.BayeuxClient;
import org.cometd.client.transport.ClientTransport;
import org.cometd.websocket.client.WebSocketTransport;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.util.thread.QueuedThreadPool;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

@Configuration
public class CometDConfig {

    @Value("${salesforce.endpoint}")
    private String salesforceEndpoint;

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxClient bayeuxClient() {
        HttpClient httpClient = new HttpClient();
        httpClient.setConnectTimeout(20000);
        httpClient.setIdleTimeout(30000);
        httpClient.setExecutor(new QueuedThreadPool(256));

        try {
            httpClient.start();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        Map<String, Object> options = new HashMap<>();
        options.put(ClientTransport.MAX_NETWORK_DELAY_OPTION, 30000);

        ScheduledExecutorService schedulerExecutorService = Executors.newScheduledThreadPool(1);
        ClientTransport wsTransport = new WebSocketTransport(options, null, schedulerExecutorService);
        
        BayeuxClient client = new BayeuxClient(salesforceEndpoint + "/cometd/42.0", wsTransport);
        client.handshake();
        return client;
    }
}




import org.cometd.bayeux.client.ClientSessionChannel;
import org.cometd.client.BayeuxClient;
import org.cometd.client.transport.ClientTransport;
import org.cometd.websocket.client.WebSocketTransport;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.util.thread.QueuedThreadPool;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;
import java.util.HashMap;
import java.util.Map;

@Configuration
public class CometDConfig {

    @Value("${salesforce.endpoint}")
    private String salesforceEndpoint;

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxClient bayeuxClient() {
        HttpClient httpClient = new HttpClient();
        httpClient.setConnectTimeout(20000);
        httpClient.setIdleTimeout(30000);
        httpClient.setExecutor(new QueuedThreadPool(256));

        try {
            httpClient.start();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        Map<String, Object> options = new HashMap<>();
        options.put(ClientTransport.MAX_NETWORK_DELAY_OPTION, 30000);

        ClientTransport wsTransport = new WebSocketTransport(options, null, new HashMap<>());
        BayeuxClient client = new BayeuxClient(salesforceEndpoint + "/cometd/42.0", wsTransport);

        client.handshake();
        return client;
    }
}





import org.cometd.bayeux.client.ClientSessionChannel;
import org.cometd.client.BayeuxClient;
import org.cometd.client.transport.ClientTransport;
import org.cometd.websocket.client.WebSocketTransport;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.util.thread.QueuedThreadPool;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;
import java.util.HashMap;
import java.util.Map;

@Configuration
public class CometDConfig {

    @Value("${salesforce.endpoint}")
    private String salesforceEndpoint;

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxClient bayeuxClient() {
        HttpClient httpClient = new HttpClient();
        httpClient.setConnectTimeout(20000);
        httpClient.setIdleTimeout(30000);
        httpClient.setExecutor(new QueuedThreadPool(256));

        try {
            httpClient.start();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        Map<String, Object> options = new HashMap<>();
        options.put(ClientTransport.MAX_NETWORK_DELAY_OPTION, 30000);

        ClientTransport wsTransport = new WebSocketTransport(options, null, new HashMap<>());
        BayeuxClient client = new BayeuxClient(salesforceEndpoint + "/cometd/42.0", wsTransport);

        client.handshake();
        return client;
    }
}





import org.cometd.client.BayeuxClient;
import org.cometd.client.transport.ClientTransport;
import org.cometd.websocket.client.WebSocketTransport;

@Configuration
public class CometDConfig {

    @Value("${salesforce.endpoint}")
    private String salesforceEndpoint;

    @Value("${salesforce.username}")
    private String salesforceUsername;

    @Value("${salesforce.password}")
    private String salesforcePassword;

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxClient bayeuxClient() {
        String loginEndpoint = salesforceEndpoint + "/cometd/42.0";
        WebSocketTransport wsTransport = new WebSocketTransport(null, null, new HashMap<>());
        BayeuxClient client = new BayeuxClient(loginEndpoint, wsTransport);
        client.handshake();
        return client;
    }
}





<dependency>
    <groupId>com.salesforce</groupId>
    <artifactId>cometd-salesforce</artifactId>
    <version>42.0.0</version> <!-- Replace with the actual version -->
    <scope>system</scope>
    <systemPath>${project.basedir}/lib/cometd-salesforce-42.0.0.jar</systemPath> <!-- Adjust the path as necessary -->
</dependency>




<dependency>
    <groupId>org.cometd.java</groupId>
    <artifactId>cometd-java-client</artifactId>
    <version>4.0.4</version>
</dependency>
<dependency>
    <groupId>org.cometd.java</groupId>
    <artifactId>cometd-websocket-jetty</artifactId>
    <version>4.0.4</version>
</dependency>
<dependency>
    <groupId>com.salesforce</groupId>
    <artifactId>cometd-salesforce</artifactId>
    <version>42.0.0</version>
</dependency>




@Configuration
public class CometDConfig {

    @Value("${salesforce.endpoint}")
    private String salesforceEndpoint;

    @Value("${salesforce.username}")
    private String salesforceUsername;

    @Value("${salesforce.password}")
    private String salesforcePassword;

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxClient bayeuxClient() {
        Map<String, Object> options = new HashMap<>();
        options.put(ClientTransport.MAX_NETWORK_DELAY_OPTION, 30000);

        HttpClient httpClient = new HttpClient();
        httpClient.setConnectTimeout(20000);
        httpClient.setIdleTimeout(30000);
        httpClient.setExecutor(new QueuedThreadPool(256));
        try {
            httpClient.start();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        Map<String, Object> options = new HashMap<>();
        options.put(ClientTransport.MAX_NETWORK_DELAY_OPTION, 30000);
        
        BayeuxClient client = new BayeuxClient(salesforceEndpoint + "/cometd/42.0", new JettyHttpClientTransport(options, httpClient));
        
        client.handshake();
        return client;
    }
}



@Component
public class SalesforceEventListener {

    @Autowired
    private BayeuxClient bayeuxClient;

    @PostConstruct
    public void init() {
        bayeuxClient.getChannel("/event/Your_Event_Name").subscribe((channel, message) -> {
            // Handle received event
            System.out.println("Received message: " + message);
        });
    }
}



salesforce.endpoint=https://login.salesforce.com
salesforce.username=your_username
salesforce.password=your_password




#!/bin/bash

# Define a function to handle the input and print username
handle_input() {
    username="$1"
    echo "Username: $username"
}

# Serve the HTML page
serve_html() {
    # Open the HTML page in the default web browser
    start index.html 

    # Start listening for input from the HTML page
    while true; do
        # Read the input from the HTML page
        read -r input
        
        # Extract the username from the input
        username=$(echo "$input" | grep -oP 'username=\K[^&]*')

        # Call the function to handle the input
        handle_input "$username"
    done
}

call_api(){
api_response =$(curl --request GET "http://localhost:8080/hello")
echo "API Response: $api_response"
}

# Start serving the HTML page
serve_html
call_api
