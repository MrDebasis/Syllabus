public with sharing class MilestoneController {
    @AuraEnabled
    public static void upsertMilestones(String payloadJson, Id caseId, String surveyType) {
        try {
            List<MilestoneWrapper> incomingList = (List<MilestoneWrapper>) JSON.deserialize(payloadJson, List<MilestoneWrapper>.class);

            Set<String> uniqueIds = new Set<String>();
            for (MilestoneWrapper wrap : incomingList) {
                uniqueIds.add(wrap.UniqueId);
            }

            // Get the record type ID for 'PatientPortalSurvey'
            Id recordTypeId = Schema.SObjectType.PatientSupportMilestone__c.getRecordTypeInfosByName().get('PatientPortalSurvey').getRecordTypeId();

            // Query existing milestones
            Map<String, PatientSupportMilestone__c> existingMap = new Map<String, PatientSupportMilestone__c>();
            for (PatientSupportMilestone__c ms : [
                SELECT Id, UniqueId__c 
                FROM PatientSupportMilestone__c 
                WHERE Case__c = :caseId 
                AND SurveyType__c = :surveyType 
                AND UniqueId__c IN :uniqueIds
            ]) {
                existingMap.put(ms.UniqueId__c, ms);
            }

            List<PatientSupportMilestone__c> recordsToUpsert = new List<PatientSupportMilestone__c>();

            for (MilestoneWrapper wrapper : incomingList) {
                PatientSupportMilestone__c record;

                if (existingMap.containsKey(wrapper.UniqueId)) {
                    record = existingMap.get(wrapper.UniqueId);
                } else {
                    record = new PatientSupportMilestone__c();
                    record.Case__c = caseId;
                    record.SurveyType__c = surveyType;
                    record.UniqueId__c = wrapper.UniqueId;
                    record.RecordTypeId = recordTypeId;
                }

                record.Question__c = wrapper.label;
                record.SurveyStatus__c = 'Completed';

                if (String.isNotBlank(wrapper.priority)) {
                    record.Priority__c = Integer.valueOf(wrapper.priority);
                    record.QuestionValue__c = null;

                    if (wrapper.label != null && wrapper.label.toLowerCase().contains('arrival')) {
                        record.ArrivalDate__c = Date.valueOf(wrapper.value);
                    } else if (wrapper.label != null && wrapper.label.toLowerCase().contains('departure')) {
                        record.DepartureDate__c = Date.valueOf(wrapper.value);
                    }
                } else {
                    record.QuestionValue__c = wrapper.value;
                }

                recordsToUpsert.add(record);
            }

            upsert recordsToUpsert;

        } catch (Exception e) {
            throw new AuraHandledException('Error processing milestone data: ' + e.getMessage());
        }
    }

    public class MilestoneWrapper {
        public String UniqueId;
        public String label;
        public String value;
        public String priority;
    }
}
