import { LightningElement, api, track } from 'lwc';

export default class PspApheresisSurveyLWCComp extends LightningElement {
    @api caseId = '';
    @api surveyType = '';
    @api questions = [];
    @track answers = [];
    @track isNextDisabled = true;
    @track currentScreen = 1;

    @track tripDatesSection = false;
    @track dateList = [{ id: 1, arrivalDate: '', departureDate: '' }];
    nextId = 2;

    get isScreen1() {
        return this.currentScreen === 1;
    }

    get isScreen2() {
        return this.currentScreen === 2;
    }

    get isScreen3() {
        return this.currentScreen === 3;
    }

    get screen1Questions() {
        return this.questions[this.currentScreen] || [];
    }

    get screen2Questions() {
        return this.questions[this.currentScreen] || [];
    }

    get screen3Questions() {
        return this.questions[this.currentScreen] || [];
    }

    handleInputChange(event) {
        const apiName = event.target.dataset.id;
        const value = event.target.value || event.target.dataset.value;
        const label = event.target.dataset.label || this.getLabelByApiName(apiName);
        const uniqueId = `${this.surveyType}_${this.caseId}_${apiName}_${this.currentScreen}`;

        const newAnswer = {
            UniqueId: uniqueId,
            label: label,
            value: value
        };

        const existingIndex = this.answers.findIndex(a => a.UniqueId === uniqueId);
        if (existingIndex > -1) {
            this.answers.splice(existingIndex, 1, newAnswer);
        } else {
            this.answers.push(newAnswer);
        }

        this.validateRequired();

        if (this.isScreen3 && label === 'Will the patient receive bridging therapy at your certified treatment center?*' && value === 'Yes') {
            this.tripDatesSection = true;
        } else {
            this.tripDatesSection = false;
        }
    }

    validateRequired() {
        const currentQuestions = this.questions[this.currentScreen] || [];
        const requiredQuestions = currentQuestions.filter(q => q.required);

        const allAnswered = requiredQuestions.every(q => {
            const uniqueId = `${this.surveyType}_${this.caseId}_${q.apiName}_${this.currentScreen}`;
            const answerObj = this.answers.find(a => a.UniqueId === uniqueId);
            return answerObj && answerObj.value !== undefined && answerObj.value !== null && answerObj.value !== '';
        });

        this.isNextDisabled = !allAnswered;
    }

    handleNext() {
        if (this.currentScreen < 5) {
            this.currentScreen++;
            this.isNextDisabled = true;
        }
    }

    getLabelByApiName(apiName) {
        const allQuestions = Object.values(this.questions).flat();
        const found = allQuestions.find(q => q.apiName === apiName);
        return found ? found.label : '';
    }

    addDateFields() {
        this.dateList = [
            ...this.dateList,
            { id: this.nextId++, arrivalDate: '', departureDate: '' }
        ];
    }

    handleDateChange(event) {
        const id = parseInt(event.target.dataset.id, 10);
        const type = event.target.dataset.type;
        const value = event.target.value;

        this.dateList = this.dateList.map(item => {
            if (item.id === id) {
                return {
                    ...item,
                    [type === 'arrival' ? 'arrivalDate' : 'departureDate']: value
                };
            }
            return item;
        });

        this.storeDatesInAnswers();
    }

    storeDatesInAnswers() {
        const labelBase = 'Bridging Therapy Dates';
        // Remove existing bridging therapy answers first
        this.answers = this.answers.filter(a => !a.UniqueId.includes('BridgingTherapyDate'));

        this.dateList.forEach((entry, index) => {
            const priority = index + 1;
            const arrivalAnswer = {
                UniqueId: `BridgingTherapyDate_Arrival_${priority}`,
                label: `${labelBase} - Arrival`,
                value: entry.arrivalDate,
                priority: this.dateList.length > 1 ? priority : undefined
            };
            const departureAnswer = {
                UniqueId: `BridgingTherapyDate_Departure_${priority}`,
                label: `${labelBase} - Departure`,
                value: entry.departureDate,
                priority: this.dateList.length > 1 ? priority : undefined
            };
            this.answers.push(arrivalAnswer, departureAnswer);
        });
    }
}


<template if:true={tripDatesSection}>
    <label>When should we check back in to confirm if bridging therapy will be needed?*</label>
    <template for:each={dateList} for:item="item">
        <div key={item.id} class="slds-box slds-m-top_small">
            <lightning-input type="date" label="Arrival Date"
                value={item.arrivalDate}
                data-id={item.id}
                data-type="arrival"
                onchange={handleDateChange}>
            </lightning-input>
            <lightning-input type="date" label="Departure Date"
                value={item.departureDate}
                data-id={item.id}
                data-type="departure"
                onchange={handleDateChange}>
            </lightning-input>
        </div>
    </template>

    <div class="slds-m-top_medium">
        <lightning-button label="Add Dates" onclick={addDateFields} class="slds-m-right_small"></lightning-button>
    </div>
</template>
