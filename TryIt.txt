 handleSort(event) {
        const columnId = event.target.dataset.columnId; // Get the column ID
            
        const columnConfig = this.columnConfig.find(col => col.column_id === columnId);
    
        if (columnConfig && columnConfig.isSortingApplied) {
            // Toggle sort direction
            if (columnConfig.sortDirection === 'asc') {
                columnConfig.sortDirection = 'desc';
                columnConfig.IsAscsortDirection = false;
                columnConfig.IsDescsortDirection = true;
            } else {
                columnConfig.sortDirection = 'asc';
                columnConfig.IsAscsortDirection = true;
                columnConfig.IsDescsortDirection = false;
            }
    
    
            // Sort the processedCases array dynamically based on sortDirection
            const sortDirection = columnConfig.sortDirection;
            const isDate = columnConfig.data_type === 'date';
            const isNumber = columnConfig.data_type === 'number';
        try{
                console.log('isDate',isDate);
                this.casesFiltered  = [...this.casesFiltered].sort((a, b) => {
                const fieldParts = columnId.split('.');
                let aValue = a;
                let bValue = b;
    
                // Resolve nested fields dynamically
                for (const part of fieldParts) {
                    aValue = aValue ? aValue[part] : undefined;
                    bValue = bValue ? bValue[part] : undefined;
                }
    
    
                if (isDate) {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                }
    
                if (isNumber) {
                    aValue = parseFloat(aValue);
                    bValue = parseFloat(bValue);
                }
    
                if (sortDirection === 'asc') {
                    return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
                } else {
                    return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
                }
            });
             }catch(error){
                console.log('err--->',error);
             }

        }
       
    }
