import { LightningElement ,track} from 'lwc';
const surveyConfig = {
    apheresis: {
        steps: {
            start: {
                type: 'date',
                questions: [
                    { id: 'Apheresis-Q1-P1', label: 'When is the apheresis appointment date for Order # [Order Number]?*', type: 'date', required: true },
                    { id: 'Apheresis-Q2-P1', label: 'What day should the patient arrive for their apheresis appointment?*', type: 'date', required: true },
                    { id: 'Apheresis-Q3-P1', label: 'What day should the patient depart?*', type: 'date', required: true }
                ],
                next: 'screen2'
            },
            screen2: {
                id: 'Apheresis-P2',
                type: 'yesNo',
                questionId: 'serviceHelpful',
                label: 'Are the dates provided related to CARVYKTIÂ® treatment?*',
                required: true,
                options: ['Yes', 'No'],
                next: 'screen3'
            },
            screen3: {
                type: 'multipleChoice',
                questionId: 'futureVisit',
                label: 'Will the patient receive bridging therapy at your certified treatment center?*',
                required: true,
                options: ['Yes', 'No', 'Not Sure Yet'],
                next: 'end'
            },
            end: {
                type: 'message',
                label: 'Thank you for completing the survey.'
            }
        }
    }
};


export default class PspSurveyLWCComponent extends LightningElement {
   

    @track currentStep = 'start';
  
    @track answers = {};
    @track selectedOption = '';

    @track showDateInputs = false;
    @track showYesNo = false;
    @track showMultipleChoice = false;
    @track showMessage = false;
    @track isNextButtonDisabled = true;

    @track renderedDateQuestions = [];
    @track yesNoLabel = '';
    @track yesNoOptions = [];
    @track multipleChoiceLabel = '';
    @track multipleChoiceOptions = [];
    @track messageLabel = '';

    connectedCallback() {
        this.updateUIFlags();
    }

    get stepConfig() {
        return surveyConfig.apheresis.steps[this.currentStep];
    }

    updateUIFlags() {
        const step = this.stepConfig;

        // Reset flags
        this.showDateInputs = false;
        this.showYesNo = false;
        this.showMultipleChoice = false;
        this.showMessage = false;
        this.isNextButtonDisabled = true;
        this.renderedDateQuestions = [];
        this.yesNoLabel = '';
        this.yesNoOptions = [];
        this.multipleChoiceLabel = '';
        this.multipleChoiceOptions = [];
        this.messageLabel = '';

        switch (step.type) {
            case 'date':
                this.showDateInputs = true;
                this.renderedDateQuestions = step.questions.map(q => ({
                    ...q,
                    value: this.answers[q.id] || ''
                }));
                break;
            case 'yesNo':
                this.showYesNo = true;
                this.yesNoLabel = step.label;
                this.yesNoOptions = step.options.map(opt => ({ label: opt, value: opt }));
                break;
            case 'multipleChoice':
                this.showMultipleChoice = true;
                this.multipleChoiceLabel = step.label;
                this.multipleChoiceOptions = step.options.map(opt => ({ label: opt, value: opt }));
                break;
            case 'message':
                this.showMessage = true;
                this.messageLabel = step.label;
                break;
        }

        this.updateNextButtonState();
    }

    handleInputChange(event) {
        const { name, value } = event.target;
        this.answers[name] = value;

        // Update renderedDateQuestions for value binding
        this.renderedDateQuestions = this.renderedDateQuestions.map(q => {
            return q.id === name ? { ...q, value } : q;
        });
        console.log('this.renderedDateQuestions', JSON.stringify(this.renderedDateQuestions));
        this.updateNextButtonState();
    }

    handleOptionChange(event) {
        this.selectedOption = event.detail.value;
        const step = this.stepConfig;
        this.answers[step.questionId] = this.selectedOption;

        this.updateNextButtonState();
    }

    updateNextButtonState() {
        const step = this.stepConfig;

        switch (step.type) {
            case 'date':
                this.isNextButtonDisabled = !step.questions.every(q => this.answers[q.id]);
                break;
            case 'yesNo':
            case 'multipleChoice':
                this.isNextButtonDisabled = !this.selectedOption;
                break;
            default:
                this.isNextButtonDisabled = false;
                break;
        }
    }

    handleNext() {
        this.selectedOption = '';
        this.currentStep = this.stepConfig.next;
        this.updateUIFlags();
    } 
}


<template>

    <div class="survey-container">

        <template if:true={showDateInputs}>
            <template for:each={renderedDateQuestions} for:item="q">
                <lightning-input
                    key={q.id}
                    type={q.type}
                    name={q.id}
                    label={q.label}
                    value={q.value}
                    onchange={handleInputChange}
                    required={q.required}>
                </lightning-input>
            </template>
        </template>

       
        <template if:true={showYesNo}>
            <lightning-radio-group
                label={yesNoLabel}
                name="yesno"
                options={yesNoOptions}
                value={selectedOption}
                type="radio"
                onchange={handleOptionChange}>
            </lightning-radio-group>
        </template>

        
        <template if:true={showMultipleChoice}>
            <lightning-radio-group
                label={multipleChoiceLabel}
                name="multiplechoice"
                options={multipleChoiceOptions}
                value={selectedOption}
                type="radio"
                onchange={handleOptionChange}>
            </lightning-radio-group>
        </template>

    
        <template if:true={showMessage}>
            <div class="thank-you">{messageLabel}</div>
        </template>

       
        <lightning-button
            class="slds-m-top_medium"
            variant="brand"
            label="Next"
            onclick={handleNext}
            disabled={isNextButtonDisabled}>
        </lightning-button>
    </div>
</template>
