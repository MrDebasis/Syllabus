<template>
    <lightning-card title="Expense Line Items">
        <lightning-datatable
            key-field="id"
            data={data}
            columns={columns}
            onsort={handleSort}
            sorted-by={sortBy}
            sorted-direction={sortDirection}>
        </lightning-datatable>
    </lightning-card>
</template>


import { LightningElement, track, wire } from 'lwc';
import getExpenseLineItems from '@salesforce/apex/ExpenseLineItemController.getExpenseLineItems';

const columns = [
    { label: 'Expense Date', fieldName: 'ExpenseDate__c', sortable: true },
    { label: 'Expense Category', fieldName: 'ExpenseCategory__c', sortable: true },
    { label: 'Expense Detail Vendor', fieldName: 'ExpenseDetailVendor__c', sortable: true },
    { label: 'Receipt Amount', fieldName: 'ReceiptAmount__c', sortable: true },
    { label: 'Non-Reimbursable Amount', fieldName: 'NonReimbursableAmount__c', sortable: true },
    { label: 'Reimbursable Amount', fieldName: 'ReimbursableAmount__c', sortable: true },
    { label: 'Notes', fieldName: 'Notes__c', sortable: true },
];

export default class ExpenseLineItemTable extends LightningElement {
    @track data = [];
    @track columns = columns;
    @track sortBy;
    @track sortDirection;

    @wire(getExpenseLineItems)
    wiredExpenseLineItems({ error, data }) {
        if (data) {
            this.data = data;
        } else if (error) {
            // handle error
        }
    }

    handleSort(event) {
        const { fieldName: sortedBy, sortDirection } = event.detail;
        const cloneData = [...this.data];

        cloneData.sort(this.sortBy(sortedBy, sortDirection === 'asc' ? 1 : -1));
        this.data = cloneData;
        this.sortBy = sortedBy;
        this.sortDirection = sortDirection;
    }

    sortBy(field, reverse, primer) {
        const key = primer
            ? function (x) {
                  return primer(x[field]);
              }
            : function (x) {
                  return x[field];
              };

        return function (a, b) {
            a = key(a);
            b = key(b);
            return reverse * ((a > b) - (b > a));
        };
    }
}




public with sharing class ExpenseLineItemController {
    @AuraEnabled(cacheable=true)
    public static List<ExpenseLineItem__c> getExpenseLineItems() {
        return [
            SELECT Id, ExpenseDate__c, ExpenseCategory__c, ExpenseDetailVendor__c, ReceiptAmount__c, 
                   NonReimbursableAmount__c, ReimbursableAmount__c, Notes__c 
            FROM ExpenseLineItem__c 
            ORDER BY CreatedDate DESC 
            LIMIT 20
        ];
    }
}
