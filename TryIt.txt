<template>
    <div class="pagination">
        <lightning-button 
            disabled={isPreviousDisabled} 
            onclick={handlePreviousClick} 
            label="Previous">
        </lightning-button>

        <template for:each={pagesToRender} for:item="page">
            <lightning-button
                key={page.number}
                label={page.number}
                data-page={page.number}
                onclick={handlePageClick}
                disabled={page.disabled}
                variant={page.variant}>
            </lightning-button>
        </template>

        <lightning-button 
            disabled={isNextDisabled} 
            onclick={handleNextClick} 
            label="Next">
        </lightning-button>
    </div>
</template>


import { LightningElement, api, track } from 'lwc';

export default class Psp_PSSTrackerPaginationLWCComp extends LightningElement {
    @api currentPage = 1;
    @api totalRecords = 0;
    @api pageSize = 10;
    @api paginatedMap = new Map(); // Make this public so parent can bind

    get totalPages() {
        return Math.ceil(this.totalRecords / this.pageSize);
    }

    get isPreviousDisabled() {
        return this.currentPage === 1;
    }

    get isNextDisabled() {
        return this.currentPage === this.totalPages;
    }

    get pagesToRender() {
        const pages = [];
        const maxVisible = 5;
        const blockStart = Math.floor((this.currentPage - 1) / maxVisible) * maxVisible + 1;
        const blockEnd = Math.min(blockStart + maxVisible - 1, this.totalPages);

        for (let i = blockStart; i <= blockEnd; i++) {
            pages.push({
                number: i,
                disabled: !this.paginatedMap?.has(i),
                variant: i === this.currentPage ? 'brand' : 'neutral'
            });
        }

        return pages;
    }

    handlePreviousClick() {
        this.dispatchEvent(new CustomEvent('previous'));
    }

    handleNextClick() {
        this.dispatchEvent(new CustomEvent('next'));
    }

    handlePageClick(event) {
        const page = parseInt(event.target.dataset.page, 10);
        this.dispatchEvent(new CustomEvent('pagechange', { detail: page }));
    }
}


<c-psp_-p-s-s-tracker-pagination-l-w-c-comp
    current-page={currentPage}
    total-records={casesFiltered.length}
    page-size="10"
    paginated-map={paginatedCasesMap}
    onprevious={handlePrevious}
    onnext={handleNext}
    onpagechange={handlePageClick}>
</c-psp_-p-s-s-tracker-pagination-l-w-c-comp>
