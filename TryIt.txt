import org.cometd.bayeux.client.BayeuxClient;
import org.cometd.client.BayeuxClient;
import org.cometd.client.transport.ClientTransport;
import org.cometd.client.transport.JettyHttpClientTransport;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.util.ajax.JSON;
import org.eclipse.jetty.util.ajax.JSON.StringSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.HashMap;
import java.util.Map;

@Configuration
public class CometDConfig {

    @Bean
    public BayeuxClient bayeuxClient() throws Exception {
        // Create (and eventually configure) Jetty's HttpClient.
        HttpClient httpClient = new HttpClient();

        // Here configure Jetty's HttpClient.
        // httpClient.setMaxConnectionsPerDestination(2);
        httpClient.start();

        // Prepare the transport.
        Map<String, Object> options = new HashMap<>();
        ClientTransport transport = new JettyHttpClientTransport(options, httpClient);

        // Create the BayeuxClient.
        BayeuxClient bayeuxClient = new BayeuxClient("https://gpbp--catdev.sandbox.my.salesforce.com/cometd/43.0", transport);

        // Add the message acknowledgement extension.
        bayeuxClient.addExtension(new AckExtension());

        // Register a listener for channel /service/business.
        ClientSessionChannel channel = bayeuxClient.getChannel("/service/business");
        channel.addListener((ClientSessionChannel.MessageListener)(c, message) -> {
            System.err.printf("Received message on %s: %s%n", c, message);
        });

        // Handshake with the server.
        bayeuxClient.handshake();

        // Return the BayeuxClient instance
        return bayeuxClient;
    }
}





import org.cometd.bayeux.client.BayeuxClient;
import org.cometd.client.BayeuxClient;
import org.cometd.client.transport.ClientTransport;
import org.cometd.client.transport.JettyHttpClientTransport;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.util.ajax.JSON;
import org.eclipse.jetty.util.ajax.JSON.StringSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class BayeuxService {

    private final BayeuxClient bayeuxClient;

    @Autowired
    public BayeuxService(BayeuxClient bayeuxClient) {
        this.bayeuxClient = bayeuxClient;
    }

    public void subscribeToStocksChannel() {
        bayeuxClient.handshake(handshakeReply -> {
            if (handshakeReply.isSuccessful()) {
                // Subscription logic
                ClientSessionChannel stocksChannel = bayeuxClient.getChannel("/stocks");
                stocksChannel.subscribe((channel, message) -> {
                    System.out.println("Received message on channel: " + channel + ", message: " + message);
                    // Handle the received message here
                });
            } else {
                System.err.println("Handshake failed: " + handshakeReply);
            }
        });
    }
}






@Configuration
public class CometDConfig {

    @Bean
    public BayeuxClient bayeuxClient() throws Exception {
        // Create (and eventually configure) Jetty's HttpClient.
        HttpClient httpClient = new HttpClient();

        // Here configure Jetty's HttpClient.
        // httpClient.setMaxConnectionsPerDestination(2);
        httpClient.start();

        // Prepare the transport.
        Map<String, Object> options = new HashMap<>();
        ClientTransport transport = new JettyHttpClientTransport(options, httpClient);

        // Create the BayeuxClient.
        ClientSession bayeuxClient = new BayeuxClient(" https://gpbp--catdev.sandbox.my.salesforce.com/cometd/43.0", transport);

        // Here prepare the BayeuxClient, for example:
        // Add the message acknowledgement extension.
        bayeuxClient.addExtension(new AckExtension());
        // Register a listener for channel /service/business.
        ClientSessionChannel channel = bayeuxClient.getChannel("/service/business");
       // channel=bayeuxClient.getChannel(Channel.META_HANDSHAKE);
        channel.addListener((ClientSessionChannel.MessageListener)(c, message) -> {
            System.err.printf("Received message on %s: %s%n", c, message);
        });

        // Handshake with the server.
        bayeuxClient.handshake();


        BayeuxClient bayeuxClient1 = new BayeuxClient("http://localhost:8080/cometd", transport);
        bayeuxClient1.handshake(handshakeReply -> {
            if (handshakeReply.isSuccessful()) {
                // Here the handshake with the server is successful.
            }
        });

        return null;
    }



for subscrive where to add ?
BayeuxClient bayeuxClient = new BayeuxClient("http://localhost:8080/cometd", transport);
bayeuxClient.handshake(handshakeReply -> {
    // You can only subscribe after a successful handshake.
    if (handshakeReply.isSuccessful()) {
        // The channel you want to subscribe to.
        ClientSessionChannel channel = bayeuxClient.getChannel("/stocks");

        // The message listener invoked every time a message is received from the server.
        ClientSessionChannel.MessageListener messageListener = (c, message) -> {
            // Here you received a message on the channel.
        };

        // Send the subscription to the server.
        channel.subscribe(messageListener);
    }
});
