import { LightningElement,api,track } from 'lwc';

export default class PspApheresisSurveyLWCComp extends LightningElement {
   @api caseId = '';
    @api surveyType = '';
    @api questions = []; // { "1": [..], "2": [..] }
    @track answers = []; // Array of { UniqueId, label, value }
    @track isNextDisabled = true;
    @track currentScreen = 1;

    get isScreen1() {
        return this.currentScreen === 1;
    }

    get isScreen2() {
        return this.currentScreen === 2;
    }
    get isScreen3() {
        return this.currentScreen === 3;
    }


    get screen1Questions() {
        return this.questions[this.currentScreen] || [];
    }

    get screen2Questions() {
        return this.questions[this.currentScreen] || [];
    }
     get screen3Questions() {
        return this.questions[this.currentScreen]|| [];
    }

    @track tripDatesSection = false;
handleInputChange(event) {
    const apiName = event.target.dataset.id;
    const value = event.target.value || event.target.dataset.value;
    const label = event.target.dataset.label || this.getLabelByApiName(apiName);
    const uniqueId = `${this.surveyType}_${this.caseId}_${apiName}_${this.currentScreen}`;

    const newAnswer = {
        UniqueId: uniqueId,
        label: label,
        value: value
    };

    const existingIndex = this.answers.findIndex(a => a.UniqueId === uniqueId);
    if (existingIndex > -1) {
        this.answers.splice(existingIndex, 1, newAnswer);
    } else {
        this.answers.push(newAnswer);
    }


    console.log('answers:', JSON.stringify(this.answers, null, 2));
    this.validateRequired();

    if(this.isScreen3 && label === 'Will the patient receive bridging therapy at your certified treatment center?*' && value === 'Yes') {
        this.tripDatesSection = true;
    } else {
        this.tripDatesSection = false;
    }
}

    validateRequired() {
        const currentQuestions = this.questions[this.currentScreen] || [];
        const requiredQuestions = currentQuestions.filter(q => q.required);

        const allAnswered = requiredQuestions.every(q => {
            const uniqueId = `${this.surveyType}_${this.caseId}_${q.apiName}_${this.currentScreen}`;
            const answerObj = this.answers.find(a => a.UniqueId === uniqueId);
            return answerObj && answerObj.value !== undefined && answerObj.value !== null && answerObj.value !== '';
        });

        this.isNextDisabled = !allAnswered;
    }

    handleNext() {
        if (this.currentScreen < 5) {
            this.currentScreen++;
            this.isNextDisabled = true;
        }
    }

    getLabelByApiName(apiName) {
        const allQuestions = Object.values(this.questions).flat();
        const found = allQuestions.find(q => q.apiName === apiName);
        return found ? found.label : '';
    }

      @track dateList = [
        { id: 1, arrivalDate: '', departureDate: '' }
    ];
    @track jsonData;

    nextId = 2;

    addDateFields() {
        this.dateList = [
            ...this.dateList,
            { id: this.nextId++, arrivalDate: '', departureDate: '' }
        ];
    }

    handleDateChange(event) {
        const id = parseInt(event.target.dataset.id, 10);
        const type = event.target.dataset.type;
        const value = event.target.value;

        this.dateList = this.dateList.map(item => {
            if (item.id === id) {
                return {
                    ...item,
                    [type === 'arrival' ? 'arrivalDate' : 'departureDate']: value
                };
            }
            return item;
        });
    }

    printData() {
        // You can also send this data to Apex if needed
        this.jsonData = JSON.stringify(this.dateList, null, 2);
        console.log('Collected Dates:', this.dateList);
    }
}
<template>
    <!-- Screen 1: Date Inputs -->
    <template if:true={isScreen1}>
        <template for:each={screen1Questions} for:item="q">
            <div key={q.apiName} class="s-question">
                <label>{q.label}</label>
                <lightning-input 
                    type="date"
                    data-id={q.apiName}
                    onchange={handleInputChange}
                    required={q.required}>
                </lightning-input>
            </div>
        </template>
    </template>

    <!-- Screen 2: Yes/No Buttons -->
    <template if:true={isScreen2}>
        <template for:each={screen2Questions} for:item="q">
            <div key={q.apiName} class="s-question">
                <label>{q.label}</label>
                <div class="s-buttons">
                    <lightning-button
                        label="Yes"
                        data-id={q.apiName}
                        data-label={q.label}
                        data-value="Yes"
                        onclick={handleInputChange}
                       >
                    </lightning-button>
                    <lightning-button
                        label="No"
                        data-id={q.apiName}
                        data-label={q.label}
                        data-value="No"
                        onclick={handleInputChange}
                        >
                    </lightning-button>
                </div>
            </div>
        </template>
    </template>

        <!-- Screen 3:  -->
    <template if:true={isScreen3}>
        <template for:each={screen3Questions} for:item="q">
            <div key={q.apiName} class="s-question">
                <label>{q.label}</label>
                <div class="s-buttons">
                    <lightning-button
                        label="Yes"
                        data-id={q.apiName}
                        data-label={q.label}
                        data-value="Yes"
                        onclick={handleInputChange}
                       >
                    </lightning-button>
                    <lightning-button
                        label="No"
                        data-id={q.apiName}
                        data-label={q.label}
                        data-value="No"
                        onclick={handleInputChange}
                        >
                    </lightning-button>
                    <lightning-button
                        label="Not sure yet"
                        data-id={q.apiName}
                        data-label={q.label}
                        data-value="Not sure yet"
                        onclick={handleInputChange}
                        >
                    </lightning-button>
                </div>
            </div>
        </template>
    </template>
            <template if:true={tripDatesSection}>
                <label>When should we check back in to confirm if bridging therapy will be needed?*</label>
                      <template for:each={dateList} for:item="item" for:index="index">
                <div key={item.id} class="slds-box slds-m-top_small">
                    <lightning-input type="date" label="Arrival Date" value={item.arrivalDate} data-id={item.id} data-type="arrival" onchange={handleDateChange}></lightning-input>
                    <lightning-input type="date" label="Departure Date" value={item.departureDate} data-id={item.id} data-type="departure" onchange={handleDateChange}></lightning-input>
                </div>
            </template>

            <div class="slds-m-top_medium">
                <lightning-button label="Add Dates" onclick={addDateFields} class="slds-m-right_small"></lightning-button>
                <lightning-button label="Print Data" onclick={printData} variant="brand"></lightning-button>
            </div>

            <template if:true={jsonData}>
                <div class="slds-m-top_medium">
                    <p><strong>Collected Data:</strong></p>
                    <pre>{jsonData}</pre>
                </div>
            </template>
        </template>

    <!-- Navigation -->
    <lightning-button label="Next" onclick={handleNext} disabled={isNextDisabled}></lightning-button>
</template>
